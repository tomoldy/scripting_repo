{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := '917636f9-fc3e-4158-8627-210fff7ada59'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '2'}
program RenaxOSRSMinerandBanker; //Written for SIMBA 32 bit using OSRS official client in fixed classic layout
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

const
  LOGIN_NAME        = '';                         //Username/Email
  LOGIN_PASS        = '';                         //Password
  PPIN              = '';                         //Bank pin
  PIXEL_SHIFT       = 14;                         //% shift within the playerbox to be considered "animating"
  RS_WORLD          = 434;                        //Desired World (-1 = Random)
  IS_MEMBER         = False;                      //True if your player is a Member
  USEADAPTIVEWALK   = True;                       //True for adaptive walking, false for screen walking
  MINELOCATION      = 4;                          //1 for Rimmington mine w/ Falador Bank, 2 for Lumbridge Swamp, 3 for Rimmington Mine with PS deposit box, 4 for Mining Guild
  ORE               = 'Coal';                     //Rimmington = Iron, Tin, Copper; Lumbridge = Coal, Mithril, Adamantite; Mining Guild = Coal, Mithril, Adamantite
  RANDOMORE         = 'Y';                        //Y = will mine coal, mithril, and adamatite in Mining Guild
  MAXTIME           = 5000;                       //Shutdown after X minutes

  VERSION           = 'v2.0';


var
  Trips,Mined: Int32;
  BankTile,MiningTile,FaladorMineIron,FaladorMineTin,FaladorMineCopper,PSBankTile,DraynorMineTile,FaladorMineClay: TPoint;
  FBankTile,DBankTile,MGLU,MGLD,MGC,MG1S: TPoint;
  RSW: TRSWalker;
  TargetRock,PSDepositBox: TRSObject;
  BDepositItems,PAList: TRSItemArray;
  OreExp: Extended;
  MineLoc: String;
  ShutdownTime,IronOre,TinOre,CopperOre,CoalOre,MithrilOre,AdamantiteOre,ClayOre,
  RubyCount,SapphireCount,DiamondCount,EmeraldCount,GemCount: Int64;

// Script

procedure declarePlayers();
begin
  Login.AddPlayer(LOGIN_NAME, LOGIN_PASS, PPIN, []);
  Login.PlayerIndex := High(Login.Players);
end;

Procedure SetupAB();
begin
  Antiban.Skills := [ERSSkill.MINING, ERSSkill.TOTAL, ERSSkill.ATTACK, ERSSkill.STRENGTH,
                    ERSSkill.FISHING, ERSSkill.SMITHING, ERSSkill.PRAYER, ERSSkill.COOKING];
  Antiban.AddTask(ONE_SECOND*45, @Antiban.RandomMouse);
  Antiban.AddTask(ONE_MINUTE*4,  @Antiban.RandomRightClick);
  Antiban.AddTask(ONE_MINUTE*6,  @Antiban.LoseFocus);
  Antiban.AddTask(ONE_MINUTE*8,  @Antiban.RandomTab);
  //Antiban.AddTask(ONE_MINUTE*15, @Antiban.RandomRotate);
  Antiban.AddTask(ONE_MINUTE*9,  @Antiban.HoverSkills);
  Antiban.AddBreak(ONE_MINUTE*18, ONE_SECOND*40, 0.2, 0.0);   //Short break
  Antiban.AddBreak(ONE_MINUTE*90, ONE_MINUTE*10, 0.2, 0.0);  //Moderate break
  Antiban.AddBreak(ONE_HOUR*8, ONE_HOUR*5, 0.2, 0.8);        //Sleep
  //Antiban.AddSleep('10:00:00', 10 * ONE_HOUR, 0.1, 1);
end;

Procedure EndScript(Reason: string);
begin
  Logout.ClickLogout();
  RSClient.Image.Clear();
  TerminateScript(Reason);
end;

Procedure RunAB();
begin
  if Bank.IsOpen then Bank.Close;
  Antiban.DismissRandom();
  Antiban.DoAntiban();
  if (not RSClient.IsLoggedIn) then
    Login.LoginPlayer();
end;

Procedure LoadPathsandColors;
begin
  MGLD              := [6409, 553];
  MGLU              := [7469, 3100];
  MG1S              := [6458, 551];
  MGC               := [6486, 552];
  PSBankTile        := [7568, 3508];
  FBankTile         := [7444, 3028];
  DBankTile         := [7762, 3476];
  FaladorMineIron   := [7275, 3494];
  FaladorMineTin    := [7331, 3506];
  FaladorMineCopper := [7300, 3465];
  FaladorMineClay   := [7334, 3488];
  DraynorMineTile   := [7976, 3860];
end;

Procedure SetPathsandColors;
begin
  MiningTile:= [];

  case MINELOCATION of
  1:
    begin
      RSW.Setup([[7196,2931,7672,3591]]);
      BankTile := FBankTile;
      MineLoc:= 'Rimmington mine';
    end;
  2:
    begin
      RSW.Setup([[7682,3394,8418,3957]]);
      BankTile := DBankTile;
      MineLoc:= 'Lumbridge swamp';
    end;
  3:
    begin
      RSW.Setup([[7196,2931,7672,3591]]);
      BankTile:= PSBankTile;
      MineLoc:= 'Rimmington mine';
    end;
  4:
    begin
      RSW.Setup([[7377,2980,7572,3148],[6334,456,6642,618]]);
      BankTile := FBankTile;
      MineLoc:= 'Mining guild';
    end;
  end;

  case ORE of
    'Iron': begin
      TargetRock := RSObjects.IronRock;
      TargetRock.UpText += 'Iron rocks';
      if (MINELOCATION = 1) or (MINELOCATION = 3) then
        MiningTile:= FaladorMineIron;
      if (MINELOCATION = 4) then
        MiningTile:= MGC;
    end;
    'Coal': begin
      RSObjects.CoalRock.Finder.Colors += CTS2(2438454, 7, 0.15, 0.76);
      TargetRock := RSObjects.CoalRock;
      TargetRock.UpText += 'Coal rocks';
      if MINELOCATION = 2 then
        MiningTile:= DraynorMineTile;
      if MINELOCATION = 4 then
        MiningTile:= MGC;
    end;
    'Mithril': begin
      TargetRock := RSObjects.MithrilRock;
      TargetRock.UpText += 'Mithril rocks';
      if MINELOCATION = 2 then
        MiningTile:= DraynorMineTile;
      if MINELOCATION = 4 then
        MiningTile:= MGC;
    end;
    'Adamantite': begin
      TargetRock := RSObjects.AdamantiteRock;
      TargetRock.UpText += 'Adamantite rocks';
      if MINELOCATION = 2 then
        MiningTile:= DraynorMineTile;
      if MINELOCATION = 4 then
        MiningTile:= MGC;
    end;
    'Tin': begin
      TargetRock := RSObjects.TinRock;
      TargetRock.UpText += 'Tin rocks';
      if (MINELOCATION = 1) or (MINELOCATION = 3) then
        MiningTile:= FaladorMineTin;
    end;
    'Copper': begin
      TargetRock := RSObjects.CopperRock;
      TargetRock.UpText += 'Copper rocks';
      if (MINELOCATION = 1) or (MINELOCATION = 3) then
        MiningTile:= FaladorMineCopper;
    end;
    'Clay': begin
      TargetRock := RSObjects.ClayRock;
      TargetRock.UpText += 'Clay rocks';
      if (MINELOCATION = 1) or (MINELOCATION = 3) then
        MiningTile:= FaladorMineClay;
    end;
  end;

  TargetRock.Coordinates := [];
  TargetRock.Filter.Walker := False;
  TargetRock.Filter.Finder := True;
  TargetRock.Filter.MinimapDot := False;

  if MiningTile = [] then
    EndScript('Invalid combination of mining location and ore type');

  BDepositItems:= ['Tin ore', 'Copper ore', 'Iron ore', 'Coal', 'Mithril ore','Adamantite ore',
                  'Uncut ruby', 'Uncut diamond', 'Uncut sapphire', 'Uncut emerald','Beer','Kebab','Clay'];
  PAList:= ['Bronze pickaxe', 'Mithril pickaxe', 'Adamant pickaxe', 'Iron pickaxe',
            'Rune pickaxe', 'Steel pickaxe', 'Black pickaxe', 'Dragon pickaxe', 'Crystal pickaxe'];

  //Loading Port Sarim deposit box
  PSDepositBox.Setup(7,[[7573, 3510], [7572, 3508], [7575, 3508], [7572, 3511], [7575, 3511]]);
  PSDepositBox.Finder.Colors += CTS2(5466227, 5, 0.13, 0.13);
  PSDepositBox.Finder.Grow:= 5;
  PSDepositBox.Finder.ClusterDistance:= 5;
  PSDepositBox.Uptext:= ['Deposit', 'Bank deposit', 'deposit box'];
  PSDepositBox.Filter.Walker := False;
  PSDepositBox.Filter.Finder := True;
  PSDepositBox.Filter.MinimapDot := False;

end;

Procedure SetupMiner();
begin
  RSW.Setup('world');
  RSW.ScreenWalk:= True;
  RSW.AdaptiveWalk := USEADAPTIVEWALK;
  RSW.FancyMouse:= True;
  LoadPathsandColors;
  SetPathsandColors;
  Trips:= 0;
  Mined:= 0;
  ShutDownTime:= MaxTime*60000;
  declarePlayers();
  if not RSClient.IsLoggedIn then
  begin
    Login.LoginPlayer();         //Log player in
    MainScreen.setHighestPitch;  //Sets the camera angle to the highest point
  end;

  RSObjects.Setup;
  SetupAB();
  Cleardebug();
  Writeln('Starting OSRS Miner and Banker ', VERSION,' by Renax');
  Writeln('Mining at: ',MineLoc);
end;

Procedure RandomizeOre; //for mining guild or lumbridge swamp mine
begin
  case Random(0,2) of
  0: begin
    RSObjects.CoalRock.Finder.Colors += CTS2(2438454, 7, 0.15, 0.76);
    TargetRock := RSObjects.CoalRock;
    TargetRock.UpText += 'Coal rocks';
  end;
  1: begin
    TargetRock := RSObjects.MithrilRock;
    TargetRock.UpText += 'Mithril rocks';
  end;
  2: begin
    TargetRock := RSObjects.AdamantiteRock;
    TargetRock.UpText += 'Adamantite rocks';
  end;
  end;
end;


Procedure DoMining; //Credit to Slacky for TPA/ATPA tutorial
var
  InvCount: Int32;
  T: UInt64;
Begin
  Writeln('Mining for ore.');
  MainScreen.setHighestPitch();
  While not Inventory.IsFull() do
  begin
    RunAB();
    if (MINELOCATION = 4) or (MINELOCATION = 2) then
      if (RANDOMORE = 'Y') then
        RandomizeOre();
    if Inventory.IsFull() then
      Break();

    if Mainscreen.IsUpText('Mine') then
    begin
      Antiban.SmallRandomMouse;
      Continue;
    end;

    //Debug(TargetRock);
    if TargetRock.Hover(2) then
    begin
      Mouse.Click(MOUSE_LEFT);
      if (not Mainscreen.DidRedClick) then Continue;
      InvCount := Inventory.Count();
      if WaitUntil(Minimap.IsPlayerMoving(300), 125, 3500) then
        Minimap.WaitPlayerMoving(300);

      T:= GetTickCount + (60000 * 3);
      While SRL.PercentShift(MainScreen.GetPlayerBox, 500) >= PIXEL_SHIFT do
      begin
        if 'ore available' in Chat.GetMessage(CHAT_INPUT_LINE - 1, [CHAT_COLOR_BLACK]) then
          break;
        if Inventory.Count() > InvCount then
        begin
          WaitEx(1150, 75);
          break;
        end;

        Wait(Random(250,550));
        RunAB();

        if GetTickCount > T then
          Break();

      end;
    end;
  end;
  Writeln('Finished mining.');
end;

function FindLadder(UpText: String): Boolean;
var
  Ladder: TRSObjectFinder;
  LadderATPA: T2DPointArray;
  SearchBox: TBox;
  LadderWorld,LadderMM,CheckTile: TPoint;
  SearchRec: TRectangle;
  T: Uint64;
  i,c: Int32;
begin
  Result:= False;
  case UpText of //setup ladder paramters
  'Climb-down':
    begin
      LadderWorld:= [7470,3090];
      Ladder.ColorClusters += [CTS2(2446451, 9, 0.04, 2.38),CTS2(0, 1, 0.01, 0.01),7];
      Ladder.ClusterDistance:= 15;
      Ladder.Grow:= 10;
      CheckTile:= [6410,540];
    end;
  'Climb-up':
    begin
      LadderWorld:= [6410,540];
      Ladder.ColorClusters += [CTS2(3300471, 5, 0.04, 0.30),CTS2(600633, 7, 0.14, 4.69),7];
      Ladder.ClusterDistance:= 10;
      Ladder.Grow:= 10;
      CheckTile:= [7470,3090];
    end;
  end;
  Result:= Mainscreen.IsUpText(UpText); //if your mouse happens to be on the ladder then you're already done
  if not Result then
  begin
    T:= GetTickCount + (60000 * 5); //set 5 minute timer
    c:= 0;
    while (not(MainScreen.IsUpText(UpText))) and (GetTickCount < T) and (not RSW.AtTile(CheckTile,30)) do
    begin
      LadderMM:= RSW.WorldToMM(LadderWorld);
      SearchRec:= Minimap.PointToMsRect(LadderMM,5,5);
      SearchBox:= SearchRec.Bounds();
      LadderATPA:= Mainscreen.FindObject(Ladder, SearchBox);
      //Debug(LadderATPA);
      if LadderATPA <> [] then
      begin
        for i:= 0 to high(LadderATPA) do
        begin
          Mouse.Move(LadderATPA[i].Mean());
          Wait(150);
          if MainScreen.IsUpText(UpText) then
            Break();
        end;
      end;
      c:= c + 1;
      if c mod 3 = 0 then //if unable to locate ladder adjust camera angle
        Minimap.SetCompassAngle(Minimap.GetCompassAngle()+Random(-30,30));
      if c = 10 then
      begin
        c:= 0;
        Minimap.SetCompassAngle(0);
      end;
    end;
  end;
  Result:= MainScreen.IsUpText(UpText);
end;

function ClimbLadder(UpText: String): Boolean;
var
  CheckTile: TPoint;
  c: Int32;
begin
  Result:= False;
  if UpText = 'Climb-down' then //Setup ladded parameters
    CheckTile:= [6410,540];
  if UpText = 'Climb-up' then
    CheckTile:= [7470,3090];
  if not (RSW.AtTile(CheckTile, 30)) then
  begin
    if FindLadder(UpText) then
    begin
      Mouse.Click(MOUSE_LEFT);
      if MainScreen.DidRedClick() then
      begin
        Minimap.WaitFlag(0);
        Wait(1000);
        c:= 0;
        while not RSW.AtTile(CheckTile, 30) and (c < 7) do  //wait up to 7 seconds for the ladder climb to finish
        begin
          c:= c + 1;
          Wait(1000);
        end;
      end;
    end;
  end;
  Result:= RSW.AtTile(CheckTile,30);
end;

procedure WalktoMiningGuild();
var
  myPos: TPoint;
begin
  RunAB();
  if not RSW.AtTile(MGC,40) then
  begin
    if not Inventory.IsFull() then
    begin
      myPos:= RSW.GetMyPos();
      if myPos.Y > 1000 then
      begin
        while not RSW.AtTile(MGLD,30) do
        begin
          if RSW.AtTile(FBankTile,35) then
            RSW.WebWalk([7479,3092]);
          if not RSW.AtTile(MGLU,30) then
          begin
            RSW.WebWalk(MGLU);
            Minimap.WaitFlag(5);
          end;
          if RSW.AtTile(MGLU,30) then
            ClimbLadder('Climb-down');
        end;
        if RSW.AtTile(MGLD,30) then
          RSW.WalkBlind(MGC,5);
      end;
    end;
  end;
end;

procedure WalkMiningGuildToBank();
var
  myPos: TPoint;
  T: UInt64;
begin
  RunAB();
  if not RSW.AtTile(FBankTile, 30) then
  begin
    if Inventory.IsFull() then
    begin
      myPos:= RSW.GetMyPos();
      if (myPos.Y < 1000) then
      begin
        T:= GetTickCount + (60000 * 5);
        while (not RSW.AtTile(MGLU,30)) and (GetTickCount < T) do
        begin
          myPos:= RSW.GetMyPos();
          if myPos.Y < 1000 then
            RSW.WalkBlind(MGLD);
          if RSW.AtTile(MGLD, 30) then
            ClimbLadder('Climb-up');
        end;
      end;
      T:= GetTickCount + (60000 * 5);
      while (not RSW.AtTile(BankTile,30)) and (GetTickCount < T) do
      begin
        RSW.WebWalk(FBankTile);
        Minimap.Waitflag(Random(0,10));
      end;
      if not RSW.AtTile(FBankTile,30) then
        RSW.WalkBlind(FBankTile,5);
    end;
  end;
end;

procedure WalktoBank();
var
  T: UInt64;
begin
  RunAB();
  if Inventory.IsFull() then
  begin
    Writeln('Walking to bank');
    if MINELOCATION = 4 then
    begin
      WalkMiningGuildToBank();
      if not RSW.AtTile(BankTile,30) then
        EndScript('Unable to walk to bank');
    end;
    if (MINELOCATION = 1) or (MINELOCATION = 2) or (MINELOCATION = 3) then
    begin
      if not RSW.AtTile(BankTile,35) then
      begin
        RSW.WebWalk(BankTile, Random(5,8));
        Minimap.Waitflag(0);

        if not RSW.AtTile(BankTile,35) then
          if (RSW.GetMyPos().DistanceTo(BankTile)) < 250 then
          begin
            T:= GetTickCount + (60000 * 5);
            while (not RSW.AtTile(BankTile)) and (GetTickCount < T) do
              RSW.WalkBlind(BankTile, Random(5,8));
            if GetTickCount > T then
              EndScript('Unable to walk to bank');
          end;
      end;
    end;
  end;
end;

procedure WalktoMine();
var
  myPos: TPoint;
begin
  RunAB();
  if not Inventory.IsFull() then
  begin
    Writeln('Walking to mine');
    if MINELOCATION = 4 then
    begin
      WalkToMiningGuild();
      myPos:= RSW.GetMyPos();
      if myPos.Y > 1000 then
        EndScript('Unable to walk to mining guild');
    end;
    if (MINELOCATION = 1) or (MINELOCATION = 2) or (MINELOCATION = 3) then
    begin
      if not RSW.AtTile(MiningTile,50) then
        RSW.WebWalk(MiningTile);

      if not RSW.AtTile(MiningTile,35) then
        RSW.WalkBlind(MiningTile,random(5,8));
      if not RSW.AtTile(MiningTile,35) then
        EndScript('Unable to walk to mine');
    end;
  end;
end;

Procedure CountOresExperience();
begin
  IronOre       += Inventory.CountItem('Iron ore');
  TinOre        += Inventory.CountItem('Tin ore');
  CopperOre     += Inventory.CountItem('Copper ore');
  CoalOre       += Inventory.CountItem('Coal');
  MithrilOre    += Inventory.CountItem('Mithril ore');
  AdamantiteOre += Inventory.CountItem('Adamantite ore');
  ClayOre       += Inventory.CountItem('Clay');
  SapphireCount += Inventory.CountItem('Uncut sapphire');
  RubyCount     += Inventory.CountItem('Uncut ruby');
  DiamondCount  += Inventory.CountItem('Uncut diamond');
  EmeraldCount  += Inventory.CountItem('Uncut emerald');
  GemCount      := (SapphireCount + RubyCount + DiamondCount + EmeraldCount);
  Mined         := (IronOre + TinOre + CopperOre + CoalOre + MithrilOre + AdamantiteOre + ClayOre);
  OreExp        := (IronOre * 35) + (TinOre * 17.5) + (CopperOre * 17.5) + (MithrilOre * 80) + (AdamantiteOre * 95) + (CoalOre * 50) + (ClayOre * 5);
end;

function OpenDepositBox(): Boolean;
var
  T: UInt64;
begin
  T:= GetTickCount() + (60000 * 5)
  while (not DepositBox.IsOpen()) and (GetTickCount < T) do
  begin
    if PSDepositBox.Hover(2) then
    begin
      Debug(PSDepositBox);
      Mouse.Click(MOUSE_LEFT);
      if MainScreen.DidRedClick() then
        if WaitUntil(Minimap.IsPlayerMoving(300), 125, 3500) then
          Minimap.WaitPlayerMoving(300);
    end;
  end;
  Result:= DepositBox.IsOpen();
  if GetTickCount > T then
    EndScript('Terminating script: Could not open deposit box for over 5 minutes');
end;

function OpenBank(): boolean;
begin
  if MINELOCATION = 3 then
    Result:= OpenDepositBox()
  else
    Result:= Bank.WalkOpen()
end;

Procedure DoBanking();
var
  i: Int32;
  T: UInt64;
begin
  MainScreen.setHighestPitch;
  if (Inventory.IsFull) and (RSW.AtTile(BankTile,30)) then
  begin
    Trips:= Trips + 1;
    CountOresExperience();
    T:= GetTickCount + (60000 * 5);
    Writeln('Opening bank');
    while (Inventory.IsFull()) and (GetTickCount < T) do
    begin
      if OpenBank() then
      begin
        if Bank.IsOpen() then
        begin
          for i:= 0 to High(BDepositItems) do
            if Bank.IsOpen() then
              Bank.DepositItem([BDepositItems[i],BANK_DEPOSIT_ALL], True);
        end;
        if DepositBox.IsOpen() then
        begin
          for i:= 0 to High(BDepositItems) do
            if DepositBox.IsOpen() then
              DepositBox.DepositItem([BDepositItems[i],BANK_DEPOSIT_ALL], False);
        end;
        Wait(500);
      end else
        Writeln('Unable to open bank');
      if Bank.IsOpen() then
        Bank.Close();
      if DepositBox.IsOpen() then
        DepositBox.Close();
    end;
    if (GetTickCount > T) and (Inventory.Count() > 2) then
      EndSCript('Timed out while banking');
  end;
  Bank.Close();
end;

// by Rasta Magician, veteran SRL-er
function ProgReport(
                           ResultType:int32; ScriptName, ScriptAuthor, ScriptVersion: String;
                           VarNames: TStringArray;
                           VarValues: TVariantArray
                          ): Variant;
var
  TSA        : TStringArray;
  s,s2       : String;
  s3         : String := '=';
  s4         : String := ' ';
  i, i2, L   : Int32;
begin
  if (ResultType = 2) then
    Result := '';

  if length(VarNames) <> Length(VarValues) then
  begin
    Writeln('VarNames and VarValues must be the same length');
    exit;
  end;
  SetLength(TSA, 3 + Length(VarNames) + 4);
  s2 := 'by '+ScriptAuthor;

  TSA[0] := s3;
  TSA[1] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[2] := s2;
  TSA[3] := s3;

  i2 := 3 + Length(VarNames);

  for i:= 4 to i2 do
    L := Max(L, Length(VarNames[i-4]));

  for i:= 4 to i2 do
  begin
    s := VarValues[i-4];
    TSA[i] := Padr((VarNames[i-4]).Capitalize, L)+' : '+ s.Capitalize;
  end;

  TSA[i2+1] := s3;
  TSA[i2+2] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[i2+3] := s3;

  i2 := 0;
  for i:= 0 to High(TSA) do
    i2 := Max(i2, Length(TSA[i]));

  TSA[0]           := s3.Replicate(i2);
  TSA[3]           := s3.Replicate(i2);
  TSA[High(TSA)-2] := s3.Replicate(i2);
  TSA[High(TSA)]   := s3.Replicate(i2);

  TSA[2] := s4.Replicate(round((i2 - Length(TSA[2]))/2)) + TSA[2]; //centering by ScriptAuthor
  TSA[High(TSA)-1] := s4.Replicate(round((i2 - Length(TSA[High(TSA)-1]))/2)) + TSA[High(TSA)-1];

  for i:= 0 to High(TSA) do
    if (TSA[i][1] = s3) then
      case ResultType of
        0 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        1 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        2 : Result := Result + '[='+Padr(TSA[i], i2)+'=]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end
    else
      case ResultType of
        0 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        1 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        2 : Result := Result + '[ '+Padr(TSA[i], i2)+' ]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end;

  if not ResultType = 2 then Result := true;
end;

Procedure Reporting();
var
  SArr: TStringArray;
  VArr: TVariantArray;
begin
  ClearDebug();

  SArr := ['Mining at','Runtime','Trips','Ores','XP','Gems'];
  VArr := [MineLoc,
           SRL.TimeRunning(Time_Formal),ToStr(Trips),
           ToStr(Round(Mined,2),'(', NumberPerHour(Mined),' / hr)'),
           ToStr(Round(OreEXP,2),'(', NumberPerHour(OreEXP),' / hr)'),
           ToStr(Round(GemCount,2),'(', NumberPerHour(GemCount),' / hr)')];

  if TinOre > 0 then
  begin
    SArr += 'Tin ore';
    VArr += ToStr(TinOre);
  end;
  if CopperOre > 0 then
  begin
    SArr += 'Copper ore';
    VArr += ToStr(CopperOre);
  end;
  if IronOre > 0 then
  begin
    SArr += 'Iron ore';
    VArr += ToStr(IronOre);
  end;
  if CoalOre > 0 then
  begin
    SArr += 'Coal';
    VArr += ToStr(CoalOre);
  end;
  if MithrilOre > 0 then
  begin
    SArr += 'Mithril ore';
    VArr += ToStr(MithrilOre);
  end;
  if AdamantiteOre > 0 then
  begin
    SArr += 'Adamantite ore';
    VArr += ToStr(AdamantiteOre);
  end;
  if SapphireCount > 0 then
  begin
    SArr += 'Sapphires';
    VArr += ToStr(SapphireCount);
  end;
  if EmeraldCount > 0 then
  begin
    SArr += 'Emeralds';
    VArr += ToStr(EmeraldCount);
  end;
  if RubyCount > 0 then
  begin
    SArr += 'Rubies';
    VArr += ToStr(RubyCount);
  end;
  if DiamondCount > 0 then
  begin
    SArr += 'Diamonds';
    VArr += ToStr(DiamondCount);
  end;

  ProgReport(1, 'OSRS Miner and Banker','Renax', VERSION, SArr, VArr);

  if GetTimeRunning > ShutdownTime then
  begin
    Logout.ClickLogout();
    Writeln('The miner has been running for over ',IntToStr(MaxTime),' mins. Shutting down.');
    TerminateScript('Exceeded maximum runtime.');
  end;
end;

procedure RunMiner();
begin
  while GetTimeRunning < ShutDownTime do
  begin
    if not RSClient.IsLoggedIn() then
      Login.LoginPlayer();
    DoBanking();
    Reporting();
    WalktoMine();
    DoMining();
    WalktoBank();
  end;

  Logout.ClickLogout();
  Writeln('The miner has been running for over ',IntToStr(MaxTime),' mins. Shutting down.');
  EndScript('Exceeded maximum runtime.');
end;

begin
  SetupMiner();
  RunMiner();
end.
