{$DEFINE SCRIPT_ID := '23095905-1050-4f6c-81ae-a3382712ab53'}
{$DEFINE SCRIPT_REVISION := '9'}
program StudentsVolcanicAsh;
{$DEFINE SRL_USE_REMOTEINPUT}
{$I SRL-T/OSR.simba}
{$I WaspLib/osr.simba}

begin
Login.PlayerIndex := 0;
end;

Type
  EState = (LOGIN_PLAYER, OPEN_CHAT, CHANGE_CHAT_FILTER, DO_ANTIBAN, MINE_ASH, DROP_EXTRAS, HOP, END_SCRIPT);

const
  WORLDLIST: TIntegerArray = [304..307,309..315,321..323,327,331..334,336..338,341,342,350,352,354..358,374,377,378,386..390,421,422,444..446,463..466,477..481,493..496,512..516];
  volcanicBox: TBox := [9366, 1069, 9731, 1368];

type
    TScript = record
    ATPA                : array of TPointArray;
    State               : EState;
    Version,
    What                : String;
    ItemCount,
    ItemStart,
    ABTimeMod,
    CollectLimit,
    MineLoopCount,
    WaitTimer           : Int32;
    StartTile           : TPoint;
    AshPile1,
    AshPile2,
    AshPile3,
    AshPile4            : TRSObject;
    TakeBreaks,
    TakeSleeps,
    worldIsCrashed      : Boolean;
    RSW                 : TRSWalker;
    ShutdownTime        : Int64;
    playerNearbyCountdown,
    MiningCountdown     : TCountdown;
  end;

Var
  Bot : TScript;
  GUI: TScriptForm;

procedure TScript.WriteMsg(Message: String);
begin
  WriteLn('[Bot]: '+Message);
end;

procedure TScriptForm.StartScript(Sender: TObject); override;
var
  S: TObject;
  MaxRun, Collectlimit: Int32;
  e_Run,e_BA,e_BF,e_SA,e_SF, c_lim: TEdit;
  cb_Breaks,cb_Sleeps: TCheckBox;

begin
  inherited;

  Self.Form.Close();
  Bot.WriteMsg('Starting script');

  c_Lim  := Self.Form.GetChild('box_cl_edit');
  CollectLimit := StrToInt(C_lim.getText);
  Bot.Collectlimit := (CollectLimit);

{ Time settings }
  e_Run            := Self.Form.GetChild('box_run_edit');
  MaxRun           := StrToInt(e_Run.getText);
  Bot.ShutdownTime := (MaxRun * 60000) + Random(- (MaxRun * 6000), (MaxRun * 6000));

  cb_Breaks        := Self.Form.GetChild('cb_breaks_checkbox');
  Bot.TakeBreaks   := cb_Breaks.IsChecked;
  If Bot.TakeBreaks then
  begin
    e_BA           := Self.Form.GetChild('box_ba_edit');
    e_BF           := Self.Form.GetChild('box_bf_edit');
    Antiban.AddBreak(ONE_MINUTE*StrToInt(e_BA.getText),ONE_MINUTE*StrToInt(e_BF.getText), 0.15, 1.0);
  end;

  cb_Sleeps        := Self.Form.GetChild('cb_sleeps_checkbox');
  Bot.TakeSleeps   := cb_Sleeps.IsChecked;
  If Bot.TakeSleeps then
  begin
    e_SA           := Self.Form.GetChild('box_sa_edit');
    e_SF           := Self.Form.GetChild('box_sf_edit');
    Antiban.AddSleep(e_SA.getText, StrToInt(e_SF.getText) * ONE_HOUR, 0.1, 1.0);
  end;

{ Script settings }
  S := Sender;
end;

function TScriptForm.CreateSettingsTab(): TTabSheet;
  type TScriptForm = TScriptForm;
  procedure TScriptForm.UpdateSList(Sender: TObject);
  var
    S: TComboBox;
  begin
    S := Sender;
  end;

var
  lb_Time,lb_Script: TLabel;
  cb_Breaks,cb_Sleeps: TLabeledCheckBox;
  box_Run,box_BA,box_BF,
  box_SA,box_SF, box_CL: TLabeledEdit;
begin
  Result.Init(nil);
  Result.SetCaption('Script settings');
  Result.SetName('Settings_Tab');

{ Setup time settings }
  with lb_Time do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(125));
    SetTop(TControl.AdjustToDPI(10));
    SetFontColor($000000);
    GetFont().SetSize(15);
    SetCaption('Time Settings');
  end;

  with box_Run do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(562));
    SetTop(TControl.AdjustToDPI(310));
    SetName('box_Run');
    SetCaption('Run for');
    SetToolTip('Time in minutes');
    SetText('300');
    SetFontColor($000000);
  end;

  with cb_Breaks do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(55));
    SetName('cb_breaks');
    SetCaption('Take breaks');
    SetFontColor($000000);
  end;

  with box_BA do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(75));
    SetName('box_ba');
    SetCaption('Break after');
    SetToolTip('Time in minutes');
    SetText('60');
    SetFontColor($000000);
  end;

  with box_BF do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(5));
    SetTop(TControl.AdjustToDPI(125));
    SetName('box_bf');
    SetCaption('Break for');
    SetToolTip('Time in minutes');
    SetText('15');
    SetFontColor($000000);
  end;

  with box_CL do
   begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(562));
    SetTop(TControl.AdjustToDPI(270));
    SetName('box_cl');
    SetCaption('Collect count');
    SetToolTip('How many to collect');
    SetText('2000');
    SetFontColor($000000);
    end;


  with cb_Sleeps do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(200));
    SetTop(TControl.AdjustToDPI(55));
    SetName('cb_sleeps');
    SetCaption('Take sleeps');
    SetFontColor($000000);
  end;

  with box_SA do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(200));
    SetTop(TControl.AdjustToDPI(75));
    SetName('box_sa');
    SetCaption('Sleep at');
    SetToolTip('Time in 24Hr format');
    SetText('11:00:00');
    SetFontColor($000000);
  end;

  with box_SF do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(200));
    SetTop(TControl.AdjustToDPI(125));
    SetName('box_sf');
    SetCaption('Sleep for');
    SetToolTip('Time in hours');
    SetText('2');
    SetFontColor($800080);
  end;

{ Setup general settings }
  with lb_Script do
  begin
    Create(Result);
    SetLeft(TControl.AdjustToDPI(562));
    SetTop(TControl.AdjustToDPI(10));
    SetFontColor($000000);
    GetFont().SetSize(15);
    SetCaption('General settings');
  end;
end;

procedure TScriptForm.Setup(caption: String = 'Script Form'; size: TPoint = [750, 500]; allowResize: Boolean = False); override;
var
  Img: TPicture;
  BGImg: TImage;
  SButton: TButton;
begin
  inherited;

  Img.init();
  Img.LoadFromFile('Resources\SVAMGUI.png');
  with BGImg do
  begin
    Init(Self.PageControl);
    SetParent(Self.PageControl);
    SetBounds(0,0,Self.Form.getWidth,Self.Form.getHeight);
    SetPicture(Img);
  end;

  Self.Start.setVisible(False);
  with SButton do
  begin
    Create(Self.Form);
    SetBounds(Self.Form.GetRight-190, Self.Form.GetBottom-70, 180, 60);
    GetFont.SetName('Bahnschrift');
    GetFont.SetSize(15);
    SetCaption('Run');
    SetOnClick(@Self.StartScript);
  end;

  Self.AddTab(CreateSettingsTab());
  Self.CreateAPISettings();
  Self.CreateAccountManager();
end;


// by Rasta Magician, veteran SRL-er
function ProgReport(
                           ResultType:int32; ScriptName, ScriptAuthor, ScriptVersion: String;
                           VarNames: TStringArray;
                           VarValues: TVariantArray
                          ): Variant;
var
  TSA        : TStringArray;
  s,s2       : String;
  s3         : String := '=';
  s4         : String := ' ';
  i, i2, L   : Int32;
begin
  If (ResultType = 2) then
    Result := '';

  If length(VarNames) <> Length(VarValues) then
  begin
    Writeln('VarNames and VarValues must be the same length');
    exit;
  end;
  SetLength(TSA, 3 + Length(VarNames) + 4);
  s2 := 'by '+ScriptAuthor;

  TSA[0] := s3;
  TSA[1] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[2] := s2;
  TSA[3] := s3;

  i2 := 3 + Length(VarNames);

  for i:= 4 to i2 do
    L := Max(L, Length(VarNames[i-4]));

  for i:= 4 to i2 do
  begin
    s := VarValues[i-4];
    TSA[i] := Padr((VarNames[i-4]).Capitalize, L)+' : '+ s.Capitalize;
  end;

  TSA[i2+1] := s3;
  TSA[i2+2] := ScriptName.Capitalize+' '+ScriptVersion;
  TSA[i2+3] := s3;

  i2 := 0;
  for i:= 0 to High(TSA) do
    i2 := Max(i2, Length(TSA[i]));

  TSA[0]           := s3.Replicate(i2);
  TSA[3]           := s3.Replicate(i2);
  TSA[High(TSA)-2] := s3.Replicate(i2);
  TSA[High(TSA)]   := s3.Replicate(i2);

  TSA[2] := s4.Replicate(round((i2 - Length(TSA[2]))/2)) + TSA[2]; //centering by ScriptAuthor
  TSA[High(TSA)-1] := s4.Replicate(round((i2 - Length(TSA[High(TSA)-1]))/2)) + TSA[High(TSA)-1];

  for i:= 0 to High(TSA) do
    If (TSA[i][1] = s3) then
      case ResultType of
        0 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        1 : writeln     ('[='+Padr(TSA[i], i2)+'=]');
        2 : Result := Result + '[='+Padr(TSA[i], i2)+'=]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end
    else
      case ResultType of
        0 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        1 : writeln     ('[ '+Padr(TSA[i], i2)+' ]');
        2 : Result := Result + '[ '+Padr(TSA[i], i2)+' ]' + chr(13);
        else begin Writeln('Invalid Result Type'); exit; end;
      end;

  If not ResultType = 2 then Result := true;
end;

// Undo the bogged down version in WaspLib
function TRSChooseOption.Select(Text: TStringArray; MouseAction: Int32 = MOUSE_LEFT; CaseSensitive: Boolean = True; CloseIfNotFound: Boolean = True): Boolean; override;
var
  Choices: TRSChooseOption_OptionArray;
  I, J: Int32;
begin
  If Self.Open() then
  begin
    Wait(0, 750, wdLeft);

    Choices := GetOptions();

    for I := 0 to High(Choices) do
      for J := 0 to High(Text) do
        If (CaseSensitive and (Text[J] in Choices[I].Text)) or ((not CaseSensitive) and (Lowercase(Text[J]) in Lowercase(Choices[I].Text))) then
        begin
          Self.Select(Choices[I], MouseAction);
          Exit(True);
        end;

    If CloseIfNotFound then
    begin
      WaitEx(400, 150);

      Self.Close();
    end;
  end;
end;

{ Import SRL-F snippets }
procedure TScript.DoLoseFocus();
Var T: Int32;
begin
  T := SRL.NormalRange(1700,8000);
  Antiban.DebugLn('Losing focus for '+SRL.MsToTime(T, Time_Short));
  Antiban.LoseFocus(T);
end;

procedure TScript.SetupAntiban();
begin
  Antiban.AddTask((ONE_MINUTE*1)*Self.ABTimeMod,  @Mouse.RandomMovement);
  Antiban.AddTask((ONE_MINUTE*4)*Self.ABTimeMod,  @Self.DoLoseFocus);
end;

procedure TScript.DoAntiban();
begin
  if GetTimeRunning() > Self.ShutdownTime then
  begin
    Logout.ClickLogout();
    TerminateScript('Time to shutdown');
  end;

  Self.MineLoopCount := 0;

  Antiban.DoAntiban();
end;

function TScript.worldIsFree(): Boolean;
var
  playerPoints: TPointArray := Minimap.GetDots(ERSMiniMapDot.PLAYER);
begin
  FilterPointsDist(playerPoints, 0, 75, Minimap.Center.X, Minimap.Center.Y);
  Result := Length(playerPoints) = 0;
end;

function TScript.playerCrashDetected(): Boolean;
var
  MyPos: TPoint;
begin
  MyPos := Self.RSW.GetMyPos();
  if not self.worldIsFree() then
    playerNearbyCountdown.Resume()
  else
  begin
    if not playerNearbyCountdown.IsFinished() and not playerNearbyCountdown.IsPaused() then
      WriteLn 'Player left before we were crashed';
    playerNearbyCountdown.Init(15000);
    playerNearbyCountdown.Pause();
    Exit(False);
  end;

  WriteLn 'Player nearby. Will hop in ' + ToString(playerNearbyCountdown.TimeRemaining()) + 'ms if they remain';
  if playerNearbyCountdown.IsFinished then
    Exit(True);
end;

procedure TScript.WalkToStart();
begin
  if not Self.RSW.AtTile(Self.StartTile, 12) then
    Self.RSW.WalkBlind(Self.StartTile);
end;

function TScript.mineashObj(AshObj: TRSObject): Boolean;
var
  attempts :int32;
begin
  Inventory.Open();

  for attempts := 0 to 4 do
  begin
    AshObj.Hover(2, false);

    if MainScreen.IsUpText('Chop ') then
    begin
      Mouse.Click(MOUSE_RIGHT);
      if ChooseOption.HasOption('Mine ash') then
        Chooseoption.Select('Mine ash');
    end;

    if not MainScreen.IsUpText('Mine A') then
      Break;

    if MainScreen.IsUpText('Mine A') then
      Mouse.Click(MOUSE_LEFT);

    Wait(225,352);
    Minimap.WaitMoving();

    MiningCountDown.Init(WaitTimer);

    repeat
      if XPBar.EarnedXP then
        MiningCountDown.Restart();
    until MiningCountDown.IsFinished();

    Result := MiningCountDown.IsFinished()

    if Result then
      Break;
  end;
end;

procedure TScript.Dropitems();
begin
  Inventory.ShiftDrop(['Soda ash', 'Uncut sapphire', 'Uncut emerald', 'Uncut ruby', 'Uncut diamond'], DROP_PATTERN_REGULAR);
end;

procedure TScript.MineAsh();
begin
  Self.mineashObj(AshPile1);
  Self.mineashObj(AshPile2);
  Self.mineashObj(AshPile3);
  Self.mineashObj(AshPile4);
  Self.WalkToStart();
  Inc(MineLoopCount, 1);
  Self.Report();
end;

procedure TScript.Report();
begin
  APIClient.UpdatePayload(0, 0, 0);

  if APIClient.Timer.IsFinished() then
    APIClient.SubmitStats(APIClient.GetUUID());

  ItemCount := (Inventory.CountItemStack('Volcanic ash') - Self.ItemStart);

  WriteLn('||===============================||');
  WriteLn('||--- ~ StudentsVolcanicAsh ~ ---||');
  WriteLn('||===============================||');
  WriteLn(padR('|| Runtime: ' + SRL.MsToTime(GetTimeRunning, Time_Short), 33, ' ') + '||');
  WriteLn(padR('|| Items Collected: ' + IntToStr(ItemCount), 33, ' ') + '||');
  WriteLn(padR('|| Items/Hr: ' + IntToStr(Round((ItemCount) / (GetTimeRunning() / 3600000))), 33, ' ') + '||');
  WriteLn('||===============================||');
  WriteLn('||=-=-= ~ StudentsScripts ~ -=-=-||');
  WriteLn('||===============================||');
end;

procedure TScript.EndScript();
begin
  Logout.ClickLogout();
  TerminateScript('Time to shutdown');
end;

Procedure TScript.Init();
var
  z: Int32;
begin
  if (not RSClient.IsLoggedIn) then
    Login.LoginPlayer();

  Self.Version            := 'Rev '+{$MACRO SCRIPT_REVISION};
  Mouse.Speed             := SRL.NormalRange(18, 21);
  Mouse.MissChance        := 3;
  Mouse.Distribution      := MOUSE_DISTRIBUTION_GAUSS;
  ItemFinder.Similarity   := 0.99999;
  ItemStart               := Inventory.CountItemStack('Volcanic ash');
  Self.StartTile          := [9526,1200];
  Self.SetupAntiban();

  Stats.Setup();
  Stats.GetLevel(ERSSkill.MINING);

  if (Stats.GetLevel(ERSSkill.MINING) <= 50) then
    WaitTimer := 8000
  else
    WaitTimer := 2500;

  z := Options.GetZoomLevel();

  if (not InRange(z, 0, 5)) then
    Options.SetZoomLevel(SRL.TruncatedGauss(0,5))
  else
    MM2MS.ZoomLevel := z;

  Self.RSW.SetupRegion(volcanicBox);

  AshPile1.Setup(4, [[9522,1200]]);
  AshPile1.SetupUpText(['Mine A']);
  AshPile1.Finder.Colors += CTS2(10132387, 15, 0.13, 0.16);

  AshPile2.Setup(4, [[9554,1220]]);
  AshPile2.SetupUpText(['Mine A']);
  AshPile2.Finder.Colors += CTS2(10132387, 15, 0.13, 0.16);

  AshPile3.Setup(4, [[9574,1204]]);
  AshPile3.SetupUpText(['Mine A']);
  AshPile3.Finder.Colors += CTS2(10132387, 15, 0.13, 0.16);

  AshPile4.Setup(4, [[9598,1228]]);
  AshPile4.SetupUpText(['Mine A']);
  AshPile4.Finder.Colors += CTS2(10132387, 15, 0.13, 0.16);

  RSW.EnableRunAtEnergy      := 35;
  RSW.ScreenWalk             := True;
end;

procedure TScript.Run();
begin
  repeat
    Self.State := Self.GetState();
    case Self.State of
      EState.LOGIN_PLAYER: if not Login.LoginPlayer() then Break;
      EState.OPEN_CHAT: ChatButtons.Open(ERSChatButton.GAME_CHAT);
      EState.CHANGE_CHAT_FILTER: ChatButtons.ChangeState(ERSChatButton.GAME_CHAT, ERSChatButtonState.ENABLED);
      EState.DROP_EXTRAS: Self.DropItems;
      EState.DO_ANTIBAN: Self.DoAntiban();
      EState.HOP: WorldHopper.Hop(WorldList);
      EState.MINE_ASH: begin Self.WalkToStart(); Self.MineAsh(); end;
      EState.END_SCRIPT: Self.EndScript();
    end;
  until ItemCount > Self.Collectlimit;
end;

function TScript.GetState(): EState;
begin
  if not RSClient.IsLoggedIn() then
    Exit(EState.LOGIN_PLAYER);

  if Self.MineLoopCount > 5 then
    Exit(EState.DO_ANTIBAN);

  if (GetTimeRunning() > Self.ShutdownTime) then
    Exit(EState.END_SCRIPT);

  if InRange(Chat.GetScrollPosition, 1, 99) then
    Chat.SetScrollPosition(100);

  if ChatButtons.GetState(ERSChatButton.GAME_CHAT) <> ERSChatButtonState.ENABLED then
    Exit(EState.CHANGE_CHAT_FILTER);

  if not ChatButtons.IsActive(ERSChatButton.GAME_CHAT) then
    Exit(EState.OPEN_CHAT);

  if Self.ItemCount >= Self.CollectLimit then
  begin
    Logout.ClickLogout();
    TerminateScript('Collected enough!')
  end;

  if Self.playerCrashDetected() and RSClient.IsLoggedIn then
    Exit(EState.HOP);

  if (Inventory.CountEmptySlots < 5) then
    Exit(EState.DROP_EXTRAS);

  Exit(Estate.MINE_ASH);
end;

begin
  If (not DirectoryExists(AppPath+'\Resources\')) then
    CreateDirectory(AppPath+'\Resources');

  If (not FileExists(AppPath+'\Resources\SVAMGUI.png')) then
    DownloadToFile('https://i.imgur.com/ESbdz0L.png', AppPath+'\Resources\SVAMGUI.png');

  GUI.Setup('StudentsVolcanicAsh', [750,466]);
  GUI.PageControl.SetAllChildsFontColor($000000);
  GUI.Run;

  Bot.Init();
  Bot.Run();
end.

