(*
# SilverScreen
Methods to interact with the silver screen on a furnace.
*)

{$DEFINE AERO_SILVERSCREEN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSSilverScreenButton = (QUANT_1, QUANT_5, QUANT_10, QUANT_CUSTOM, QUANT_ALL);

  TRSSilverScreen = record(TRSTitledInterface)
    Items: TRSItemInterface;
    SlotBoxes: TBoxArray;
  end;


function TRSSilverScreen.GetItemBoxes(): TBoxArray;
begin
  Result := Self.SlotBoxes;
end;

procedure TRSSilverScreen.Setup(); override;
begin
  inherited;

  Self.Name := 'SilverScreen';
  Self.Items.Name := Self.Name + '.Items';
  Self.Items.SlotBoxesFunction := @Self.GetItemBoxes;
end;

procedure TRSSilverScreen.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
var
  jewellery: TBoxArray;
begin
  alignment.Left := InterfaceArea.Bounds.X1;
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Top := InterfaceArea.Bounds.Y1;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 505;
  alignment.MaxHeight := 323;

  Self.SetupAlignment(alignment);

  jewellery := Grid(3, 4, 79, 55, [5, 1], [Self.Bounds.X1 + 10, Self.Bounds.Y1 + 40]);
  Self.SlotBoxes := jewellery.Combine(Grid(2, 4, 109, 55, [5, 1], [Self.Bounds.X2 - 233, Self.Bounds.Y1 + 40]));
end;

function TRSSilverScreen.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[37,37]]);
end;

function TRSSilverScreen.GetButton(Button: ERSSilverScreenButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons();
begin
  if (Length(Buttons) = Length(ERSSilverScreenButton)) then
    Result := Buttons[Button];
end;

(*
## SilverScreen.IsOpen
```pascal
function TRSSilverScreen.IsOpen(): Boolean;
function TRSSilverScreen.IsOpen(waitTime: Int32): Boolean;
```
Returns true if the silver crafting screen is visible. You can optionally specify a `waitTime`.

Example:
```pascal
if SilverScreen.IsOpen() then
  SilverScreen.ClickItem('Unstrung symbol', -1);
```
*)
function TRSSilverScreen.IsOpen(): Boolean; overload;
begin
  try
    Result := Self.GetButtons[0].Visible();
  except
  end;
end;

function TRSSilverScreen.IsOpen(waitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), waitTime);
end;

(*
## SilverScreen.Close
```pascal
function TRSSilverScreen.Close(PressEscape: Boolean = False): Boolean;
```

Closes the silver crafting screen.  Depending on `PressEscape` the function will
either click the button or press backspace.

Example:
```pascal
if SilverScreen.Close() then
  Writeln('Closed the silver crafting screen');
```
*)
function TRSSilverScreen.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

(*
## SilverScreen.SetQuantity
```pascal
function TRSSilverScreen.SetQuantity(Amount: Int32): Boolean;
```

Sets the interface quantity to the set amount.  Acceptable parameters
include 1,5,10,X (custom amount) and -1 for 'All'.

Example:
```pascal
SilverScreen.SetQuantity(-1);
```
*)
function TRSSilverScreen.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = 2070783;
var
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  if Amount = -1 then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);
    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;

(*
## SilverScreen.CanCraftItem
```pascal
function TRSSilverScreen.CanCraftItem(Item: TRSItem; out ItemBox: TBox): Boolean;
```

Returns if the given TRSItem can be crafted.  If so then a TBox of the disired item
is returned.

Example:
```pascal
if SilverScreen.CanCraftItem('Topaz bracelet', ItmBox) then
  Mouse.Move(ItmBox);
```
*)
function TRSSilverScreen.CanCraftItem(item: TRSItem; out box: TBox): Boolean;
const
  ORANGE_COLOR = 2070783;
  SELECTED_COLOR = $FFFFFF;
var
  tpa: TPointArray;
begin
  if not Self.IsOpen() then Exit;

  if not Self.Items.Find([item], box) then
    Exit;

  Result := (SRL.FindColors(tpa, ORANGE_COLOR, box) > 0) or
            (SRL.FindColors(tpa, SELECTED_COLOR, box) > 0);
end;

(*
## SilverScreen.IsItemHighlighted
```pascal
function TRSSilverScreen.IsItemHighlighted(Item: TRSItem): Boolean;
```

Returns if the given TRSItem is highlighted on the silver crafting interface.

Example:
```pascal
if SilverScreen.IsItemHighlighted('Unstrun symbol') then
  Keyboard.PressKey(VK_SPACE);
```
*)
function TRSSilverScreen.IsItemHighlighted(Item: TRSItem): Boolean;
var
  HighlightCol: TCTS1Color := CTS1(4807018, 2);
  Box: TBox;
  TPA: TPointArray;
begin
  if not Self.IsOpen() then Exit;
  if not Self.CanCraftItem(Item, Box) then Exit;
  Result := SRL.FindColors(TPA, HighlightCol, Box) > 0;
end;

(*
## SilverScreen.CraftItem
```pascal
function TRSSilverScreen.CraftItem(Item: TRSItem; Quantity: Int32; UseSpaceBar: Boolean=False): Boolean;
```

Sets the desired quantity then crafts on the given TRSItem on the silver screen interface.
If the item is highlighted (previously crafted) and UseSpaceBar is set to true, then the spacebar is used,
if not then the interface item is clicked.  Returns false if 'Item' is not found on the interface.

Example:
```pascal
if SilverScreen.CraftItem('Jade amulet (u)', 10) then
  Writeln('Beginning crafting...');
```
*)
function TRSSilverScreen.CraftItem(Item: TRSItem; Quantity: Int32; UseSpaceBar: Boolean=False): Boolean;
var
  Box: TBox;
begin
  if not Self.CanCraftItem(Item, Box) then Exit;

  Result := Self.SetQuantity(Quantity);
  if Result then
  begin
    if (not UseSpaceBar) then
      Mouse.Click(Box, MOUSE_LEFT)
    else
      if Self.IsItemHighlighted(Item) then
        Keyboard.PressKey(VK_SPACE)
      else
        Mouse.Click(Box, MOUSE_LEFT);
  end;
end;

procedure TRSSilverScreen.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(Self.GetItemBoxes(), $00FFFF);
end;

(*
## var SilverScreen
  Global SilverScreen variable.
*)
var
  SilverScreen: TRSSilverScreen;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  SilverScreen.SetupAlignment();
end;

procedure TSRL.Setup; override;
begin
  inherited;

  SilverScreen.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  SilverScreen.Draw(Bitmap);
end;
