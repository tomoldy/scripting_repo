(*
# DriftNet
DriftNet interface by Reldnahc.
*)
{$DEFINE RELD_DRIFTNET_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSDriftNetButton = (DISCARD_ALL, BANK_ALL, TAKE_ALL, OVERLAY_CONFIRM, OVERLAY_CANCEL);

  TRSDriftNet = record(TRSTitledInterface)
    Items: TRSItemInterface;
  end;


(*
## TRSDriftNet.BankOverlayOpen
```pascal
function TRSDriftNet.BankOverlayOpen(): Boolean;
```

Returns True if the bank loot overlay is activated

Example:
```pascal
if DriftNet.BankOverlayOpen() then
  Driftnet.GetButton(ERSDriftNetButton.OVERLAY_CONFIRM).Click();
```
*)
function TRSDriftNet.BankOverlayOpen(): Boolean;
begin
  Result := SRL.CountColor(CTS2(16777215, 1, 0.01, 0.01), Self.Bounds) = 66;
end;

(*
## TRSDriftNet.DestroyOverlayOpen
```pascal
function TRSDriftNet.DestroyOverlayOpen(): Boolean;
```

Returns True if the destroy loot overlay is activated

Example:
```pascal
if DriftNet.DestroyOverlayOpen() then
  Driftnet.GetButton(ERSDriftNetButton.OVERLAY_CANCEL).Click();
```
*)
function TRSDriftNet.DestroyOverlayOpen(): Boolean;
begin
  Result := SRL.CountColor(CTS2(255, 1, 0.01, 0.01), Self.Bounds) = 102;
end;

(*
## TRSDriftNet.HasOverlay
```pascal
function TRSDriftNet.HasOverlay(): Boolean;
```

Returns True if either overlay is activated

Example:
```pascal
if DriftNet.HasOverlay() then
  Driftnet.GetButton(ERSDriftNetButton.OVERLAY_CONFIRM).Click();
```
*)
function TRSDriftNet.HasOverlay(): Boolean;
begin
  Result := Self.BankOverlayOpen() or Self.DestroyOverlayOpen();
end;

(*
## TRSDriftNet.GetSlotBoxes
```pascal
function TRSDriftNet.GetSlotBoxes(): TBoxArray;
```

Returns a TBoxArray containing each item slot
*)
function TRSDriftNet.GetSlotBoxes(): TBoxArray;
begin
  if Self.HasOverlay() then
    Exit;

  Result := Grid(5, 2, 32, 32, [48, 5], [Self.Bounds.X1 + 27, Self.Bounds.Y1 + 55]);
end;

procedure TRSDriftNet.Setup(); override;
begin
  inherited;
  Self.Name := 'Drift Net';
  Self.ButtonColors := [CTS1(2370349, 0), CTS1(1052431, 26)];
  Self.Items.SlotBoxesFunction := @Self.GetSlotBoxes;
end;

procedure TRSDriftNet.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := InterfaceArea.Bounds.X1;
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 412;
  alignment.MaxHeight := 254;

  case RSClient.Mode of
    ERSClientMode.FIXED:
      alignment.Top := InterfaceArea.Bounds.Y1;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      alignment.Top := InterfaceArea.Bounds.Y1-1;
  end;

  Self.SetupAlignment(alignment);
end;

function TRSDriftNet.IsOpen(): Boolean;
begin
  Result := Self.IsTitle(Self.Name);
end;

function TRSDriftNet.IsOpen(waitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), waitTime);
end;

function TRSDriftNet.Close(pressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

(*
## TRSDriftNet.GetButtons
```pascal
function TRSDriftNet.GetButtons(): TRSButtonArray;
```

Returns a TRSButtonArray containing the avaiable buttons. Changes depending on if there is an overlay.

*)
function TRSDriftNet.GetButtons(): TRSButtonArray;
begin
  if Self.HasOverlay() then
    Result := Self.FindButtons([[100, 30]])
  else
    Result := Self.FindButtons([[36, 36]]);
end;

(*
## TRSDriftNet.GetButton
```pascal
function TRSDriftNet.GetButton(): TRSButton;
```

Returns a specific button if its available

Example:
```pascal
if not DriftNet.HasOverlay() then
  Driftnet.GetButton(ERSDriftNetButton.BANK_ALL).Click();
if DriftNet.BankOverlayOpen() then
  Driftnet.GetButton(ERSDriftNetButton.OVERLAY_CONFIRM).Click();
```
*)
function TRSDriftNet.GetButton(button: ERSDriftNetButton): TRSButton;
var
  buttons: TRSButtonArray;
begin
  case button of
    ERSDriftNetButton.DISCARD_ALL,
    ERSDriftNetButton.BANK_ALL,
    ERSDriftNetButton.TAKE_ALL:
    begin
      if Self.hasOverlay then
        Exit;

      buttons := Self.GetButtons();

      if buttons <> [] then
        Result := buttons[button];
    end;
    ERSDriftNetButton.OVERLAY_CONFIRM,
    ERSDriftNetButton.OVERLAY_CANCEL:
    begin
      if not Self.hasOverlay then
        Exit;

      buttons := Self.GetButtons();

      if buttons <> [] then
        Result := buttons[button - 3];
    end;
  end;
end;

var
 DriftNet : TRSDriftNet;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  DriftNet.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  DriftNet.Setup();
end;
