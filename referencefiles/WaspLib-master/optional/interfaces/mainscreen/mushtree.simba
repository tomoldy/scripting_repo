{$DEFINE ANDREW_MUSHTREE_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSMushTreeLocation = (HOUSE_ON_THE_HILL, VERDANT_VALLEY, STICKY_SWAMP, MUSHROOM_MEADOW);
  ERSMushTreeButton = ERSMushTreeLocation; //deprecated

  TRSMushTree = record(TRSTitledInterface)
    Mushrooms: TRSObjectV2;
  end;

procedure TRSMushtree.Setup(); override;
begin
  inherited;

  Self.Name := 'Mycelium Transportation System';

  Self.Mushrooms.SetupEx([1.3,1.3,13], [[24018, 34908], [10938, 35404], [10614, 35408], [10602, 34944]]);
  Self.Mushrooms.SetupUpText(['Mushtree']);
  Self.Mushrooms.Finder.Colors := [
    CTS2(3233415, 13, 0.19, 0.65), CTS2(4339785, 11, 0.18, 0.52),
    CTS2(7700852, 37, 0.04, 0.09), CTS2(6201506, 32, 0.02, 0.61)
  ];
  Self.Mushrooms.Walker := @Map.Walker;
end;

procedure TRSMushTree.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := InterfaceArea.Bounds.X1;
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 472;
  alignment.MaxHeight := 294;

  case RSCLient.Mode of
    ERSClientMode.FIXED:
      alignment.Top := InterfaceArea.Bounds.Y1;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      alignment.Top := InterfaceArea.Bounds.Y1 - 1;
  end;

  Self.SetupAlignment(alignment);
end;

function TRSMushTree.IsOpen(): Boolean;
begin
  Result := Self.IsTitle(Self.Name);
end;

function TRSMushTree.IsOpen(waitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), waitTime);
end;

function TRSMushTree.Close(pressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSMushTree.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[200, 52]]);
end;

function TRSMushTree.GetButton(location: ERSMushTreeLocation): TRSButton;
var
  buttons: TRSButtonArray;
begin
  buttons := Self.GetButtons();

  if buttons <> [] then
    Result := buttons[location];
end;

function TRSMushTree.ClickButton(location: ERSMushTreeLocation): Boolean;
var
  buttons: TRSButtonArray;
begin
  buttons := Self.GetButtons();

  if buttons = [] then Exit;

  Result := buttons[location].Click();
end;


function TRSMushTree.GetCoordinate(location: ERSMushTreeLocation): TPoint;
begin
  Result := Self.Mushrooms.Coordinates[Ord(location)];
end;


function TRSMushTree.Open(): Boolean;
begin
  if Self.IsOpen() then Exit(True);
  if not Self.Mushrooms.Click() then Exit;
  Minimap.WaitMoving();
  Result := Self.IsOpen(4000);
end;

function TRSMushTree.WalkOpen(): Boolean;
begin
  if Self.IsOpen() then Exit(True);
  if not Self.Mushrooms.Click() then Exit;
  Minimap.WaitMoving();
  Result := Self.IsOpen(4000);
end;


function TRSMushTree.Teleport(location: ERSMushTreeLocation): Boolean;
begin
  if Map.Position().InRange(Self.GetCoordinate(location), 60) then Exit(True);
  if not Self.Open() then Exit;
  if not Self.ClickButton(location) then Exit;
  Result := WaitUntil(Map.Position().InRange(Self.GetCoordinate(location), 60), 300, 5000);
end;

function TRSMushTree.WalkTeleport(location: ERSMushTreeLocation): Boolean;
begin
  if Map.Position().InRange(Self.GetCoordinate(location), 60) then Exit(True);
  if not Self.WalkOpen() then Exit;
  if not Self.ClickButton(location) then Exit;
  Result := WaitUntil(Map.Position().InRange(Self.GetCoordinate(location), 60), 300, 5000);
end;

var
 MushTree : TRSMushtree;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  MushTree.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  MushTree.Setup();
end;
