(*
# Lectern
Lectern interface.
*)
{$DEFINE WL_LECTERN_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSLecternType = (UNKNOWN, STANDARD, ANCIENT, LUNAR, ARCEUUS);

  TRSLectern = record (TRSTitledInterface)
    TABLETS: array [ERSLecternType] of TRSItemArray;
    Items: TRSItemInterface;
    CreateButton: TBox;
  end;

function TRSLectern.SlotBoxesFunction(): TBoxArray;
var
  b: TBox;
  tpa: TPointArray;
begin
  SRL.FindColors(tpa, CTS2(1509399, 6, 2.84, 8.78), Self.ScrollArea);

  for tpa in tpa.Cluster(1) do
  begin
    b := tpa.Bounds();
    if InRange(b.Width(), 25, 30) and InRange(b.Height(), 25, 30) then
      Result += b;
  end;
end;

procedure TRSLectern.Setup(); override;
const
  STANDARD_TABLETS: TRSItemArray = [
    'enchant sapphire or opal', 'bones to bananas', 'varrock teleport',
    'enchant emerald or jade', 'lumbridge teleport', 'falador teleport',
    'teleport to house', 'camelot teleport', 'kourend castle teleport',
    'enchant ruby or topaz', 'ardougne teleport', 'enchant diamond',
    'watchtower teleport', 'bones to peaches', 'enchant dragonstone',
    'enchant onyx'
  ];
  ANCIENT_TABLETS: TRSItemArray = [
    'paddewwa teleport', 'senntisten teleport', 'kharyrll teleport',
    'lassar teleport', 'dareeyak teleport', 'carrallanger teleport',
    'annakarl teleport', 'ghorrock teleport'
  ];
  LUNAR_TABLETS: TRSItemArray = [
    'moonclan teleport', 'ourania teleport', 'waterbirth teleport',
    'barbarian teleport', 'khazard teleport', 'fishing guild teleport',
    'catherby teleport', 'ice plateau teleport'
  ];
  ARCEUUS_TABLETS: TRSItemArray = [
    'arceuus library teleport', 'draynor manor teleport',
    'battlefront teleport', 'mind altar teleport', 'salve graveyard teleport',
    'fenkenstrain''s castle teleport', 'west ardougne teleport',
    'harmony island teleport', 'cemetery teleport', 'barrows teleport',
    'ape atoll teleport'
  ];
begin
  inherited;

  Self.Name := 'Lectern';

  Self.TABLETS[ERSLecternType.STANDARD] := STANDARD_TABLETS;
  Self.TABLETS[ERSLecternType.ANCIENT]  := ANCIENT_TABLETS;
  Self.TABLETS[ERSLecternType.LUNAR]    := LUNAR_TABLETS;
  Self.TABLETS[ERSLecternType.ARCEUUS]  := ARCEUUS_TABLETS;

  Self.Items.Name := Self.Name + '.Items';
  Self.Items.SlotBoxesFunction := @Self.SlotBoxesFunction;
end;

procedure TRSLectern.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := InterfaceArea.Bounds.X1;
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 456;
  alignment.MaxHeight := 302;

  case RSClient.Mode of
    ERSClientMode.FIXED:
        alignment.Top := InterfaceArea.Bounds.Y1;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
        alignment.Top := InterfaceArea.Bounds.Y1 - 1;
  end;

  Self.SetupAlignment(alignment);

  Self.ScrollArea := Self.Bounds;
  Self.ScrollArea.X1 += 11;
  Self.ScrollArea.Y1 += 40;
  Self.ScrollArea.X2 -= 71;
  Self.ScrollArea.Y2 := Self.ScrollArea.Y1 + 150;

  Self.CreateButton := Self.Bounds;
  Self.CreateButton.X1 += 294;
  Self.CreateButton.Y1 := Self.CreateButton.Y2 - 43;
  Self.CreateButton.X2 -= 60;
  Self.CreateButton.Y2 -= 18;
end;


function TRSLectern.GetLecternType(): ERSLecternType;
begin
  case Self.GetTitle() of
    'Spell Tablets': Exit(ERSLecternType.STANDARD);
    'Ancient Teleport Tablets': Exit(ERSLecternType.ANCIENT);
    'Lunar Teleport Tablets': Exit(ERSLecternType.LUNAR);
    'Arceuus Teleport Tablets': Exit(ERSLecternType.ARCEUUS);
  end;
end;

function TRSLectern.IsOpen(waitTime: Int32 = 0; interval: Int32 = -1): Boolean;
begin
  if waitTime = 0 then
    Exit(Self.GetLecternType() <> ERSLecternType.UNKNOWN);

  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.GetLecternType() <> ERSLecternType.UNKNOWN, SRL.TruncatedGauss(50, 1500), waitTime);
end;


function TRSLectern._FindIndex(lecternType: ERSLecternType = ERSLecternType.UNKNOWN): Int32;
var
  item: TRSItem;
begin
  if lecternType = ERSLecternType.UNKNOWN then
  begin
    lecternType := Self.GetLecternType();
    if lecternType = ERSLecternType.UNKNOWN then
      Exit(-1);
  end;

  for Result := 0 to High(Self.TABLETS[lecternType]) do
  begin
    item := Self.TABLETS[lecternType][Result];
    if Self.Items.Contains(item) then
      Exit;
    Result += 2;
  end;

  Result := -1;
end;

function TRSLectern.ContainsTablet(tablet: TRSItem): Boolean;
begin
  if Self.TABLETS[Self.GetLecternType()].Find(ToStr(tablet).ToLower()) = -1  then
    Exit;

  Result := Self.Items.Contains(tablet);
end;

function TRSLectern.GetTabletBox(tablet: TRSItem): TBox;
begin
  if Self.TABLETS[Self.GetLecternType()].Find(ToStr(tablet).ToLower()) > -1  then
    Self.Items.Find([tablet], Result);
end;


function TRSLectern._GetTabletButton(tablet: TBox): TBox;
var
  limit: TBox;
begin
  if tablet = [] then
    Exit;

  Result.X1 := tablet.X1 - 6;
  Result.Y1 := tablet.Y1 - 7;
  Result.X2 := tablet.X2 + 75;
  Result.Y2 := tablet.Y2 + 8;

  limit := Self.ScrollArea;

  if Result.Y1 < limit.Y1 then
    Result.Y1 := limit.Y1;
  if Result.Y2 > limit.Y2 then
    Result.Y2 := limit.Y2;
end;

function TRSLectern.GetTabletButton(tablet: TRSItem): TBox;
begin
  Result := Self._GetTabletButton(Self.GetTabletBox(tablet));
end;


function TRSLectern.CreateButtonEnabled(): Boolean;
begin
  Result := SRL.CountColor(2070783, Self.CreateButton) > 0;
end;

function TRSLectern.IsTabletSelected(tablet: TBox): Boolean;
begin
  if Self.CreateButtonEnabled() then
    Result := SRL.CountColor(CTS2(2700350, 2, 0.68, 1.59), Self._GetTabletButton(tablet)) > 0;
end;

function TRSLectern.IsTabletSelected(tablet: TRSItem): Boolean; overload;
begin
  if Self.CreateButtonEnabled() then
    Result := SRL.CountColor(CTS2(2700350, 2, 0.68, 1.59), Self.GetTabletButton(tablet)) > 0;
end;


function TRSLectern.ScrollToTablet(tablet: TRSItem): Boolean;
var
  lecternType: ERSLecternType;
  i, j: Int32;
begin
  lecternType := Self.GetLecternType();
  if lecternType = ERSLecternType.UNKNOWN then
    Exit;

  i := Self.TABLETS[lecternType].Find(ToStr(tablet).ToLower());
  if i = -1  then
    Exit;

  for j := 0 to 8 do
  begin
    if Self.Items.Contains(tablet) then
      Exit(True);

    if not Self.CanScroll() then
      Exit;

    Mouse.Move(Self.GetScrollArea(Self.GetScrollBar()), True);
    Mouse.Scroll(Random(1, 3), Self._FindIndex(lecternType) < i);
    WaitEx(100, 300);
  end;
end;

function TRSLectern.ScrollToTablet(tablet: TRSItem; out bounds: TBox): Boolean; overload;
var
  lecternType: ERSLecternType;
  i, j: Int32;
begin
  lecternType := Self.GetLecternType();
  if lecternType = ERSLecternType.UNKNOWN then
    Exit;

  i := Self.TABLETS[lecternType].Find(ToStr(tablet).ToLower());
  if i = -1  then
    Exit;

  for j := 0 to 8 do
  begin
    if Self.Items.Find([tablet], bounds) then
      Exit(True);

    if not Self.CanScroll() then
      Exit;

    Mouse.Move(Self.GetScrollArea(Self.GetScrollBar()), True);
    Mouse.Scroll(Random(1, 3), Self._FindIndex(lecternType) < i);
    WaitEx(100, 300);
  end;
end;


function TRSLectern.Close(pressEscape: Boolean = False): Boolean;
  function _ClickCloseButton(PressEscape: Boolean = False): Boolean;
  var
    b: TBox;
  begin
    b.X1 := Self.Bounds.X2-27;
    b.X2 := Self.Bounds.X2-7;
    b.Y1 := Self.Bounds.Y1+7;
    b.Y2 := Self.Bounds.Y1+27;

    Result := SRL.CountColor(CTS2(5999522, 16, 0.15, 0.40), b) > 70;

    if Result then
    begin
      case PressEscape of
        False: Mouse.Click(b, MOUSE_LEFT);
        True:  Keyboard.PressKey(VK_ESCAPE);
      end;
    end;
  end;

begin
  if not Self.IsOpen() then
    Exit(True);

  Result := _ClickCloseButton(pressEscape) and
            WaitUntil(
              not Self.IsOpen(),
              SRL.TruncatedGauss(50, 1500),
              Random(1500, 2000)
            );
end;


function TRSLectern.HoverTablet(tablet: TRSItem): Boolean;
var
  b: TBox;
begin
  Result := Self.ScrollToTablet(tablet, b);
  if Result then
    Mouse.Move(b);
end;

function TRSLectern.ClickTablet(tablet: TRSItem): Boolean;
begin
  if Self.IsTabletSelected(tablet) then
    Exit(True);

  if Self.HoverTablet(tablet) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Result := WaitUntil(Self.IsTabletSelected(tablet) and Self.CreateButtonEnabled(), 300, 3000);
  end;
end;


function TRSLectern.ClickCreateButton(): Boolean;
begin
  if not Self.CreateButtonEnabled() then
    Exit;
  Mouse.Click(Self.CreateButton, MOUSE_LEFT);
  Result := WaitUntil(not Self.IsOpen(), 300, 3000);
end;

function TRSLectern.MakeTablet(tablet: TRSItem): Boolean;
begin
  if Self.CreateButtonEnabled() then
  begin
    if Self.IsTabletSelected(tablet) then
    begin
      Mouse.Click(Self.CreateButton, MOUSE_LEFT);
      Exit(WaitUntil(not Self.IsOpen(), 300, 3000));
    end;

    if Self.ContainsTablet(tablet) then
    begin
      if not Self.ClickTablet(tablet) then
        Exit;
      Mouse.Click(Self.CreateButton, MOUSE_LEFT);
      Exit(WaitUntil(not Self.IsOpen(), 300, 3000));
    end;

    if Self.ScrollToTablet(tablet) then
    begin
      if not Self.IsTabletSelected(tablet) then
        if not Self.ClickTablet(tablet) then
          Exit;
      Mouse.Click(Self.CreateButton, MOUSE_LEFT);
      Exit(WaitUntil(not Self.IsOpen(), 300, 3000));
    end;
  end;

  if Self.ClickTablet(tablet) then
  begin
    Mouse.Click(Self.CreateButton, MOUSE_LEFT);
    Result := WaitUntil(not Self.IsOpen(), 300, 3000);
  end;
end;


procedure TRSLectern.Draw(bitmap: TMufasaBitmap); override;
var
  boxes: TBoxArray;
  b: TBox;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  boxes := Self.SlotBoxesFunction();
  bitmap.DrawBoxes(boxes, $00FFFF);
  for b in boxes do
    bitmap.DrawBox(Self._GetTabletButton(b), $00FFFF);
  bitmap.DrawBox(Self.ScrollArea, $00FFFF);
end;

var
  Lectern: TRSLectern;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  Lectern.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Lectern.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;

  Lectern.Draw(bitmap);
end;
