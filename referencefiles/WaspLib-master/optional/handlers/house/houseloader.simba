(*
# HouseMap
The HouseMap is what's responsible for mapping a user's POH (Player owned house).
*)

{$DEFINE WL_HOUSEMAP_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_HOUSEUTILS_INCLUDED}
  {$I WaspLib/optional/handlers/house/houseutils.simba}
{$ENDIF}

type
(*
(THouseLoader)=
## type THouseLoader
```pascal
type
  THouseLoader = record
    AMOUNT, SIZE: Int32;
    Map: TMufasaBitmap;

    Rooms: array of array of THouseRoom;

    //helpers:
    TeleportRooms: array of array of TTeleportRoom;

    RoomsBitmap, IconBitmap: TMufasaBitmap;
    RoomBitmaps, IconBitmaps: array [EHouseRoom] of TMufasaBitmap;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Decoration: EHouseDecoration;
    Colors: record
      Outdoors, Indoors, Dungeon: Int32;
    end;
    Config: TConfigJSON;
  end;
```
Helper record used by the {ref}`THouseHandler`.
All `THouseLoader` methods are helper methods for the {ref}`THouseHandler` and you shouldn't have to call them for anything.
*)
  THouseLoader = record
    AMOUNT, SIZE, Downscale, LayoutIndex: Int32;
    Map, Collision, DownscaledMap: TMufasaBitmap;

    Rooms: array of array of THouseRoom;

    //helpers:
    TeleportRooms: array of array of TTeleportRoom;

    RoomsBitmap, IconBitmap: TMufasaBitmap;
    RoomBitmaps, IconBitmaps: array [EHouseRoom] of TMufasaBitmap;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Location: EHouseLocation;
    Decoration: EHouseDecoration;
    Colors: THouseColor;
    Config: TConfigJSON;

    IsSetup: Boolean;
  end;

(*
## THouseLoader.Free()
```pascal
procedure THouseLoader.Free();
```
Internal method automatically called for your on script termination.
You do not have to call it yourself.
*)
procedure THouseLoader.Free();
var
  room: EHouseRoom;
begin
  Self.Config.Free();
  Self.Map.Free();
  Self.DownscaledMap.Free();
  Self.RoomsBitmap.Free();
  Self.IconBitmap.Free();

  Self.Map := nil;
  Self.DownscaledMap := nil;
  Self.RoomsBitmap := nil;
  Self.IconBitmap := nil;

  for room := Low(EHouseRoom) to High(EHouseRoom) do
  begin
    if Self.RoomBitmaps[room] <> nil then
    begin
      Self.RoomBitmaps[room].Free();
      Self.RoomBitmaps[room] := nil;
    end;

    if Self.IconBitmaps[room] <> nil then
    begin
      Self.IconBitmaps[room].Free();
      Self.IconBitmaps[room] := nil;
    end;
  end;

  Self.Rooms := [];
  Self.TeleportRooms := [];

  Self.IsSetup := False;
end;

function THouseLoader.ToEncodedString(): String; forward;
procedure THouseLoader.LoadFromString(s: String); forward;
procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint); forward;

procedure THouseLoader.SetColors(decoration: EHouseDecoration);
begin
  Self.Decoration := decoration;
  Self.Colors := decoration.GetColors();
end;

procedure THouseLoader.SetupConfig();
begin
  if Self.Config.IsSetup and (Self.LayoutIndex = Login.PlayerIndex) then Exit;
  Self.LayoutIndex := Login.PlayerIndex;
  Self.Config.Setup(
    AppPath + 'Configs' + DirectorySeparator + 'house' +
    DirectorySeparator + ToStr(Self.LayoutIndex)
  );
end;

(*
## THouseLoader.Init()
```pascal
procedure THouseLoader.Init(size, amount: Int32);
```
Internal method automatically called for your when you use `TScriptForm.CreateHouseBuilder()`.
You don't usually have to call it yourself.
*)
procedure THouseLoader.Init(size, amount: Int32);
begin
  Self.SetupConfig();

  if not Self.Config.Has('size') then Self.Config.Put('size', size);
  if not Self.Config.Has('amount') then Self.Config.Put('amount', amount);

  Self.SIZE := Self.Config.GetInt('size');
  Self.AMOUNT := Self.Config.GetInt('amount');

  Self.Selected.Map := [Self.AMOUNT div 2 * Self.SIZE, Self.AMOUNT div 2 * Self.SIZE];
  Self.Selected.Matrix := [Self.AMOUNT div 2, Self.AMOUNT div 2];
  Self.HouseBounds := [Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2];

  Self.Map.Init();
  Self.Map.SetSize(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);
  Self.DownscaledMap.Init();

  Self.RoomsBitmap.Init();
  Self.RoomsBitmap.LoadFromFile(WALKER_DIR + 'house.png');

  Self.IconBitmap.Init();
  Self.IconBitmap.LoadFromFile(WALKER_DIR + 'house_icons.png');

  AddOnTerminate(@Self.Free);

  SetLength(Self.Rooms, Self.AMOUNT, Self.AMOUNT);
  SetLength(Self.TeleportRooms, Self.AMOUNT, Self.AMOUNT);

  if Self.Config.Has('layout') then
    Self.LoadFromString(Self.Config.GetString('layout'))
  else
  begin
    Self.Location := EHouseLocation.RIMMINGTON;
    Self.SetColors(EHouseDecoration.WOOD);
    Self.DrawMap([EHouseRoom.GARDEN, 0, []], [Self.AMOUNT div 2, Self.AMOUNT div 2]);
  end;

  Self.IsSetup := True;
end;

procedure THouseLoader.Setup(downscale: Int32);
var
  empty, walls, windows: TPointArray;
  tmp: T2DPointArray;
begin
  Self.Downscale := downscale;
  Self.Map.Downsample(Self.Downscale, Self.DownscaledMap);

  Self.Map.FindColors(walls, $EEEEEE);
  Self.Map.FindColors(windows, $0000EE);
  Self.Map.FindColors(empty, $0);


  tmp := windows.Cluster(1);
  tmp.FilterSize(5, EComparator.__LT__);
  windows := tmp.Merge();

  Self.Collision.Init();
  Self.Collision.SetSize(Self.Map.getWidth(), Self.Map.getHeight());
  Self.Collision.ReplaceColor(0, $FFFFFF);
  Self.Collision.DrawTPA(walls + empty + windows, $0);
end;


function THouseLoader.GetColor(room: EHouseRoom): Int32;
begin
  if room.IsOutdoors() then Exit(Self.Colors.Outdoors);
  Result := Self.Colors.Indoors;
end;

(*
## THouseLoader.GetRoomBitmapBox()
```pascal
function THouseLoader.GetRoomBitmapBox(room: EHouseRoom): TBox;
```
Internal method used to get the box of the {ref}`EHouseRoom` you pass in.

This box is a box of the following image:

![poh rooms](../../../osr/walker/poh.png)

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
begin
  WriteLn POH.Map.GetRoomBitmapBox(EHouseRoom.SUPERIOR_GARDEN);
end;
```
*)
function THouseLoader.GetRoomBitmapBox(room: EHouseRoom): TBox;
var
  i: Int32;
begin
  i := Ord(room);
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

(*
## THouseLoader.GetRoomBitmap()
```pascal
function THouseLoader.GetRoomBitmap(room: EHouseRoom; color: Int32 = -1): TMufasaBitmap;
```
Internal method used to retrieve a bitmap of the {ref}`EHouseRoom` you pass in.

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
var
  bmp: TMufasaBitmap;
begin
  bmp := POH.Map.GetRoomBitmap(EHouseRoom.SUPERIOR_GARDEN);
  bmp.Debug();
  bmp.Free();
end;
```
*)
function THouseLoader.GetRoomBitmap(room: EHouseRoom): TMufasaBitmap;
var
  b: TBox;
begin
  if Self.RoomBitmaps[room] = nil then
  begin
    b := Self.GetRoomBitmapBox(room);
    Result := Self.RoomsBitmap.Copy(b.X1, b.Y1, b.X2, b.Y2);
    Self.RoomBitmaps[room] := Result.Copy();
  end
  else
    Result := Self.RoomBitmaps[room].Copy();

  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;

function THouseLoader.GetIconBitmap(room: EHouseRoom): TMufasaBitmap;
var
  b: TBox;
begin
  if Self.IconBitmaps[room] = nil then
  begin
    b := Self.GetRoomBitmapBox(room);
    Result := Self.IconBitmap.Copy(b.X1, b.Y1, b.X2, b.Y2);
    Self.IconBitmaps[room] := Result.Copy();
  end
  else
    Result := Self.IconBitmaps[room].Copy();

  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;


(*
## THouseLoader.WriteRoom()
```pascal
procedure THouseLoader.WriteRoom(room: EHouseRoom; index: TPoint);
```
Internal method used to write a room to `THouseLoader.Rooms` cache.
This uses an `TPoint` as a room `index` in a 2D array of {ref}`EHouseRoom`.

Unless you know what you are doing, you definitly should not use this for anything.

Example:
```pascal
POH.Map.WriteRoom(EHouseRoom.SUPERIOR_GARDEN, [3,3]);
```
*)
procedure THouseLoader.WriteRoom(room: THouseRoom; index: TPoint);
begin
  Self.Rooms[index.Y,index.X] := room;
  case room.Room of
    EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:;
    else Self.TeleportRooms[index.Y,index.X] := [];
  end;
  Self.Config.Put('layout', Self.ToEncodedString());
end;

(*
## THouseLoader.ReadRoom()
```pascal
function THouseLoader.ReadRoom(index: TPoint): EHouseRoom;
```
Internal method used to read a cached room in `THouseLoader.Rooms`.
This uses an `TPoint` as a room `index`.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

Example:
```pascal
WriteLn POH.Map.ReadRoom([3,3]);
```
*)
function THouseLoader.ReadRoom(index: TPoint): THouseRoom;
begin
  Result := Self.Rooms[index.Y,index.X];
end;

(*
## THouseLoader.PrintRooms()
```pascal
procedure THouseLoader.PrintRooms();
```
Debugging helper method used to read a cached rooms in `THouseLoader.Rooms`.
This will print the whole cache nicely formated in a way that is human friendly like you were looking at the house map.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

```{note}
:class: dropdown
It's a extremely useful debugging tool when paired with `POH.Map.Map.Debug()`.
```

Example:
```pascal
POH.Setup();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.PrintRooms();
var
  str: String;
  i, j: Int32;
begin
  str := '[' + LineEnding;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LineEnding;
  end;
  str += ']';
  WriteLn str;
end;


(*
## THouseLoader.DrawMap()
```pascal
procedure THouseLoader.DrawMap(bmp: TMufasaBitmap; room: EHouseRoom; p: TPoint);
procedure THouseLoader.DrawMap(room: EHouseRoom; color: Int32; p: TPoint); overload;
```
Methods used to draw the POH map and cache the rooms drawn in `THouseLoader.Rooms`.

Example:
```pascal
POH.Map.DrawMap(EHouseRoom.SUPERIOR_GARDEN, POH.GrassColor, [3,3]);
POH.Map.Debug();
POH.Map.PrintRooms();
```
*)
procedure THouseLoader.DrawMap(bmp: TMufasaBitmap; room: THouseRoom; index: TPoint); overload;
var
  tmp: TMufasaBitmap;
begin
  Self.WriteRoom(room, index);

  tmp := bmp.RotateClockWise(room.Rotation);
  Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
  tmp.Free();
  bmp.Free();

  if (index.X > Self.HouseBounds.X1) and (index.X < Self.HouseBounds.X2) and
     (index.Y > Self.HouseBounds.Y1) and (index.Y < Self.HouseBounds.Y2) then
    Exit;

  if index.X <= Self.HouseBounds.X1 then Self.HouseBounds.X1 := index.X-1;
  if index.X >= Self.HouseBounds.X2 then Self.HouseBounds.X2 := index.X+1;
  if index.Y <= Self.HouseBounds.Y1 then Self.HouseBounds.Y1 := index.Y-1;
  if index.Y >= Self.HouseBounds.Y2 then Self.HouseBounds.Y2 := index.Y+1;

  tmp := Self.GetRoomBitmap(EHouseRoom.UNKNOWN);
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      if Self.ReadRoom(index).Room <> EHouseRoom.UNKNOWN then Continue;
      Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
  tmp.Free();
end;

procedure THouseLoader.DrawMap(room: THouseRoom; p: TPoint);
var
  bmp: TMufasaBitmap;
begin
  bmp := Self.GetRoomBitmap(room.Room);
  Self.DrawMap(bmp, room, p);
end;


procedure THouseLoader.Redraw();
var
  bmp, tmp: TMufasaBitmap;
  index: TPoint;
  room: THouseRoom;
begin
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      room := Self.ReadRoom(index);
      bmp := Self.GetRoomBitmap(room.Room);

      tmp := bmp.RotateClockWise(room.Rotation);
      Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
      tmp.Free();
      bmp.Free();
    end;
end;


function THouseLoader.ToEncodedString(): String;
var
  idx: TPoint;
  room: THouseRoom;
  str, teleports: String;
  o: EHouseObject;
  troom: TTeleportRoom;
begin
  Result := '[';
  Result += '5 ';
  Result += ToStr(Ord(High(EHouseObject))) + ' ';
  Result += ToStr(Ord(High(EHouseTeleport))) + ' ';
  Result += ToStr(Ord(Self.Location)) + ' ' + ToStr(Ord(Self.Decoration));
  Result += ']';

  for idx.Y := 0 to Self.AMOUNT-1 do
    for idx.X := 0 to Self.AMOUNT-1 do
    begin
      room := Self.ReadRoom(idx);

      for o in room.Objects do str += ToStr(Ord(o)) + ' ';
      str := str.Trim();

      case room.Room of
        EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:
        begin
          troom := Self.TeleportRooms[idx.Y, idx.X];
          teleports := '(' + ToStr(Ord(troom.Left)) + ' ' +
                           ToStr(Ord(troom.Middle)) + ' ' +
                           ToStr(Ord(troom.Right)) +
                     ')';
        end;
      end;

      Result += '[' + ToStr(idx.X) + ' ' + ToStr(idx.Y) + ' ' + ToStr(Ord(room.Room)) + ' ' +  ToStr(room.Rotation);
      if str <> '' then Result += ' ' + str;
      if teleports <> '' then Result += ' ' + teleports;
      Result += ']';

      str := '';
      teleports := '';
    end;

  Result := Base64Encode(CompressString(Result));
end;

procedure THouseLoader.LoadFromString(s: String);
var
  idx: TPoint;
  elements, values: TStringArray;
  i, j: Int32;
  room: THouseRoom;
  main, portals: String;
  skipObjects: Boolean;
begin
  elements := MultiBetween(DecompressString(Base64Decode(s)), '[', ']');
  if elements = [] then Exit;

  values := Explode(' ', elements[0]);

  //validate something didn't change that made the config unparseable
  if (Length(values) < 5) or (StrToInt(values[0]) <> Length(values)) then
  begin
    MessageDlg('House Loader', 'Error loading old house layout.' + LineEnding + 'This could be because it was updated and the old version is not compatible anymore.' + LineEnding + LineEnding + 'Your house layout has been reset!', TMsgDlgType.mtError, [mbOk]);
    CopyFile(Self.Config.Path, Self.Config.Path + '.old', True);
    Self.Location := EHouseLocation.RIMMINGTON;
    Self.SetColors(EHouseDecoration.WOOD);
    Self.DrawMap([EHouseRoom.GARDEN, 0, [EHouseObject.EXIT]], [Self.AMOUNT div 2, Self.AMOUNT div 2]);
    Exit;
  end;

  //validate EHouseObjects and EHouseTeleport didn't change
  skipObjects := StrToInt(values[1]) <> Ord(High(EHouseObject));
  skipObjects := skipObjects or (StrToInt(values[2]) <> Ord(High(EHouseTeleport)));

  if skipObjects then
    MessageDlg('House Loader', 'Error loading old house layout.' + LineEnding + 'This could be because it was updated and the old version is not compatible anymore.' + LineEnding + LineEnding + 'Your house layout remains but your will need to reconfigure your objects!', TMsgDlgType.mtError, [mbOk]);

  Self.Location := EHouseLocation(StrToInt(values[3]));
  Self.SetColors(EHouseDecoration(StrToInt(values[4])));

  for i := 2 to High(elements) do
  begin
    if elements[i].Contains(' (') then
    begin
      main := elements[i].Before(' (');
      portals := elements[i].Between('(', ')');
    end
    else
    begin
      main := elements[i];
      portals := '';
    end;

    values := Explode(' ', main);
    idx := [StrToInt(values[0]), StrToInt(values[1])];

    room.Room := EHouseRoom(StrToInt(values[2]));
    room.Rotation := StrToInt(values[3]);

    if not skipObjects then
    begin
      room.Objects := [];
      for j := 4 to High(values) do
        room.Objects += EHouseObject(StrToInt(values[j]));
    end;

    case room.Room of
      EHouseRoom.UNKNOWN: ;
      EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:
      begin
        if not skipObjects then
        begin
          values := Explode(' ', portals);

          Self.TeleportRooms[idx.Y, idx.X] := [
            EHouseTeleport(StrToInt(values[0])),
            EHouseTeleport(StrToInt(values[1])),
            EHouseTeleport(StrToInt(values[2]))
          ];
        end;

        Self.DrawMap(room, idx);
      end;
      else Self.DrawMap(room, idx);
    end;
  end;
end;
