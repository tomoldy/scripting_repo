(*
# LootHandler
LootHandler is a record made to handle looting.
*)

{$DEFINE WL_LOOT_HANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF WL_ALCH_HANDLER_INCLUDED}
  {$I WaspLib/optional/handlers/alchhandler.simba}
{$ENDIF}

type
  TRSLootDrop = record
    Name: String;
    Drop: TRSMonsterDrop;
    Value: Int32;
    Selected: Boolean;
  end;

  TRSLootDropArray = array of TRSLootDrop;

function SortLootDropArray(constref l, r: TRSLootDrop): Int32;
begin
  Result := r.Value - l.Value;
end;

procedure TRSLootDropArray.Sort();
begin
  System.Sort(Self, @SortLootDropArray);
end;

function TRSLootDropArray.Sorted(): TRSLootDropArray;
begin
  Result := Copy(Self);
  Result.Sort();
end;

function TRSLootDropArray.Find(name: String): Int32;
begin
  for Result := 0 to High(Self) do
    if Self[Result].Name = name then
      Exit;
  Result := -1;
end;

function TRSLootDropArray.Contains(name: String): Boolean;
begin
  Result := Self.Find(name) <> -1;
end;


type
  TCustomLootHandlerItem = record
    Name: String;
    Selected: Boolean;
  end;

  TRSLootHandler = record(TSRLBaseRecord)
    Items: TRSLootDropArray;
    Loot: TRSMonsterDropArray;
    LootItems: TRSItemArray;

    ValueThreshold: Int32;

    PriorityArray: TStringArray;

    _CheckedLoot, _DidLoot, _Filtered: Boolean;
    _LootColors: TCTS2ColorArray;
    _UpText: TStringArray;

    _FormClickTimeStamp: UInt64;
    Config: TConfigJSON;
  end;

procedure TRSLootHandler._Init(value: Int32);
begin
  Self.Name := 'LootHandler';

  Self.PriorityArray := [
    'clue scroll (easy)', 'clue scroll (medium)', 'clue scroll (hard)', 'clue scroll (elite)',
    'clue scroll (master)',
    'dark totem base', 'dark totem middle', 'dark totem top',
    'dark totem', 'ancient shard', 'brimstone key',
    'mist battlestaff', 'dust battlestaff',
    'eternal gem', 'imbued heart', 'crystal shard', 'abyssal head',
    'curved bone', 'long bone',
    'imp champion scroll', 'goblin champion scroll', 'skeleton champion scroll',
    'zombie champion scroll', 'giant champion scroll',
    'hobgoblin champion scroll', 'ghoul champion scroll',
    'earth warrior champion scroll', 'jogre champion scroll',
    'lesser demon champion scroll',
    'giant key', 'mossy key', 'trident of the seas (full)' , 'trident of the seas'
  ];

  Self._LootColors := [
    [6579858, 9, 0.09, 0.33],   //vile and malicious ashes
    [13422033, 18, 0.20, 0.30], //dragon bones (this matches a lot with proselyte. might need to be removed)
    [7760980, 9, 0.06, 0.14],   //rune items (this might need better colors but this one doesn't match in CoK background,
    [10038382, 14, 0.08, 1.72], //ancient shard
    [14390305, 26, 0.04, 0.88], //Totem parts (blue)
    [1923609, 7, 0.16, 0.84],   //Totem parts (green)
    [4345976, 17, 0.10, 0.37],  //Dark bow
    [2895188, 6, 0.16, 0.41],   //Abyssal whip (matches a little with primordial boots)
    [1776416, 1, 0.01, 0.01],   //Black mystic bottom (probably all parts too).
    [3620158, 9, 0.28, 0.50],   //Black mask
    [10000802, 14, 0.13, 0.17], //Runes (matches with proselyte)
    [1424100, 20, 0.02, 0.66],  //gold coins
    [808255, 11, 0.10, 2.30],   //herb seeds
    [482129, 11, 0.48, 1.48],   //ranarr
    [7311001, 7, 0.08, 0.21],   //noted drops
    [680832, 11, 0.04, 1.43],   //battlestaff
    [860512, 14, 0.21, 1.80]    //ensouled hellhound head
  ];

  Self.Items := [];
  Self.ValueThreshold := value;
end;

procedure TRSLootHandler.AddItems(items: array of TCustomLootHandlerItem); overload;
var
  item: TCustomLootHandlerItem;
  i: Int32;
  drop: TRSMonsterDrop;
begin
  for item in items do
  begin
    item.Name := LowerCase(Trim(item.Name));

    for i := 0 to High(Self.Items) do
      if Self.Items[i].Drop.Item = item.Name then
        Continue;

    if ItemFinder.GetItemIDs(item.Name) = [] then
    begin
      MessageDlg(
        'Invalid item', 'Could not find "' + item.Name + '".' +
        LineEnding + 'Make sure the item name is spelled correctly.',
        mtError, [mbOK]
      );
      Continue;
    end;

    drop := TRSMonsterDrop.Create(item.Name);

    Self.Items += [drop.GetName(), drop, ItemData.GetAverage(item.Name), item.Selected];
  end;

  Self.Items.Sort();

  Self.Loot := [];
  Self.LootItems := [];

  for i := 0 to High(Self.Items) do
  begin
    if Self.Items[i].Selected then
    begin
      Self.Loot += Self.Items[i].Drop;
      Self.LootItems += Self.Items[i].Drop.Item;
    end;
    Self.Config.Put(Self.Items[i].Name, Self.Items[i].Selected);
  end;
end;

procedure TRSLootHandler.Setup(drops: TRSItemArray; value: Int32 = 5000);
var
  i, val: Int32;
  drop: TRSMonsterDrop;
begin
  Self._Init(value);

  for i := 0 to High(drops) do
  begin
    val := ItemData.GetAverage(drops[i]);
    drop := TRSMonsterDrop.Create(drops[i]);
    if val = 0 then val := $FFFFFF;
    Self.Items += [drop.GetName(), drop, val, val >= value];
  end;

  Self.Items.Sort();
end;

procedure TRSLootHandler.Setup(monster: String; value: Int32 = 5000); overload;
var
  drops: TRSMonsterDropArray;
  i, val, idx: Int32;
  keys: TStringList;
  custom: array of TCustomLootHandlerItem;
begin
  Self._Init(value);

  drops := MonsterData.GetDrops(monster);
  drops.ClearDuplicates();

  for i := 0 to High(drops) do
  begin
    val := ItemData.GetAverage(drops[i].Item);
    if drops[i].Stackable then val := val * drops[i].Quantity;
    if val = 0 then val := $FFFFFF;
    Self.Items += [drops[i].GetName(), drops[i], val, val >= value];
  end;

  Self.Items.Sort();

  Self.Config.Setup(AppPath + 'Configs' + DirectorySeparator + 'loothandler' + DirectorySeparator + LowerCase(monster) + '.json');
  keys := Self.Config.JSON.keys();

  for i := 0 to keys.High() do
  begin
    idx := Self.Items.Find(keys.getStrings(i));

    if idx = -1 then
    begin
      custom += [keys.getStrings(i), Self.Config.GetBoolean(keys.getStrings(i))];
      Continue;
    end;

    Self.Items[idx].Selected := Self.Config.GetBoolean(keys.getStrings(i));
    if Self.Items[idx].Selected then
    begin
      Self.Loot += Self.Items[idx].Drop;
      Self.LootItems += Self.Items[idx].Drop.Item;
    end;
  end;

  Self.AddItems(custom);
end;

procedure TRSLootHandler.ResetToThreshold();
var
  i: Int32;
begin
  Self.Loot := [];
  Self.LootItems := [];

  for i := 0 to High(Self.Items) do
  begin
    Self.Items[i].Selected := Self.Items[i].Value >= Self.ValueThreshold;

    if Self.Items[i].Selected then
    begin
      Self.Loot += Self.Items[i].Drop;
      Self.LootItems += Self.Items[i].Drop.Item;
    end;

    Self.Config.Put(Self.Items[i].Name, Self.Items[i].Selected);
  end;
end;

procedure TRSLootHandler.AddItem(item: String);
begin
  Self.AddItems([[item, True]]);
end;

procedure TRSLootHandler.Toggle(idx: Int32);
var
  i: Int32;
begin
  if Self.Items[idx].Selected then
  begin
    for i := 0 to High(Self.Loot) do
      if Self.Items[idx].Drop = Self.Loot[i] then
      begin
        Delete(Self.Loot, i, 1);
        Delete(Self.LootItems, i, 1);
        Break;
      end;
  end
  else
  begin
    Self.Loot += Self.Items[idx].Drop;
    Self.LootItems += Self.Items[idx].Drop.Item;
  end;

  Self.Items[idx].Selected := not Self.Items[idx].Selected;
  Self.Config.Put(Self.Items[idx].Name, Self.Items[idx].Selected);
end;


function TRSLootHandler.GetItemIndex(name: String): Int32;
begin
  for Result := 0 to High(Self.Items) do
    if Self.Items[Result].Name = name then
      Exit;
  Result := -1;
end;

function TRSLootHandler.GetItemValue(name: String): Int32;
var
  i: Int32;
begin
  i := Self.GetItemIndex(name);
  if i = -1 then Exit(-1);
  Result := Self.Items[i].Value;
end;


function TRSLootHandler.HasSpace(drop: TRSMonsterDrop): Boolean;
begin
  Result := not Inventory.IsFull() or (drop.Stackable and Inventory.ContainsItem(drop.Item));
end;


function TRSLootHandler.IsHoveringLoot(out contextIsOpen: Boolean): Boolean;
var
  upText: String;
begin
  upText := MainScreen.GetUpText();
  contextIsOpen := False;
  if upText.Contains('Take') then
    Exit(True);

  if upText.Contains('Walk here') then
    Exit(False);

  contextIsOpen := ChooseOption.Open();
  Result := contextIsOpen and ChooseOption.HasOption('Take');
end;

function TRSLootHandler.IsHoveringLoot(): Boolean; overload;
var
  upText: String;
begin
  upText := MainScreen.GetUpText();
  if upText.Contains('Take') then
    Exit(True);

  if upText.Contains('Walk here') then
    Exit;

  Result := ChooseOption.Open() and ChooseOption.HasOption('Take');
end;

function TRSLootHandler.CountDrop(drop: TRSMonsterDrop): Int32;
begin
  if drop.Stackable then
    Exit(Inventory.CountItemStack(drop.Item));

  Result := Inventory.CountItem(drop.Item);
end;

function TRSLootHandler.HandleLooting(): Boolean;
var
  i, count: Int32;
  contextIsOpen: Boolean;
  position: TPoint;
begin
  position := Mouse.Position();
  if not Self.IsHoveringLoot(contextIsOpen) then
    Exit;

  Self._CheckedLoot := True;
  contextIsOpen := contextIsOpen or ChooseOption.IsOpen();

  if Self._UpText = [] then
  begin
    for i := 0 to High(Self.Loot) do
      Self._UpText += ToStr(Self.Loot[i].Item);
  end;

  if not contextIsOpen and MainScreen.IsUpText(Self._UpText, -1, i, False) then
  begin
    if Self.HasSpace(Self.Loot[i]) then
    begin
      count := Self.CountDrop(Self.Loot[i]);
      Mouse.Click(MOUSE_LEFT);
      Self._DidLoot := WaitUntil(count < Self.CountDrop(Self.Loot[i]), 300, 3000);
      Exit(Self.HandleLooting()); //HERE LOOP UNDER PLAYER....
    end;

    if not Inventory.Consume(ERSConsumable.FOOD) then
    begin
      Self.DebugLn('No space to loot!');
      Exit;
    end;

    for i := 0 to 4 do
    begin
      if i > 3 then
        Exit(True);
      Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
      if Self.IsHoveringLoot(contextIsOpen) then
        Break;
    end;

    Exit(Self.HandleLooting());
  end;

  if not ChooseOption.Open() then
  begin
    Self.DebugLn('Failed to open "Choose options" menu for some reason.');
    Exit;
  end;

  if not ChooseOption.HasOption(Self._UpText, i, False) then
  begin
    Self.DebugLn('Finished looting.');
    Exit;
  end;

  if Self.HasSpace(Self.Loot[i]) then
  begin
    count := Self.CountDrop(Self.Loot[i]);
    if ChooseOption.Select(Self._UpText[i], MOUSE_LEFT, False) then
      Self._DidLoot := WaitUntil(count < Self.CountDrop(Self.Loot[i]), 300, 3000);

    for i := 0 to 4 do
    begin
      if i > 3 then
        Exit(True);
      Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
      if Self.IsHoveringLoot(contextIsOpen) then
        Break;
    end;

    Exit(Self.HandleLooting());
  end;

  if not Inventory.Consume(ERSConsumable.FOOD) then
  begin
    Self.DebugLn('No space to loot!');
    Exit(True);
  end;

  for i := 0 to 3 do
  begin
    if i > 3 then
      Exit(True);
    Mouse.Move(position + [Random(-4,4), Random(-4,4)]);
    if Self.IsHoveringLoot(contextIsOpen) then
      Break;
  end;

  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(p: TPoint): Boolean;
begin
  Self._DidLoot := False;
  Mouse.Move(p);
  Result := Self.HandleLooting();
end;

function TRSLootHandler.CheckLoot(b: TBox; attempts: Int32 = 3): Boolean; overload;
var
  i: Int32;
  tpa: TPointArray;
  p: TPoint;
begin
  Self._DidLoot := False;
  for i := 0 to attempts do
  begin
    if i > 2 then Exit;
    p := [-1,-1];

    if SRL.FindAnyColors(tpa, Self._LootColors, b) > 0 then
      p := tpa.RandomValue();

    if p = [-1,-1] then p := SRL.ROWP(Mouse.Position(), b);

    Mouse.Move(p);
    if Self.IsHoveringLoot() then Break;
  end;

  Result := Self.HandleLooting() or Self._DidLoot;
end;

function TRSLootHandler.CheckLoot(tile: TRectangle): Boolean; overload;
var
  i: Int32;
  tpa: TPointArray;
  p: TPoint;
begin
  Self._DidLoot := False;

  for i := 0 to 3 do
  begin
    if i > 2 then Exit;
    p := [-1,-1];

    if SRL.FindAnyColors(tpa, Self._LootColors, tile.Bounds()) > 0 then
    begin
      tpa := tile.Filter(tpa);
      if tpa <> [] then p := tpa.RandomValue();
    end;

    if p = [-1,-1] then p := SRL.rowp(Mouse.Position(), tile);

    Mouse.Move(p);
    if Self.IsHoveringLoot() then Break;
  end;

  Result := Self.HandleLooting() or Self._DidLoot;
end;

function TRSLootHandler.CheckLoot(dots: TPointArray): Boolean; overload;
var
  p: TPoint;
  angle: Double;
  tile: TRectangle;
begin
  angle := Minimap.GetCompassAngle(False);
  for p in dots do
  begin
    tile := Minimap.GetTileMS(p, [0.7, 0.7, 0], [2,2], angle);
    Result := Self.CheckLoot(tile);
    if Result and Self._DidLoot then
    begin
      tile := Minimap.GetTileMS(Minimap.Center, [0.7, 0.7, 0], [0,0], angle);
      Self.CheckLoot(tile);
      Exit;
    end;
  end;
end;

function TRSLootHandler.CheckLoot(): Boolean; overload;
begin
  Result := Self.CheckLoot(Minimap.GetDots(ERSMinimapDot.ITEM));
end;

var
  LootHandler: TRSLootHandler;

function TScriptForm.CreateLootManager(): TTabSheet;
  type TScriptForm = TScriptForm;

  procedure TScriptForm._OnLootListDrawItem(control: TWinControl; idx: Integer; rect: TRect; state: TOwnerDrawState);
  var
    list: TListBox;
    name: String;
    i: Int32;
    bgColor, textColor: TColor;
    valueStr: String;
  begin
    list := control;
    name := list.GetItems().GetStrings(idx);
    if LootHandler._Filtered then
      i := LootHandler.GetItemIndex(name)
    else
      i := idx;

    if idx mod 2 = 0 then
      bgColor := clWhite
    else
      bgColor := $F0F0F0;

    if LootHandler.Items[i].Selected then
      textColor := clGreen
    else
      textColor := clRed;

    list.GetCanvas().GetBrush().SetColor(bgColor);
    list.GetCanvas().FillRect(rect.Left, rect.Top, rect.Right, rect.Bottom);

    if odSelected in state then
    begin
      list.GetCanvas().GetBrush().SetColor($FFE0E0);
      list.GetCanvas().FillRect(rect.Left, rect.Top, rect.Right, rect.Bottom);
    end;

    list.GetCanvas().GetFont().SetColor(textColor);
    list.GetCanvas().GetFont().SetStyle([TFontStyle.fsBold]);
    list.GetCanvas().TextRect(rect, 2, rect.Top + 2, name);

    if LootHandler.Items[i].Value = $FFFFFF then
      valueStr := 'Untradeable'
    else
      valueStr := ToStr(LootHandler.Items[i].Value) + ' GP';

    list.GetCanvas().TextRect(
      rect,
      rect.Right - list.GetCanvas().TextWidth(valueStr) - 5,
      rect.Top + 2,
      valueStr
    );
  end;

  procedure TScriptForm._ResetLootList(list: TListBox);
  var
    i: Int32;
  begin
    list.getItems().BeginUpdate();
    if LootHandler._Filtered or (list.GetItems().getCount() <>  Length(LootHandler.Items)) then
    begin
      list.Clear();
      for i := 0 to High(LootHandler.Items) do
        list.GetItems().Add(LootHandler.Items[i].Name);
      LootHandler._Filtered := False;
    end
    else
      for i := 0 to High(LootHandler.Items) do
        list.GetItems().setStrings(i, LootHandler.Items[i].Name);
    list.getItems().EndUpdate();
    list.Invalidate();
  end;

  procedure TScriptForm._ToggleLootList(sender: TObject);
  var
    list: TListBox;
    name: String;
    idx, i: Int32;
  begin
    list := sender;
    idx := list.GetItemIndex();
    if idx = -1 then Exit;

    name := list.GetItems().GetStrings(idx);
    i := LootHandler.Items.Find(name);
    LootHandler.Toggle(i);
    list.Invalidate();
  end;

  procedure TScriptForm._OnLootListKeyPress(sender: TObject; var key: Char);
  var
    edit: TEdit;
    str: String;
    tmp: Char;
  begin
    tmp := key;
    key := #0;

    case tmp of
      #13, #32:
      begin
        Self._ToggleLootList(sender);
        Exit;
      end;
    end;

    edit := Self.Form.GetChild('loot_search_edit');
    str := edit.getText();
    if tmp = #08 then
    begin
      SetLength(str, Length(str)-1);
      edit.setText(str);
      Exit;
    end;

    edit.setText(str + tmp);
  end;

  procedure TScriptForm._OnLootSearchChange(sender: TObject);
  var
    parent: TControl;
    list: TListBox;
    edit: TEdit;
    query: String;
    i: Int32;
  begin
    parent := TControl(sender).getParent();
    while parent.getName() <> 'loot_manager' do parent := parent.getParent();

    list := parent.GetChild('loot_listbox');
    edit := parent.GetChild('loot_search_edit');

    if edit.IsEmpty() then
    begin
      Self._ResetLootList(list);
      Exit;
    end;

    LootHandler._Filtered := True;

    list.getItems().BeginUpdate();
    list.Clear();
    query := LowerCase(Trim(edit.GetText()));
    for i := 0 to High(LootHandler.Items) do
      if (query = '') or (Pos(query, LowerCase(LootHandler.Items[i].Name)) > 0) then
        list.GetItems().Add(LootHandler.Items[i].Name);
    list.getItems().EndUpdate();
  end;

  procedure TScriptForm._OnAddCustomLootClick(sender: TObject);
  var
    parent: TControl;
    list: TListBox;
    edit: TEdit;
  begin
    parent := TControl(sender).getParent();
    while parent.getName() <> 'loot_manager' do parent := parent.getParent();

    list := parent.GetChild('loot_listbox');
    edit := parent.GetChild('custom_loot_edit');

    if edit.IsEmpty() then Exit;

    LootHandler.AddItem(edit.GetText());

    edit.Clear();

    Self._ResetLootList(list);
  end;

  procedure TScriptForm._OnClearLootClick(sender: TObject);
  var
    parent: TControl;
    edit: TEdit;
    list: TListBox;
    i: Int32;
  begin
    parent := TControl(sender).getParent();
    while parent.getName() <> 'loot_manager' do parent := parent.getParent();

    list := parent.GetChild('loot_listbox');
    edit := parent.GetChild('loot_search_edit');

    edit.Clear();
    LootHandler._Filtered := False;

    LootHandler.Loot := [];
    LootHandler.LootItems := [];

    for i := 0 to High(LootHandler.Items) do
      LootHandler.Items[i].Selected := False;
    list.Invalidate();
  end;

  procedure TScriptForm._OnApplyLootFilterClick(sender: TObject);
  var
    parent: TControl;
    list: TListBox;
    edit: TEdit;
    filter: Int32;
  begin
    parent := TControl(sender).getParent();
    while parent.getName() <> 'loot_manager' do parent := parent.getParent();

    list := parent.GetChild('loot_listbox');
    edit := parent.GetChild('loot_value_edit');
    filter := StrToIntDef(edit.GetText(), 0);

    edit := parent.GetChild('loot_search_edit');
    edit.Clear();

    LootHandler.ValueThreshold := filter;
    LootHandler.ResetToThreshold();

    Self._ResetLootList(list);
  end;

  procedure TScriptForm._OnLootFilterKeyPress(sender: TObject; var key: Char);
  begin
    if key = #13 then Self._OnApplyLootFilterClick(sender);
    if not (key in ['0'..'9', #8]) then key := #0;
  end;

  procedure TScriptForm._OnCustomLootKeyPress(sender: TObject; var key: Char);
  begin
    if key = #13 then
    begin
      Self._OnAddCustomLootClick(sender);
      key := #0;
    end;
  end;

var
  list: TLabeledListBox;
  search, filter, custom: TLabeledEdit;
  tmp: TButton;
begin
  Self.AddTab('Loot Manager');
  Result := Self.Tabs[High(Self.Tabs)];

  search.Create(Result, 'Search Items', '', [50, 20], [250, 0], True);
  search.SetName('loot_search');
  search.Edit.setOnChange(@Self._OnLootSearchChange);

  list.Create(Result, 'Press SPACE or ENTER to toggle the selected item', 'Press SPACE or ENTER to toggle the selected item.', [50,20], [650, 250], [0, search.GetBottom()], True);
  list.ListBox.setStyle(TListBoxStyle.lbOwnerDrawFixed);
  list.ListBox.setOnDrawItem(@Self._OnLootListDrawItem);
  list.ListBox.setOnKeyPress(@Self._OnLootListKeyPress);

  list.SetName('loot');

  custom.Create(Result, 'Custom Item', '', [0,20], [150, 0], [list.GetLeft(), list.GetBottom()], True);
  custom.SetName('custom_loot');
  custom.Edit.setOnKeyPress(@Self._OnCustomLootKeyPress);

  tmp.Create(Result, 'Add Custom Item', '', [10,15], [120,25], [custom.GetRight(),custom.GetTop()], True);
  tmp.SetOnClick(@Self._OnAddCustomLootClick);

  filter.Create(Result, 'Filter By Value (GP)', '', [20,0], [100,0], [search.GetRight(),search.GetTop()], True);
  filter.SetName('loot_value');
  filter.Edit.setOnKeyPress(@Self._OnLootFilterKeyPress);

  tmp.Create(Result, 'Apply Filter', '', [20,15], [100,25], [filter.GetRight(),filter.GetTop()], True);
  tmp.SetOnClick(@Self._OnApplyLootFilterClick);

  tmp.Create(Result, 'Reset All', '', [20,0], [100,25], [tmp.GetRight(),tmp.GetTop()], True);
  tmp.SetOnClick(@Self._OnClearLootClick);

  filter.Edit.setText(ToStr(LootHandler.ValueThreshold));
  Self._ResetLootList(list.ListBox);
end;

procedure TScriptForm.RefreshLootManager();
var
  parent: TControl;
  edit: TEdit;
  list: TListBox;
begin
  edit := Self.Form.GetChild('loot_value_edit');
  edit.setText(ToStr(LootHandler.ValueThreshold));

  parent := edit.getParent();
  while parent.getName() <> 'loot_manager' do parent := parent.getParent();

  list := parent.GetChild('loot_listbox');

  Self._ResetLootList(list);
end;
