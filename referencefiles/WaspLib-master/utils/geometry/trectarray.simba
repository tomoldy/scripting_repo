{$DEFINE WL_TRECTARRAY_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

function TRectArray.ToTPA(): TPointArray; constref;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result.Combine(Self[i].ToTPA());
end;

procedure TRectArray.Extend(Arr:TRectArray);
var L:Int32;
begin
  if Length(Arr) > 0 then
  begin
    L := Length(Self);
    SetLength(Self, Length(Arr) + L);
    MemMove(Arr[0],Self[L],Length(Arr)*SizeOf(TRectangle));
  end;
end;

function TRectArray.Combine(Other: TRectArray): TRectArray; constref;
begin
  SetLength(Result, Length(Self) + Length(Other));
  if Length(self) > 0 then
    MemMove(self[0], result[0], Length(self)*SizeOf(self[0]));
  if Length(Other) > 0 then
    MemMove(Other[0], result[Length(Self)], Length(Other)*SizeOf(Other[0]));
end;


function TRectArray.ToATPA(): T2DPointArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += Self[i].ToTPA();
end;

//Joins any possible rectangles that are next to each other or within distance.
procedure TRectArray.Join(dist: Int32 = 1);
var
  tpa: TPointArray;
  atpa: T2DPointArray;
begin
  atpa := Self.ToTPA().Cluster(dist);
  Self := [];

  for tpa in atpa do
    Self += tpa.MinAreaRect();
end;

function TRectArray.GetCuboids(): TCuboidExArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += Self[i].GetCuboid();
end;

function TRectArray.GetCuboids(other: TRectArray): TCuboidExArray; overload;
var
  i: Int32;
begin
  if Length(Self) <> Length(other) then
    Exit;

  for i := 0 to High(Self) do
    Result += Self[i].GetCuboid(other[i]);
end;
