(*
# Mouse
Methods to interact with the mouse.
*)

{$DEFINE WL_MOUSE_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
## Mouse.Move
```pascal
procedure TMouse.Move(tpa: TPointArray; forcedMove: Boolean = False); overload;
```

Moves the mouse to a random point in a TPoint Array.

- **forcedMove** determines if the mouse should be moved if already in a point that is part of the tpa. By default this is **False**.

*)
procedure TMouse.Move(tpa: TPointArray; forcedMove: Boolean = False; center: Boolean = False); overload;
var
  p: TPoint;
begin
  if tpa = [] then
    Exit;

  if not forcedMove and tpa.Contains(Self.Position()) then
    Exit;

  if center then
    p := tpa.Mean()
  else
    p := tpa.RandomMean();

  Self.Move(p);
end;

procedure TMouse.Scroll(amount: Int32); overload;
begin
  Self.Scroll(Floor(Sqrt(Power(amount,2))), amount < 0);
end;

//by Flight
procedure TMouse.RandomMovement();
var
  cachedSpeed: Int32;
begin
  cachedSpeed := Self.Speed;

  Self.Speed := SRL.NormalRange(5, 9);
  Self.Move(Box(Mouse.Position(), 75, 75), True);

  Self.Speed := cachedSpeed;
end;

//by Flight
procedure TMouse.HumanMove(point: TPoint);
var
  mPt: TPoint;
  cachedSpeed: Int32;
  miss: Double;
  range: Int64;
begin
  cachedSpeed := Self.Speed;

  range := Trunc(Power(Self.Position().DistanceTo(point), 0.80)); // how much possible range to miss
  miss := SRL.SkewedRand(0.7, 0.1, 1.8); // Where miss will happen. 1 = destination (P).

  mPt.X := Trunc((1-miss) * Self.Position().X + miss * point.X);
  mPt.Y := Trunc((1-miss) * Self.Position().Y + miss * point.Y);

  mPt.X += SRL.NormalRange(-range, range);
  mPt.Y += SRL.NormalRange(-range, range);

  Self.Move(mPt);
  Self.Speed := round(cachedSpeed*0.70);
  Self.Move(point);

  Self.Speed := cachedSpeed;
end;

procedure TASyncMouse.Move(tpa: TPointArray; forcedMove: Boolean = False; center: Boolean = False; Accuracy: Double = 1); overload;
var
  p: TPoint;
begin
  if not forcedMove and tpa.Contains(Self.Position()) then
    Exit;

  if tpa = [] then
    Exit;

  if center then
    p := tpa.Mean()
  else
    p := tpa.RandomValue();

  Self.Move(p, Accuracy);
end;

