{$DEFINE WL_PIXELSHIFT_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

// Should add all this to SRL
// This are color specific GetPixelShift. Will only take into account pixelshifts involving the specified color.
// This is super useful for certain things and cab be used to pretty accurately decide if we are performing certain animations
// like swinging an axe or a pickaxe.
function TSRL.GetColorPixelShift(Color: TCTS0Color; Area: TBox; WaitTime: UInt32): Int32; overload;
var
  Before, After: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  MaxTime: UInt64;
begin
  MaxTime := GetTickCount + WaitTime;

  if WaitUntil(SRL.FindColors(TPA, Color, Area) > 0, 100, WaitTime) then
  begin
    ATPA := TPA.Cluster(2);
    TPA := ATPA.Biggest;
    Area := TPA.Bounds;
  end
  else
    Exit;

  Before := BitmapFromClient(Area);
  Wait(MaxTime - GetTickCount);
  After := BitmapFromClient(Area);
  Result := CalculatePixelShift(Before, After, [0, 0, (Area.X2 - Area.X1), (Area.Y2 - Area.Y1)]);
  FreeBitmap(Before);
  FreeBitmap(After);
end;

function TSRL.IsColorAnimating(Color: TCTS0Color; Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; overload;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetColorPixelShift(Color, Area, WaitTime) > shift) then
      Exit(True);
end;


function TSRL.GetColorPixelShift(Color: TCTS1Color; Area: TBox; WaitTime: UInt32): Int32; overload;
var
  Before, After: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  MaxTime: UInt64;
begin
  MaxTime := GetTickCount + WaitTime;

  if WaitUntil(SRL.FindColors(TPA, Color, Area) > 0, 100, WaitTime) then
  begin
    ATPA := TPA.Cluster(2);
    TPA := ATPA.Biggest;
    Area := TPA.Bounds;
  end
  else
    Exit;

  Before := BitmapFromClient(Area);
  Wait(MaxTime - GetTickCount);
  After := BitmapFromClient(Area);
  Result := CalculatePixelShift(Before, After, [0, 0, (Area.X2 - Area.X1), (Area.Y2 - Area.Y1)]);
  FreeBitmap(Before);
  FreeBitmap(After);
end;

function TSRL.IsColorAnimating(Color: TCTS1Color; Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; overload;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetColorPixelShift(Color, Area, WaitTime) > shift) then
      Exit(True);
end;


function TSRL.GetColorPixelShift(Color: TCTS2Color; Area: TBox; WaitTime: UInt32): Int32; overload;
var
  Before, After: Int32;
  TPA: TPointArray;
  ATPA: T2DPointArray;
  MaxTime: UInt64;
begin
  MaxTime := GetTickCount + WaitTime;

  if WaitUntil(SRL.FindColors(TPA, Color, Area) > 0, 100, WaitTime) then
  begin
    ATPA := TPA.Cluster(2);
    TPA := ATPA.Biggest;
    Area := TPA.Bounds;
  end
  else
    Exit;

  Before := BitmapFromClient(Area);
  Wait(MaxTime - GetTickCount);
  After := BitmapFromClient(Area);
  Result := CalculatePixelShift(Before, After, [0, 0, (Area.X2 - Area.X1), (Area.Y2 - Area.Y1)]);
  FreeBitmap(Before);
  FreeBitmap(After);
end;

function TSRL.IsColorAnimating(Color: TCTS2Color; Area:TBox; Shift, WaitTime:UInt32; Iter:UInt32=1): Boolean; overload;
var
  i:Int32;
begin
  for i:=1 to Iter do
    if (Self.GetColorPixelShift(Color, Area, WaitTime) > shift) then
      Exit(True);
end;


function TSRL.PercentShift(Area: TBox; WaitTime: Int32): Int32;
var
  tLen,sLen: Int32;
begin
  tLen := length(TPAFromBox(Area));
  sLen := SRL.GetPixelShift(Area, WaitTime);
  Result := Round((sLen/tLen)*100);
end;

