(*
# WorldHopper

Made by @Yolandi, modified by @Torwent.

World hopper is resposible for hopping worlds with the logged in world hopper in the logout tab.
*)
{$DEFINE YOLANDI_WORLDHOPPER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
(*
## type TRSWorldHopper
```pascal
type
  TRSWorldHopper = record(TRSInterface)
    SILVER, YELLOW: Int32;
    ReadyTime: UInt64;
  end;
```
WorldHopper record.
*)
  TRSWorldHopper = record(TRSInterface)
    SILVER, YELLOW: Int32;
    ServerMessageBox: TBox;
    Cooldown: TCountDown;
  end;

(*
## TRSWorldHopper.Setup
```pascal
procedure TRSWorldHopper.Setup(); override;
```
Internal method used to setup the WorldHopper.
*)
procedure TRSWorldHopper.Setup(); override;
begin
  inherited;

  Self.Name := 'WorldHopper';
  Self.SILVER := $E0E0E0;
  Self.YELLOW := $00F0F0;

  Self.Cooldown.Setup(8000);
end;

procedure TRSWorldHopper.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := GameTab.Bounds.X1 - 3;
  alignment.Right := GameTab.Bounds.X2 + 3;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;

  Self.SetupAlignment(alignment);

  Self.ServerMessageBox.X1 := MainScreen.Bounds.X1 + 4;
  Self.ServerMessageBox.Y1 := MainScreen.Bounds.Y1 + 4;
  Self.ServerMessageBox.X2 := Self.ServerMessageBox.X1 + 79;
  Self.ServerMessageBox.Y2 := Self.ServerMessageBox.Y1 + 20;

  Self.ScrollArea := Self.Bounds;
  Self.ScrollArea.Y1 += 35;
  Self.ScrollArea.Y2 -= 32;
end;

(*
## TRSWorldHopper.Scroll
```pascal
procedure TRSWorldHopper.Scroll(down: Boolean);
```
Scroll one page up or down of the world hopper.

Example:
```pascal
TRSWorldHopper.Scroll(True);
```
*)
procedure TRSWorldHopper.Scroll(down: Boolean; forceMove: Boolean = True);
var
  scrollBar: TRSScrollBar;
begin
  scrollBar := Self.GetScrollBar();
  if not scrollBar.IsVisible() or not Self.CanScroll() then
    Exit;

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if not WLSettings.GetObject('remote_input').getBoolean('block_real_input') then
    RSClient.RemoteInput.DisableRealInput();
  {$ENDIF}

  Mouse.Scroll(Self.GetScrollArea(scrollBar), Random(1, 3), down, forceMove);

  {$IFNDEF SRL_DISABLE_REMOTEINPUT}
  if not WLSettings.GetObject('remote_input').getBoolean('block_real_input') then
    RSClient.RemoteInput.EnableRealInput();
  {$ENDIF}
end;

(*
## TRSWorldHopper.ClickWorld
```pascal
procedure TRSWorldHopper.ClickWorld(ocrBounds: TBox);
```
Click a world in the world hopper.

Example:
```pascal
TRSWorldHopper.ReadWorlds(ocrBounds);
TRSWorldHopper.ClickWorld(ocrBounds[0]);
```
*)
procedure TRSWorldHopper.ClickWorld(ocrBounds: TBox);
begin
  ocrBounds.X1 := Self.Bounds.X1;
  ocrBounds.X2 := Self.Bounds.X2 - 16;
  Mouse.Click(ocrBounds, MOUSE_LEFT);
end;

(*
## TRSWorldHopper.GetCurrentWorld
```pascal
function TRSWorldHopper.GetCurrentWorld(): Int32;
```
Returns the current world we are on.

Example:
```pascal
WriteLn TRSWorldHopper.GetCurrentWorld();
```
*)
function TRSWorldHopper.GetCurrentWorld(): Int32;
var
  b: TBox;
begin
  b := Self.Bounds;
  b.Y2 := b.Y1 + 24;
  Result := OCR.RecognizeNumber(b, TOCRColorFilter.Create([$1F98FF]), RS_FONT_BOLD_12);
end;

(*
## TRSWorldHopper.ReadWorlds
```pascal
function TRSWorldHopper.ReadWorlds(out boxes: TBoxArray): TIntegerArray;
function TRSWorldHopper.ReadWorlds(): TIntegerArray;  overload;
```
Returns currently visible worlds.

Example:
```pascal
WriteLn TRSWorldHopper.ReadWorlds();
```
*)
function TRSWorldHopper.ReadWorlds(out boxes: TBoxArray): TIntegerArray;
var
  tpa: TPointArray;
  i, value, x2: Int32;
  tmp: TBoxArray;
begin
  boxes := [];
  if SRL.FindColors(tpa, [Self.SILVER, Self.YELLOW], Self.ScrollArea) = 0 then
    Exit;

  tmp := tpa.Cluster(5, 1).ToTBA();
  tmp.SortByY();

  x2 := Self.Bounds.X2 - 17;

  for i := 0 to High(tmp) do
  begin
    value := OCR.RecognizeNumber(
      tmp[i],
      TOCRColorFilter.Create([Self.SILVER, Self.YELLOW]),
      RS_FONT_PLAIN_12
    );

    if value = 0 then
      Continue;

    Result += value;
    tmp[i].X1 := Self.Bounds.X1;
    tmp[i].Y1 -= 1;
    tmp[i].X2 := x2;
    tmp[i].Y2 += 3;
    boxes += tmp[i];
  end;
end;

function TRSWorldHopper.ReadWorlds(): TIntegerArray;  overload;
var
  boxes: TBoxArray;
begin
  Result := Self.ReadWorlds(boxes);
end;


function TRSWorldHopper.SortWorlds(): Boolean;
var
  Arrow : TPointArray;
  Attempt : Int32;
  T : TCountdown;
begin
  if not Logout.IsWorldSwitcherOpen() then
    Exit;

  for Attempt := 0 to 3 do
  begin
    T.Init(250);
    repeat
      if SRL.FindColors(Arrow, CTS1(421059, 7), Self.Bounds) = 0 then
        Continue;

      if (Arrow.Mean() - Point(Self.Bounds.X1, Self.Bounds.Y1)) = Point(29, 30) then
        Exit(True);
    until T.IsFinished();

    Mouse.Click(Box(17, 25, 40, 34).Offset(Point(Self.Bounds.X1, Self.Bounds.Y1)), MOUSE_LEFT);
  end;
end;

(*
## TRSWorldHopper.WaitForHop
```pascal
function TRSWorldHopper.WaitForHop(world: Int32; ocrBounds: TBox; coolDownOnFail: Boolean=True): Boolean;
```
Exits false if "Please wait" not found, presumably due to combat.
*)
function TRSWorldHopper.WaitForHop(world: Int32; coolDownOnFail: Boolean = True): Boolean;
var
  filter: TOCRColorFilter;
begin
  Self.DebugLn("Hopping to " + ToStr(world) + "...");

  filter := TOCRColorFilter.Create([$FFFFFF]);
  if not WaitUntil(OCR.LocateText(Self.ServerMessageBox, 'Please wait', RS_FONT_PLAIN_12, filter, 1), 100, 2000) then
  begin
    Self.DebugLn('Hop failed: ' + Chat.GetMessage(7));

    if coolDownOnFail then
    begin
      Self.Cooldown.Restart(0, 7000);
      Self.DebugLn('Hop will be ready in ' + ToStr(Self.Cooldown.Length) + 'ms.');
    end;
    Exit;
  end;

  Result := WaitUntil(Self.GetCurrentWorld() = world, 200, 10000);

  if not Result then Self.DebugLn("Timed out");
end;

(*
## TRSWorldHopper.Hop
```pascal
function TRSWorldHopper.Hop(targetWorlds: TIntegerArray): Boolean;
```
Hops to a different world from the specified **targetWorlds**.

Example:
```pascal
WriteLn TRSWorldHopper.Hop([303, 304, 305]);
```
*)
function TRSWorldHopper.Hop(targetWorlds: TIntegerArray; doSorting: Boolean = True): Boolean;
var
  visible: TIntegerArray;
  boxes: TBoxArray;
  current, next, i: Int32;
  timeOut: TCountDown;
  moveMouse: Boolean;
begin
  if not Self.Cooldown.IsFinished() then Exit;
  if not Logout.Open() then Exit;

  if not Logout.IsWorldSwitcherOpen() then
    Logout.GetButton(ERSLogoutButton.WORLD_SWITCHER).Click(MOUSE_LEFT);
  WaitUntil((current := Self.GetCurrentWorld()) <> 0, 200, 12000);

  if doSorting and not Self.SortWorlds() then Exit;
  Self.DebugLn('Current world: ' + ToStr(current));

  if (targetWorlds.Len() = 1) and (current = targetWorlds[0]) then
    Exit(True);

  i := targetWorlds.Find(current);
  if i = High(targetWorlds) then
    i := -1;

  next := targetWorlds[i+1];
  Self.DebugLn('Next world: ' + ToStr(next));

  timeOut.Init(12000);
  moveMouse := True;

  repeat
    visible := Self.ReadWorlds(boxes);

    i := visible.Find(next);
    if i > -1 then
    begin
      Mouse.Click(boxes[i], MOUSE_LEFT, True);
      Exit(Self.WaitForHop(next))
    end;

    Self.Scroll(visible.Min() < next, moveMouse);
    moveMouse := False;
  until timeOut.IsFinished();

  Self.DebugLn('Timed out (timeOut=' + ToStr(timeOut) + 'ms)');
  targetWorlds.Remove(next);
end;

var
  WorldHopper: TRSWorldHopper;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  WorldHopper.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  WorldHopper.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  WorldHopper.Draw(bitmap);
end;
