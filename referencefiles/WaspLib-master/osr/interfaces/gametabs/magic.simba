(*
# Magic
Extends SRL's TRSMagic.
*)

{$DEFINE WL_MAGIC_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
## Magic.SpellWasCast
```pascal
function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;
```

Internal helper function to decide wether we cast a spell or not.
*)
function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean; override;
begin
  Result := inherited() or XPBar.EarnedXP();
end;

(*
## Magic.CastSpell
```pascal
function TRSMagic.CastSpell(spell: ERSSpell): Boolean; override;
```

Overrides the existing SRL TRSMagic.CastSpell() for better cast detection with
the usage of WaspLib's TRSMagic.SpellWasCast().
*)
function TRSMagic.CastSpell(spell: ERSSpell; option: String = ''): Boolean; override;
begin
  XPBar.EarnedXP();
  Result := inherited;
end;


(*
## Magic.GetFilterButton
```pascal
function TRSMagic.GetFilterButton(): TRSButton;
```
Returns the filter button in the magic tab.

Example:
```pascal
Debug([Magic.GetFilterButton()]);
```
*)
function TRSMagic.GetFilterButton(): TRSButton;
begin
  Result.Bounds := Self.Bounds;
  Result.Bounds.Y1 := Result.Bounds.Y2 - 16;
  Result.Bounds.X1 += 69;
  Result.Bounds.X2 -= 69;

  Result.Index := 0;
  Result.Middle := Result.Bounds.Center();
  Result.EnabledColors := Self.ButtonEnabledColors;
end;

(*
## Magic.FiltersIsOpen
```pascal
function TRSMagic.FiltersIsOpen(): Boolean;
```

Returns true/false if the filters interface of the magic tab is open.

Example:
```pascal
WriteLn Magic.FiltersIsOpen();
```
*)
function TRSMagic.FiltersIsOpen(): Boolean;
begin
  Result := Self.GetFilterButton().Enabled();
end;

(*
## Magic.OpenFilters
```pascal
function TRSMagic.OpenFilters(): Boolean;
```

Attempts to open the filters interface of the magic tab.
Returns true on success.

Example:
```pascal
WriteLn Magic.OpenFilters();
```
*)
function TRSMagic.OpenFilters(): Boolean;
begin
  Result := Self.GetFilterButton().Enable();
end;

(*
## Magic.CloseFilters
```pascal
function TRSMagic.CloseFilters(): Boolean;
```

Attempts to close the filters interface of the magic tab.
Returns true on success.

Example:
```pascal
WriteLn Magic.CloseFilters();
```
*)
function TRSMagic.CloseFilters(): Boolean;
begin
  if Self.GetFilterButton().Disable() then
    Result := WaitUntil(not Self.FiltersIsOpen(), 300, 3000);
end;


(*
## Magic.GetBookSpellCount
```pascal
function TRSMagic.GetBookSpellCount(): Int32;
```

Returns the number of spells declared in SRL for the current spellbook.

Example:
```pascal
WriteLn Magic.GetBookSpellCount();
```
*)
function TRSMagic.GetBookSpellCount(): Int32;
begin
  case Self.GetSpellBook() of
    ERSSpellBook.STANDARD: Result := Ord(RS_STANDARD_SPELL_LAST) - Ord(RS_STANDARD_SPELL_FIRST);
    ERSSpellBook.ARCEUUS:  Result := Ord(RS_ARCEUUS_SPELL_LAST) - Ord(RS_ARCEUUS_SPELL_FIRST);
    ERSSpellBook.LUNAR:    Result := Ord(RS_LUNAR_SPELL_LAST) - Ord(RS_LUNAR_SPELL_FIRST);
    ERSSpellBook.ANCIENT:  Result := Ord(RS_ANCIENT_SPELL_LAST) - Ord(RS_ANCIENT_SPELL_FIRST);
  end;

  Result += 1;
end;

(*
## Magic.CountSpells
```pascal
function TRSMagic.CountSpells(): Int32;
```

Returns the number of spells that exist in your magic tab.

Example:
```pascal
WriteLn Magic.CountSpells();
if Magic.GetBookSpellCount() <> Magic.CountSpells() then
  WriteLn 'Something is wrong!';
```
*)
function TRSMagic.CountSpells(): Int32;
var
  tpa, finalTPA: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
begin
  b := Self.Bounds;
  b.Y2 -= 17;

  SRL.FindColors(tpa, CTS2(1574932, 7, 3.33, 7.97), b);
  finalTPA += tpa;

  SRL.FindColors(tpa, CTS1(3033426, 1), b);
  finalTPA += tpa;

  SRL.FindColors(tpa, CTS1(1509900, 28), b);
  finalTPA += tpa;

  atpa := finalTPA.Cluster(3);
  atpa.FilterSize(8, __GT__);

  Result := Length(atpa);
end;

(*
## Magic.GetFilterButtons
```pascal
function TRSMagic.GetFilterButtons(): TRSButtonArray;
```

Returns the buttons of the magic tab filter interface.

Example:
```pascal
Debug(Magic.GetFilterButtons());
```
*)
function TRSMagic.GetFilterButtons(): TRSButtonArray;
var
  i: Int32;
  b: TBox;
  tba: TBoxArray;
begin
  if not Self.FiltersIsOpen() then
    Exit;

  b := Self.Bounds;

  tba := Grid(1, 7, 179, 24, [0, 1], [b.X1+2, b.Y1 + 45]);

  SetLength(Result, Length(tba));

  for i := 0 to High(tba) do
  begin
    Result[i].Index := i;
    Result[i].Bounds := tba[i];
    Result[i].Middle := tba[i].Center();
    Result[i].EnabledColors := [CTS1(5284953, 57)];
  end;
end;

(*
## Magic.IsFiltered
```pascal
function TRSMagic.IsFiltered(): Boolean;
```

Returns wether the spells are currently filtered or not.
Can work with the filter interface open or closed as long as the magic tab is open.

Example:
```pascal
WriteLn Magic.IsFiltered();
```
*)
function TRSMagic.IsFiltered(): Boolean;
begin
  if Self.FiltersIsOpen() then
    Exit(SRL.CountColor(CTS2(5945703, 20, 0.05, 0.58), Self.Bounds) <> 259);

  Result := Self.CountSpells() <> Self.GetBookSpellCount();
end;

(*
## Magic.DisableFilters
```pascal
function TRSMagic.DisableFilters(): Boolean;
```

Attempts to disable magic spell filters.

Example:
```pascal
WriteLn Magic.DisableFilters();
```
*)
function TRSMagic.DisableFilters(): Boolean;
var
  button: TRSButton;
begin
  if not Self.IsFiltered() then
    Exit(True);

  if not Self.OpenFilters() then
    Exit;

  for button in Self.GetFilterButtons() do
  begin
    if not button.Enabled() then
    begin
      if button.Enable() then
        WaitUntil(button.Enabled(), 300, 4000); //the buttons are quite slow to update...
    end;
  end;

  Self.CloseFilters();

  Result := not Self.IsFiltered();
end;
