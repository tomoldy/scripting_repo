{$DEFINE WL_OPTIONS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  ERSOptionsDropDown = (PLAYER_ATTACK_OPTIONS, NPC_ATTACK_OPTIONS, CLIENT_MODE);

  ERSAttackOption = (
    DEPENDS_ON_COMBAT, ALWAYS_LEFT_CLICK, ALWAYS_RIGHT_CLICK,
    HIDDEN, RIGHT_CLICK_CLAN
  );
  
function TRSOptions.LeaveHouse(): Boolean;
var
  b: TBox;
begin
  if not Self.OpenHouseOptions() then Exit;

  b.X1 := Self.Bounds.X1 + 9;
  b.Y1 := Self.Bounds.Y1 + 214;
  b.X2 := Self.Bounds.X2 - 9;
  b.Y2 := Self.Bounds.Y2 - 21;

  Mouse.Click(b, MOUSE_LEFT);
  Result := WaitUntil(not Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 5000);
end;

function TRSOptions.CallServant(): Boolean;
  function _TalkingToServant(): Boolean;
  var
    s: String;
  begin
    s := Chat.GetChatTitle();
    Result := ('utler' in s) or ('Repeat' in s);
  end;
var
  b: TBox;
begin
  if not Self.OpenHouseOptions() then Exit;

  b.X1 := Self.Bounds.X1 + 9;
  b.Y1 := Self.Bounds.Y1 + 185;
  b.X2 := Self.Bounds.X2 - 9;
  b.Y2 := Self.Bounds.Y2 - 50;

  Mouse.Click(b, MOUSE_LEFT);
  Result := WaitUntil(_TalkingToServant(), SRL.TruncatedGauss(50, 1500), 5000);
end;


function TRSOptions.GetDropDowns(): TRSDropDownArray;
begin
  Result := Self.FindDropDown([[160, 18]]);
end;

function TRSOptions.GetDropDown(DropDown: ERSOptionsDropDown): TRSDropDown;
var
  CurrentTab: ERSOptionsTab := Self.GetCurrentTab;
  DropDowns: TRSDropDownArray;
begin
  if ((CurrentTab = ERSOptionsTab.CONTROLS) and
      (DropDown = ERSOptionsDropDown.CLIENT_MODE)) or
     ((CurrentTab = ERSOptionsTab.DISPLAY) and
      (DropDown <> ERSOptionsDropDown.CLIENT_MODE)) then
    Exit;

  DropDowns := Self.GetDropDowns;

  if DropDowns <> [] then
    case DropDown of
      ERSOptionsDropDown.PLAYER_ATTACK_OPTIONS:
        Result := DropDowns[Low(DropDowns)];
      ERSOptionsDropDown.NPC_ATTACK_OPTIONS:
        Result := DropDowns[High(DropDowns)];
      ERSOptionsDropDown.CLIENT_MODE:
        Result := DropDowns[Low(DropDowns)];
    end;
end;


function TRSOptions.GetAttackOption(DropDown: ERSOptionsDropDown): ERSAttackOption;
var
  attOptionStr: String;
begin
  if not Self.Open() or not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit;

  attOptionStr := LowerCase(Self.GetDropDown(DropDown).GetText());

  if 'depends' in attOptionStr then
    Exit(ERSAttackOption.DEPENDS_ON_COMBAT)
  else if 'left' in attOptionStr then
    Exit(ERSAttackOption.ALWAYS_LEFT_CLICK)
  else if 'right' in attOptionStr then
    Exit(ERSAttackOption.ALWAYS_RIGHT_CLICK)
  else if 'hidden' in attOptionStr then
    Exit(ERSAttackOption.HIDDEN)
  else if 'clan' in attOptionStr then
    Exit(ERSAttackOption.RIGHT_CLICK_CLAN);
end;

function TRSOptions.GetPlayerAttackOption(): ERSAttackOption;
begin
  Result := Self.GetAttackOption(ERSOptionsDropDown.PLAYER_ATTACK_OPTIONS);
end;

function TRSOptions.GetNPCAttackOption(): ERSAttackOption;
begin
  Result := Self.GetAttackOption(ERSOptionsDropDown.NPC_ATTACK_OPTIONS);
end;


function TRSOptions.SetAttackOption(DropDown: ERSOptionsDropDown; Option: ERSAttackOption): Boolean;
var
  strs: TStringArray;
begin
  if not Self.Open() or not Self.OpenTab(ERSOptionsTab.CONTROLS) then
    Exit;

  if Self.GetAttackOption(DropDown) = Option then
    Exit(True);

  strs := ['depends', 'left', 'right', 'hidden', 'clan'];

  Result := Self.GetDropDown(DropDown).Select(strs[Ord(Option)], MOUSE_LEFT, False);
end;

function TRSOptions.SetPlayerAttackOption(Option: ERSAttackOption): Boolean;
begin
  Result := Self.SetAttackOption(ERSOptionsDropDown.PLAYER_ATTACK_OPTIONS, Option);
end;

function TRSOptions.SetNPCAttackOption(Option: ERSAttackOption): Boolean;
begin
  Result := Self.SetAttackOption(ERSOptionsDropDown.NPC_ATTACK_OPTIONS, Option);
end;



procedure TRSOptions.RenderSelf();
begin
  if SRL.CountColor(CHAT_COLOR_BLUE, Chat.LineBoxes[CHAT_INPUT_LINE]) > 14 then
    Keyboard.PressKey(VK_ENTER);
  Keyboard.Send('::renderself', VK_ENTER);
end;

procedure TRSOptions.ToggleRoofs();
begin
  Keyboard.Send('::toggleroofs', VK_ENTER);
end;


function TRSOptions.GetRoofsState(): Boolean;
begin
  Result := RSCacheParser.RoofsHidden();
end;

function TRSOptions.HideRoofs(): Boolean; override;
begin
  if RSCacheParser.Disabled then
    Exit(True);

  if Self.GetRoofsState() then
    Exit(True);

  Self.DebugLn('Roofs are enabled! They are going to be temporarily disabled but you should consider permanently disable them in the game settings!');
  Self.DebugLn('Temporarily disabling the roofs often can get you banned!');

  if SRL.CountColor(CHAT_COLOR_BLUE, Chat.LineBoxes[CHAT_INPUT_LINE]) > 14 then
    Keyboard.PressKey(VK_ENTER); //Clear input line.

  Keyboard.Send('::toggleroofs', VK_ENTER);
  Result := True;

  if not Self.GetRoofsState() then
    RSCacheParser.Disabled := True;
end;


function TRSOptions.ShowRoofs(): Boolean;
begin
  if RSCacheParser.Disabled then
    Exit(True);

  if not Self.GetRoofsState() then
    Exit(True);

  if SRL.CountColor(CHAT_COLOR_BLUE, Chat.LineBoxes[CHAT_INPUT_LINE]) > 14 then
    Keyboard.PressKey(VK_ENTER); //Clear input line.

  Keyboard.Send('::toggleroofs', VK_ENTER);
  Result := True;

  if Self.GetRoofsState() then
    RSCacheParser.Disabled := True;
end;

function TRSOptions.GetBrightness(): Int32;
begin
  if RSCacheParser.Disabled then
    Exit(Options.GetBrightnessLevel());

  Result := RSCacheParser.Brightness();

  if Options.IsOpen() and (Options.GetCurrentTab() = ERSOptionsTab.DISPLAY) then
  begin
    if Options.GetBrightnessLevel() <> Result then
    begin
      Result := Options.GetBrightnessLevel();
      RSCacheParser.Disabled := True;
    end;
  end;
end;

function TRSOptions.SetMaxBrightness(): Boolean; override;
begin
  if Self.GetBrightness() = 100 then Exit(True);
  if not Self.OpenTab(ERSOptionsTab.DISPLAY) then Exit;

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS] do
    Mouse.Click(X2 + Random(3, 5), Random(Y1, Y2), MOUSE_LEFT);

  Result := Self.GetBrightness() = 100;
end;


procedure TRSOptions.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen then
    Exit;

  inherited;

  Bitmap.DrawDropDowns(Self.GetDropDowns);
end;
