{$DEFINE SRL_MM2MS_PROJECTOR_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL/osr.simba}
{$ENDIF}

type
  TMM2MSProjector = record
    // zoom constants that change between fixed & resizable
    Y_LOOK: Single;
    SCALE_MIN, SCALE_MAX: Single;

    // Zoom level to project at
    ZoomLevel: Int32;

    // boundaries needed for projection
    Minimap: TBox;
    MainScreen: TBox;

    // projection variables, only calculated once.
    Calculated: Boolean;
    Zoom: Single;
    ScaleMin, ScaleMax: Single;
    ViewMatrix, ProjMatrix, WorldMatrix, TransMatrix: TMatrix4;
  end;

const
  MM2MS_PROJECTOR_FIXED: TMM2MSProjector = [
    -28,                 // Y_LOOK
    0.83, 6.32,          // SCALE_MIN, SCALE_MAX
    50,                  // ZOOM_LEVEL
    [569, 8, 714, 159],  // MINIMAP BOUNDS
    [4, 4, 515, 337]     // MAINSCREEN BOUNDS
  ];

const
  MM2MS_PROJECTOR_RESIZABLE: TMM2MSProjector = [
    -21,               // Y_LOOK
    0.635, 4.90,       // SCALE_MIN, SCALE_MAX
    50,                // ZOOM_LEVEL
    [],                // MINIMAP (dynamic)
    []                 // MAINSCREEN (dynamic)
  ]; 

function TMM2MSProjector.Transform(coord: Vector3; matrix: TMatrix4): Vector3;
var
  p: Vector3;
  scale: Double;
begin
  scale := ScaleMin + ZOOM * (ScaleMax - ScaleMin);
  p := Vector3.TransformCoordinate(coord, matrix);
  Result.x := (+p.X * 513 * scale) + MainScreen.Middle.X;                // fixed mainscreen width
  Result.y := (-p.Y * 335 * scale) + MainScreen.Middle.Y + (zoom * 24);  // fixed mainscreen height, y shift
end;

function TMM2MSProjector.Run(Coords: Vector3Array; Rotation: Vector3): TPointArray; overload;
const
  ZoomLevelToRSZoom = [0.0000, 0.0025, 0.0065, 0.0100, 0.0130, 0.0165, 0.0205, 0.0235, 0.0280, 0.0310, 0.0350, 0.0390, 0.0430, 0.0430, 0.0465, 0.0515, 0.0555, 0.0605, 0.0645, 0.0690, 0.0740, 0.0785, 0.0835, 0.0885, 0.0935, 0.0990, 0.1045, 0.1095, 0.1150, 0.1205, 0.1260, 0.1325, 0.1385, 0.1455, 0.1505, 0.1585, 0.1635, 0.1635, 0.1705, 0.1775, 0.1845, 0.1925, 0.1995, 0.2055, 0.2145, 0.2215, 0.2305, 0.2365, 0.2465, 0.2545, 0.2635, 0.2725, 0.2825, 0.2905, 0.3005, 0.3105, 0.3195, 0.3285, 0.3405, 0.3555, 0.3615, 0.3705, 0.3825, 0.3825, 0.3945, 0.4065, 0.4185, 0.4305, 0.4425, 0.4575, 0.4695, 0.4815, 0.4965, 0.5115, 0.5265, 0.5385, 0.5535, 0.5685, 0.5835, 0.5985, 0.6165, 0.6315, 0.6495, 0.6645, 0.6825, 0.7035, 0.7215, 0.7215, 0.7395, 0.7575, 0.7815, 0.7995, 0.8175, 0.8355, 0.8595, 0.8835, 0.9015, 0.9255, 0.9495, 0.9735, 1.000];
var
  I: Int32;
begin
  if not Calculated then
  begin
    Zoom := ZoomLevelToRSZoom[Self.ZoomLevel];
    ScaleMin := Self.SCALE_MIN * MainScreen.Height / 503; // fixed client height
    ScaleMax := Self.SCALE_MAX * MainScreen.Height / 503; // fixed client height

    ViewMatrix := TMatrix4.LookAtRH([0, Self.Y_LOOK, 61], [0, 0, 1.0], Vector3_UnitY);
    ProjMatrix := TMatrix4.PerspectiveFovRH(Sqrt(2), 765 / 503, 0.01, 1.0);           // fixed client width & height

    WorldMatrix := TMatrix4.RotationYawPitchRoll(Rotation.Y, Rotation.X, Rotation.Z) * Matrix_Identity;
    TransMatrix := WorldMatrix * ViewMatrix * ProjMatrix;

    Calculated := True;
  end;

  SetLength(Result, Length(Coords));

  for I := 0 to High(Coords) do
    with Self.Transform(Coords[I], Self.TransMatrix) do
    begin
      Result[I].X := Round(X);
      Result[I].Y := Round(Y);
    end;
end;

function TMM2MSProjector.Run(Coord: Vector3; Rotation: Vector3): TPoint; overload;
begin
  Result := Run([Coord], Rotation)[0];
end;
