// Full fletching script, Antiban, Breaks, Sleeps.
// Scroll down to first begin..end to configure.

{$DEFINE SRL_USE_REMOTEINPUT}

{$I SRL/osr.simba}

type
  EFletchItem = (
    FLETCH_ARROW_SHAFTS,
    FLETCH_OAK_LONGBOW_UNSTRUNG,
    FLETCH_WILLOW_SHORTBOW_UNSTRUNG,
    FLETCH_WILLOW_LONGBOW_UNSTRUNG,
    FLETCH_MAPLE_LONGBOW_UNSTRUNG,
    FLETCH_YEW_LONGBOW_UNSTRUNG,
    FLETCH_YEW_LONGBOW
  );

  TScriptConfig = record
    Bank: ERSBankLocation;

    Tasks: array of record
      Item: EFletchItem;
      Amount: Int32;
    end;

    User: String;
    Pass: String;
    Pin: String;
  end;

var
  Config: TScriptConfig;

begin
  Config.Bank := BANK_LOCATION_GRAND_EXCHANGE;

  Config.User := '';
  Config.Pass := '';
  Config.Pin := '';

  // Config.Tasks += [FLETCH_YEW_LONGBOW, 100];
  Config.Tasks += [FLETCH_MAPLE_LONGBOW_UNSTRUNG, 50000];
end;

// Alternatively you can above in a file
{$IFHASFILE ../../../credentials.simba}
  {$I ../../../credentials.simba}
{$ENDIF}

type
  TScript = record
    Config: TScriptConfig;

    HighestPitch: Boolean;
    TaskChanged: Boolean;
    EarlyBank: Int32;

    Activity: record
      Countdown: TCountdown;
      XP: Int32;
    end;

    Task: record
      FinishXP: Int32;
      Tool: String;
      Item: String;
      ItemXP: Single;
      Materials: array of record
        Item: String; Amount: Int32;
      end;
    end;
  end;

function TScript.DoAntiban: Boolean;
begin
  Self.Activity.Countdown.Pause();

  try
    Result := Antiban.DoAntiban();
  finally
    Self.Activity.Countdown.Resume();
  end;
end;

procedure TScript.Antiban_HoverBank;
begin
  Antiban.Debug('Hover bank');

  BankScreen.Hover(Self.Config.Bank, SRL.Dice(50));
end;

procedure TScript.Antiban_EarlyBank;
begin
  Self.EarlyBank := SRL.TruncatedGauss(Self.Task.Materials[0].Amount, 1);

  Antiban.Debug('Early bank: ' + ToString(Self.EarlyBank));
end;

procedure TScript.Antiban_Randomness;
begin
  case Random(5) of
    0: Antiban.RandomRotate();
    1: Antiban.RandomTab();
    2: Antiban.HoverSkills();
    3: Antiban.SmallRandomMouse();
    4: Antiban.AdjustZoom();
  end;
end;

procedure TScript.NextTask;
begin
  if BankScreen.IsOpen() then
    BankScreen.Close();

  if (XPBar.Read() >= Self.Task.FinishXP) then
  begin
    Self.Debug('Switching tasks');
    Self.TaskChanged := True;

    if Self.Task <> [] then
    begin
      if Length(Self.Config.Tasks) = 1 then
        Self.Fatal('Tasks completed');

      Self.Config.Tasks := Copy(Self.Config.Tasks, 1);
    end;

    case Self.Config.Tasks[0].Item of
      FLETCH_ARROW_SHAFTS:
        begin
          Self.Task.ItemXP := 5;
          Self.Task.Item := 'arrow shaft';
          Self.Task.Materials := [
            ['Logs', BANK_WITHDRAW_ALL]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_OAK_LONGBOW_UNSTRUNG:
        begin
          Self.Task.ItemXP := 25;
          Self.Task.Item := 'Oak longbow (u)';
          Self.Task.Materials := [
            ['Oak Logs', 27]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_WILLOW_SHORTBOW_UNSTRUNG:
        begin
          Self.Task.ItemXP := 33;
          Self.Task.Item := 'Willow shortbow (u)';
          Self.Task.Materials := [
            ['Willow Logs', 27]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_WILLOW_LONGBOW_UNSTRUNG:
        begin
          Self.Task.ItemXP := 41.5;
          Self.Task.Item := 'Willow longbow (u)';
          Self.Task.Materials := [
            ['Willow Logs', 27]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_MAPLE_LONGBOW_UNSTRUNG:
        begin
          Self.Task.ItemXP := 58.5;
          Self.Task.Item := 'Maple longbow (u)';
          Self.Task.Materials := [
            ['Maple Logs', 27]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_YEW_LONGBOW_UNSTRUNG:
        begin
          Self.Task.ItemXP := 75;
          Self.Task.Item := 'Yew longbow (u)';
          Self.Task.Materials := [
            ['Yew Logs', 27]
          ];
          Self.Task.Tool := 'knife';
        end;

      FLETCH_YEW_LONGBOW:
        begin
          Self.Task.ItemXP := 75;
          Self.Task.Item := 'Yew longbow';
          Self.Task.Materials := [
            ['Yew longbow (u)', 14],
            ['Bow string', 14]
          ];
          Self.Task.Tool := '';
        end;
    end;

    Self.Task.FinishXP := XPBar.Read() + (Floor(Self.Task.ItemXP) * Self.Config.Tasks[0].Amount);

    Self.Debug('New task: ' + Self.Task.Item + ' x ' + ToString(Self.Config.Tasks[0].Amount));
    Self.Debug('Task finish: ' + ToString(Self.Task.FinishXP));
  end;
end;

procedure TScript.Setup(constref Config: TScriptConfig);
begin
  Self.Config := Config;

  ItemFinder.AddItemName('arrow shaft', '6443');

  Mouse.IdleInterval := 12.5;

  Antiban.Skills := [SKILL_FLETCHING];
  Antiban.MinZoom := 0;
  Antiban.MaxZoom := 75;

  Antiban.AddSleep('04:00', 6 * ONE_HOUR);

  Antiban.AddBreak(30  * ONE_MINUTE,  5  * ONE_MINUTE, 0.30, 0.10);
  Antiban.AddBreak(45  * ONE_MINUTE,  1  * ONE_MINUTE, 0.30, 0.10);
  Antiban.AddBreak(60  * ONE_MINUTE,  5  * ONE_MINUTE, 0.30, 0.10);
  Antiban.AddBreak(120 * ONE_MINUTE,  20 * ONE_MINUTE, 0.30);

  Antiban.AddTask(10 * ONE_MINUTE, @Antiban.LoseFocus);
  Antiban.AddTask(20 * ONE_MINUTE, @Antiban.LoseFocus);

  Antiban.AddTask(10 * ONE_MINUTE, @Self.Antiban_EarlyBank);
  Antiban.AddTask(30 * ONE_MINUTE, @Self.Antiban_EarlyBank);

  Antiban.AddTask(10 * ONE_MINUTE, @Self.Antiban_HoverBank);
  Antiban.AddTask(30 * ONE_MINUTE, @Self.Antiban_HoverBank);

  Antiban.AddTask(20 * ONE_MINUTE, @Self.Antiban_Randomness);
  Antiban.AddTask(40 * ONE_MINUTE, @Self.Antiban_Randomness);

  Activity.Countdown.Init(90000);

  if RSClient.IsLoggedIn() then
    Players[CurrentPlayer].LoggedIn();
end;

procedure TScript.Debug(S: String);
begin
  WriteLn(SRL.TimeStamp() + ':[Script]: ' + S);
end;

procedure TScript.Fatal(S: String);
begin
  Self.Debug(S);

  TerminateScript();
end;

function TScript.CheckActivity: Boolean;
begin
  if Result := XPBar.Read() > Activity.XP then
  begin
    Activity.Countdown.Restart();
    Activity.XP := XPBar.Read();
  end;

  if Activity.Countdown.IsFinished() then
    Self.Fatal('Haven''t gained any experience in ' + ToString(Activity.Countdown.Length div 1000) + ' seconds');
end;

function TScript.CountMaterials: Int32;
var
  I: Int32;
  Amounts: TIntegerArray;
begin
  for I := 0 to High(Self.Task.Materials) do
    Amounts += Inventory.Count(Self.Task.Materials[I].Item);

  Result := Amounts.Min();
end;

function TScript.HasMaterials: Boolean; overload;
begin
  Result := CountMaterials() > 0;
end;

function TScript.HasMaterials(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.HasMaterials(), Interval, WaitTime);
end;

function TScript.HasMaterialsInBank: Boolean;
var
  I: Int32;
begin
  Result := True;

  for I := 0 to High(Self.Task.Materials) do
    if (BankScreen.CountStack(Self.Task.Materials[I].Item) < Self.Task.Materials[I].Amount) and BankScreen.IsOpen() then
      Result := False;
end;

function TScript.Bank: Boolean;
var
  I: Int32;
begin
  if (Self.EarlyBank = 0) and Self.HasMaterials() then
  begin
    Result := BankScreen.Close();
    if not Result then
      Self.Debug('Failed to close bankscreen. (already had materials)');

    Exit;
  end;

  if not BankScreen.Open(Self.Config.Bank) then
  begin
    Self.Debug('Failed to open bank');

    Exit;
  end;

  if Self.TaskChanged and (not BankScreen.DepositAll()) then
  begin
    Self.Debug('Failed to deposit all after task change');

    Exit;
  end;

  if (Inventory.Count(Self.Task.Item) > 0) and (not BankScreen.DepositQuantity(Self.Task.Item, Self.Task.Materials[0].Amount)) then
  begin
    Self.Debug('Failed to deposit current item');

    Exit;
  end;

  if (Self.Task.Tool <> '') and (Inventory.Count(Self.Task.Tool) = 0) then
  begin
    BankScreen.DepositAll();

    if (not BankScreen.Search(Self.Task.Tool)) and (not BankScreen.Withdraw(Self.Task.Tool, 1, False)) then
    begin
      Self.Fatal('Failed to withdraw tool');

      Exit;
    end;
  end;

  if not BankScreen.Search('') then
  begin
    Self.Debug('Unable to clear search');

    Exit;
  end;

  for I := 0 to High(Self.Task.Materials) do
  begin
    if not BankScreen.WithdrawQuantity(Self.Task.Materials[I].Item, Self.Task.Materials[I].Amount, False) then
    begin
      Self.Debug('Failed to withdraw: ' + Self.Task.Materials[I].Item);

      Break;
    end;

    Wait(0, 2500, wdLeft);
  end;

  if not Self.HasMaterials(3500) then
  begin
    if not Self.HasMaterialsInBank() then
      Self.Fatal('Out of materials')
    else
      Self.Debug('Failed to withdraw materials');

    BankScreen.DepositAll(); // Clean attempt next time

    Exit;
  end;

  if not BankScreen.Close() then
  begin
    Self.Debug('Failed to close bankscreen');

    Exit;
  end;

  Self.EarlyBank := 0;
  Self.TaskChanged := False;

  Result := True;
end;

function TScript.Fletch: Boolean;
var
  Materials, TargetXP, HoverXP: Int32;
  Timeout: TCountDown;
begin
  Materials := Self.CountMaterials();
  if (Self.EarlyBank > 0) then
    Materials := Self.EarlyBank;

  TargetXP := XPBar.Read() + Round(Materials * Floor(Self.Task.ItemXP));
  if SRL.Dice(20) then
    HoverXP := TargetXP - (Floor(Self.Task.ItemXP) * SRL.TruncatedGauss(1, 6));

  if not ((Self.Task.Tool <> '') and Inventory.Use(Self.Task.Tool, Self.Task.Materials[0].Item)) and
     not ((Self.Task.Tool = '')  and Inventory.Use(Self.Task.Materials[0].Item, Self.Task.Materials[1].Item)) then
  begin
    Self.Debug('Failed to use material');

    Exit;
  end;

  if not Chatbox.IsMakeOpen(Random(3000, 6000)) then
  begin
    Self.Debug('Make interface did not open');

    Exit;
  end;

  if not Chatbox.ClickMakeButton(Self.task.Item.Replace('(u)', '').Strip(), 'All') then
  begin
    Self.Debug('Failed to handle make interface');

    Exit;
  end;

  if SRL.Dice(50) then
    Antiban.LoseFocus();

  Antiban.ResumeTask(@Self.Antiban_HoverBank);

  Timeout.Init(5000);

  repeat
    Self.DoAntiban();

    Wait(1000, 10000, wdLeft);

    if (HoverXP > 0) and (XPBar.Read() >= HoverXP) then
    begin
      BankScreen.Hover(Self.Config.Bank, SRL.Dice(80));

      HoverXP := 0;
    end;

    if Self.CheckActivity() then
      Timeout.Restart();
  until Timeout.IsFinished() or Chatbox.HasLevelUp() or (XPBar.Read() >= TargetXP);

  Result := not Timeout.IsFinished();
  if not Result then
    Self.Debug('Timed out while fletching: ' + ToString(XPBar.Read()) + ', ' + ToString(TargetXP));
end;

procedure TScript.Run;
var
  I: Int32;
begin
  while True do
  begin
    if not RSClient.IsLoggedIn() and (not Players[CurrentPlayer].Login) then
      Self.Fatal('Failed to login player');

    Self.NextTask();

    // Randomize material order each loop
    for I := 0 to High(Self.Task.Materials) do
      Swap(Self.Task.Materials[I], Self.Task.Materials[Random(Length(Self.Task.Materials))]);

    Self.CheckActivity();
    if (not Self.Bank()) or (not Self.Fletch()) then
      Wait(1000, 2000);
  end;
end;

var
  Script: TScript;

procedure TRSPlayer.LoggedIn; override;
begin
  Script.Activity.Countdown.Restart();

  if not Script.HighestPitch then
  begin
    Script.HighestPitch := True;

    MainScreen.SetHighestPitch();
  end;
end;

// ANTIBAN: 5% chance of deposit normally
function TRSBankScreen.DepositQuantity(Item: String; Amount: Int32): Boolean; override;
begin
  if SRL.Dice(5) then
    Result := Self.Deposit(Item, Amount)
  else
    Result := inherited();
end;

// ANTIBAN: 5% chance of withdrawing normally
function TRSBankScreen.WithdrawQuantity(Item: String; Amount: Int32; Noted: Boolean): Boolean; override;
begin
  if SRL.Dice(5) then
    Result := Self.Withdraw(Item, Amount, Noted)
  else
    Result := inherited();
end;

// ANTIBAN: 25% chance of losing focus when idling
procedure TMouse.Idle; override;
begin
  if SRL.Dice(25) then
    Antiban.LoseFocus();

  inherited();
end;

// ANTIBAN: Check antiban before mouse move
procedure TMouse.Move(P: TPoint); override;
begin
  Script.DoAntiban();

  inherited(P);
end;

// ANTIBAN: 10% chance of clicking the close button
function TRSBankScreen.Close(UseKeyboard: Boolean = False): Boolean; override;
begin
  UseKeyboard := SRL.Dice(90);

  Result := inherited();
end;

// ANTIBAN: 10% chance of clicking make
function TRSChatBox.ClickMakeButton(Item: String; Quantity: String; UseKeyboard: Boolean = False): Boolean; override;
begin
  UseKeyboard := SRL.Dice(90);
  if UseKeyboard then
    Wait(0, 1500, wdLeft);

  Result := inherited();
end;

begin
  Players.Add(Config.User, Config.Pass, Config.Pin);

  Script.Setup(Config);
  Script.Run();
end.

