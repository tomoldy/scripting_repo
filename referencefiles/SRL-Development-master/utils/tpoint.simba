{$DEFINE SRL_TPOINT_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL/utils.simba}
{$ENDIF}

(*
TPoint
=============
TPoint related methods
*)

function TPoint.InRect(Rect: TRectangle): Boolean; constref;
begin
  Result := SRL.PointInTriangle(Self, Rect.Top, Rect.Btm, Rect.Right) or
            SRL.PointInTriangle(Self, Rect.Top, Rect.Left, Rect.Btm);
end;

function TPoint.InBox(Box: TBox): Boolean; constref;
begin
  Result := PointInBox(Self, Box);
end;

function TPoint.InCircle(Circle: TCircle): Boolean; constref;
begin
  Result := Hypot(Self.X - Circle.X, Self.Y - Circle.Y) <= Circle.Radius;
end;

function TPoint.DistanceTo(Other:TPoint): Double; constref;
begin
  Result := Hypot(Self.x-other.x, Self.y-other.y);
end;

function TPoint.Rotate(Angle: Double; Mid: TPoint): TPoint; constref;
begin
  Result := RotatePoint(Self, Angle, Mid.X, Mid.Y);
end;

function TPoint.Magnitude(): Double; constref;
begin
  Result := Sqrt(Sqr(Self.x) + Sqr(Self.y));
end;

function TPoint.AngleBetween(Other: TPoint): Double; constref;
begin
  Result := SRL.Modulo(Degrees(ArcTan2(other.Y - self.Y, other.X - self.X)) - 90, 360);
end;

function TPoint.Offset(P: TPoint): TPoint; constref; overload;
begin
  Result.X := Self.X + P.X;
  Result.Y := Self.Y + P.Y;
end;

function TPoint.Offset(X, Y: Int32): TPoint; constref; overload;
begin
  Result.X := Self.X + X;
  Result.Y := Self.Y + Y;
end;

function TPoint.Random(Min, Max: Integer; Gauss: Boolean = False): TPoint; constref;
begin
  if (Gauss) then
  begin
    Result.X := Self.X + SRL.NormalRange(Min, Max);
    Result.Y := Self.Y + SRL.NormalRange(Min, Max);
  end else 
  begin
    Result.X := Self.X + System.Random(Min, Max);
    Result.Y := Self.Y + System.Random(Min, Max);
  end;
end;

function TPoint.Random(XMin, XMax: Integer; YMin, YMax: Integer; Gauss: Boolean = False): TPoint; constref; overload;
begin
  if (Gauss) then
  begin
    Result.X := Self.X + SRL.NormalRange(XMin, XMax);
    Result.Y := Self.Y + SRL.NormalRange(YMin, YMax);
  end else 
  begin
    Result.X := Self.X + System.Random(XMin, XMax);
    Result.Y := Self.Y + System.Random(YMin, YMax);
  end;
end;

// -----------------------------------------------------------------
// Operator overloads
operator + (L, R: TPoint): TPoint;
begin
  Result.X := L.X + R.X;
  Result.Y := L.Y + R.Y;
end;

operator += (var L: TPoint; R: TPoint): TPoint;
begin
  L.X += R.X;
  L.Y += R.Y;
  Result := L;
end;

operator - (L, R:TPoint): TPoint;
begin
  Result.X := L.X - R.X;
  Result.Y := L.Y - R.Y;
end;

operator -= (var L: TPoint; R: TPoint): TPoint;
begin
  L.X -= R.X;
  L.Y -= R.Y;
  Result := L;
end;

operator * (L: TPoint; R: Double): TPoint;
begin
  Result.X := Round(L.X * R);
  Result.Y := Round(L.Y * R);
end;

operator *= (var L: TPoint; R: Double): TPoint;
begin
  L.X := Round(L.X * R);
  L.Y := Round(L.Y * R);
  Result := L;
end;

operator in(Left: TPoint; Right: TBox): Boolean;
begin
  Result := Left.InBox(Right);
end;
