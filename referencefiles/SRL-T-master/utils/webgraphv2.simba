(*
# WebGraphV2
Responsible for handling webwalking.
It's partially based on the original webgraph logic by Slacky but behaves quite
differently to handle more complex scenarios.
*)

{$DEFINE SRL_WEBGRAPHV2_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL-T/utils.simba}
{$ENDIF}

{$SCOPEDENUMS ON}

type
  ERSDoorType = (UNKNOWN, NORMAL, WIDE);
  TRSDoor = record
    Before, After, Center, Direction: TPoint;
    DoorType: ERSDoorType;
    SEPARATING: Boolean;
  end;

  TRSDoorArray = array of TRSDoor;

//This is the number of degrees you need to face the compass to face the door directly.
//It works by selecting the cardinal direction that gives the highest inner product
//with the vector from the tile before the door to the door center.
function TRSDoor.GetDoorAngle(): Single;
const
  NORTH:  TPoint = [0,-1];
  EAST:   TPoint = [1,0];
  SOUTH:  TPoint = [0,1];
  WEST:   TPoint = [-1,0];
  CARDINALS: TPointArray = [NORTH,EAST,SOUTH,WEST];
var
  best: Double;
  cardinal, doorDirection, tmp: TPoint;
begin
  for cardinal in CARDINALS do
  begin
    tmp := Self.Center - RSTranslator.NormalizeDoor(Self.After);
    if cardinal.Dot(tmp) > best then
    begin
      doorDirection := cardinal;
      best := cardinal.Dot(tmp);
    end;
  end;

  case doorDirection of
    NORTH: Result := 180;
    WEST: Result := 270;
    SOUTH: Result := 0;
    EAST: Result := 90;
  end;
end;

//Does as the name states. Doesn't support diagonal doors yet
//Might add small randomness to this later (i.e. do doorangle + Random(-10,10) or something similar)
function TRSDoor.GetVisibleAngle(angle: Double; randomness: Integer = 75; allowBackwardsAngle: Boolean = True): Double;
begin
  Result := Self.GetDoorAngle();

  if Abs(Round(SRL.DeltaAngle(angle, Result))) < randomness then Exit(angle);
  if Abs(Round(SRL.DeltaAngle(angle, Result + 180))) < randomness then Exit(angle);

  Result += Random(-randomness,randomness);
  if SRL.Dice(50) and allowBackwardsAngle then Result += 180;

  Result := FixD(Result);
end;

function TRSDoor.GetCorners(corners: TPointArray; doorAngle: Single; compass: Single = $FFFF): TPointArray; static;
var
  diff: Double;
begin
  diff := SRL.DeltaAngle(doorAngle, compass);
  diff := SRL.Modulo(diff, 180);

  if not InRange(diff, 45, 135) then
    corners.SortByY(False)
  else
    corners.SortByX(not InRange(diff, 45, 90));

  Result := [corners[0], corners[1]];
end;

//draw doors on bitmap
procedure TRSDoorArray.Draw(bmp: TMufasaBitmap);
var
  door: TRSDoor;
begin
  for door in Self do
    case door.DoorType of
      ERSDoorType.NORMAL:
        if door.SEPARATING then
          bmp.drawCross(door.Center, 3, $FF)
        else
          bmp.drawCross(door.Center, 3, $FFFF00);
      ERSDoorType.UNKNOWN: bmp.drawCross(door.Center, 3, $00);
      ERSDoorType.WIDE: bmp.drawCross(door.Center, 3, $FF00FF);
    end;
end;

type
  TWebGraphV2 = record
    Nodes: TPointArray;
    Paths: T2DIntArray;
    Names: TStringArray;

    Doors: TRSDoorArray;

    Blocking: TIntegerArray;

    WalkableSpace: TPointArray;
    WalkableClusters, ObjectClusters: T2DPointArray;

    UseCollisionData: Boolean;
    Tree: TSlackTree;
  end;

function TWebGraphV2.Copy(): TWebGraphV2;
begin
  Result.Blocking := System.Copy(Self.Blocking);
  Result.Names    := System.Copy(Self.Names);
  Result.Nodes    := System.Copy(Self.Nodes);
  Result.Paths    := System.Copy(Self.Paths);
end;


procedure TWebGraphV2.BlockInside(area: TBox);
var
  i, c: Int32;
begin
  c := Length(blocking);
  SetLength(blocking, Length(Self.Nodes));


  for i := 0 to High(Self.Nodes) do
    if area.Contains(Self.Nodes[i]) then
    begin
      blocking[c] := i;
      Inc(c);
    end;

  SetLength(blocking, c);
end;

procedure TWebGraphV2.BlockOutside(Area: TBox);
var
  i, c: Int32;
begin
  c := Length(blocking);
  SetLength(Blocking, Length(Self.Nodes));

  for i := 0 to High(Self.Nodes) do
    if (not Area.Contains(Self.Nodes[i])) then
    begin
      Blocking[c] := i;
      Inc(c);
    end;

  SetLength(Blocking, c);
end;


function TWebGraphV2.FindPath(Start, Goal: Int32; Rnd:Double=0): TIntegerArray; constref;
type
  TNode = record
    Indices: TIntegerArray;
    Score: Double;
  end;
var
  queue: array of TNode;
  visited: TBoolArray;
  cIdx, pathIdx, i: Int32;
  current, node: TNode;
  p, q: TPoint;
  hyp: Double;

  function GetNextShortest(): TNode;
  var i, node: Int32;
  begin
    Result := queue[0];
    for i := 1 to High(queue) do
      if queue[i].Score < Result.Score then
      begin
        node   := i;
        Result := queue[i];
      end;
    Delete(queue, node, 1);
  end;
begin
  queue   := [[[start],0]];
  SetLength(visited, Length(Self.Nodes));

  // block certain paths by marking them as visited
  for i:=0 to High(Blocking) do Visited[Blocking[i]] := True;

  // ...
  while Length(queue) <> 0 do
  begin
    current := GetNextShortest();
    cIdx := current.Indices[High(current.Indices)];
    if Visited[cIdx] then Continue; //skip overwrapping paths..
    Visited[cIdx] := True;

    if (cIdx = Goal) then
      Exit(current.Indices);

    p := Self.Nodes[cIdx];
    for pathIdx in Self.Paths[cIdx] do
    begin
      if not Visited[pathIdx] then
      begin
        q := Self.Nodes[pathIdx];
        node.Indices := current.Indices + pathIdx;

        hyp := Hypot(p.x-q.x, p.y-q.y);
        node.Score   := current.Score + hyp + (hyp*Random()*Rnd-Rnd/2);
        queue += node;
      end;
    end;
  end;
end;

function TWebGraphV2.FindNearestNode(p: TPoint): Int32;
var
  i,j: Int32;
  d,best,dn1,dn2: Double;
begin
  best := $FFFFFF;
  for i:=0 to High(Self.Paths) do
    for j in Self.Paths[i] do
    begin
      d := SRL.DistToLine(p, Self.Nodes[i], Self.Nodes[j]);
      if d < best then
      begin
        best := d;
        dn1 := Hypot(Self.Nodes[i].X-p.X, Self.Nodes[i].Y-p.Y);
        dn2 := Hypot(Self.Nodes[j].X-p.X, Self.Nodes[j].Y-p.Y);
        if dn1 < dn2 then
          Result := i
        else
          Result := j;
      end;
    end;
end;

function TWebGraphV2.FindNearestNodes(p: TPoint; amount: Int32): TIntegerArray;
var
  i: Int32;
  weights: TIntegerArray;
  tpa: TPointArray;
begin
  if Self.Tree.Size = 0 then
  begin
    Self.Tree.Init(System.Copy(Self.Nodes));
    AddOnTerminate(@Self.Tree.Free);
  end;

  tpa := Self.Tree.KNearest(p, amount);

  for i := 0 to High(tpa) do
  begin
    if not Self.UseCollisionData or Self.WalkableClusters.InSameTPA(p, tpa[i]) then
    begin
      Result += Self.Nodes.Find(tpa[i]);
      weights += Round(p.DistanceTo(tpa[i]))
    end;
  end;

  if Result = [] then
    RaiseException('No near nodes were found around point ' + p.ToString());

  Result.WeightedSort(weights, 0, High(Result), True);
end;

function TWebGraphV2.FindNearestNodesEx(p: TPoint; amount: Int32): TPointArray;
begin
  if Self.Tree.Size = 0 then
  begin
    Self.Tree.Init(System.Copy(Self.Nodes));
    AddOnTerminate(@Self.Tree.Free);
  end;

  Result := Self.Tree.KNearest(p, amount);
end;


function TWebGraphV2.NearestWalkablePoint(p: TPoint): TPoint; constref;
var
  pCircle: TCircle;
  pArea, obj, tpa, bestObj: TPointArray;
  pAreaClusters: T2DPointArray;
  i, bestLength, tempLength: Int32;
begin
  pCircle := [p.x, p.y, 20];
  pArea := pCircle.toTPA(True).Intersection(Self.WalkableSpace);
  pAreaClusters := pArea.NRCluster(1);

  if Self.ObjectClusters = [] then Exit(pArea.NearestPoint(p));

  obj := [];
  for i := 0 to High(Self.ObjectClusters) do
  begin
    if not Self.ObjectClusters[i].Bounds().Contains(p) then Continue;
    if Self.ObjectClusters[i].Contains(p) then
    begin
      obj := Self.ObjectClusters[i];
      {$IFDEF DEBUG_WALKERV2}
      WriteLn('Point was inside object! with edges: ', obj);
      {$ENDIF}
      Break;
    end;
  end;

  if obj = [] then Exit(pArea.NearestPoint(p));

  for i := 0 to High(pAreaClusters) do
  begin
    tpa := pAreaClusters[i].Intersection(obj);
    tempLength := Length(tpa);
    if tempLength > bestLength then
    begin
      bestLength := tempLength;
      bestObj := tpa;
    end;
  end;
  Result := bestObj.NearestPoint(p);

  {$IFDEF DEBUG_WALKERV2}
  WriteLn('Found nearest walkable point as: ',result);
  {$ENDIF}
end;

function TWebGraphV2.NodesToPoints(nodeList: TIntegerArray): TPointArray; constref;
var
  node: Int32;
begin
  for node in nodeList do
    Result += Self.Nodes[node];
end;


function TWebGraphV2.PathBetween(p, q: TPoint; rnd: Double = 0): TPointArray;
var
  n1, n2: Int32;
  nodes: TIntegerArray;
begin
  if p.InRange(q, 4) then Exit([p, q]);

  n1 := Self.FindNearestNode(p);
  n2 := Self.FindNearestNode(q);

  nodes := Self.FindPath(n1, n2, rnd);

  Result += p;
  Result += NodesToPoints(nodes);
  Result += q;

  if Length(nodes) = 0 then
    RaiseException('Points ' + p.ToString() + ' and ' + q.ToString() + ' don''t connect!');
end;

function TWebGraphV2.PathBetweenEx(p, q: TPoint; rnd: Double = 0; attempts: Int32 = 3; safe: Boolean = True): TPointArray;
var
  i, j: Int32;
  nS, nG, nodes: TIntegerArray;
begin
  if Self.UseCollisionData then
    if not Self.WalkableSpace.Contains(p) or not Self.WalkableSpace.Contains(q) then
    begin
      p := RSTranslator.NormalizeDoor(p);
      q := RSTranslator.NormalizeDoor(q);

      if not Self.WalkableSpace.Contains(p) then p := Self.NearestWalkablePoint(p);
      if not Self.WalkableSpace.Contains(q) then q := Self.NearestWalkablePoint(q);
    end;

  nS := Self.FindNearestNodes(p, attempts);
  nG := Self.FindNearestNodes(q, attempts);

  if nS[0] = nG[0] then Exit([p, q]);

  if (Length(nG) = 1) and (Length(Self.Paths[nG[0]]) = 0) then
    RaiseException('Points ' + p.ToString() + ' and ' + q.ToString() + ' don''t connect!');

  attempts -= 1;

  for i := 0 to High(nS) do
    for j := 0 to High(nG) do
    begin
      if nS[i] = nG[j] then Continue;
      nodes := Self.FindPath(nS[i],nG[j], rnd);
      if Length(nodes) > 0 then Break(2);
    end;

  if safe and (Length(nodes) = 0) then Exit;

  Result += p;
  Result += Self.NodesToPoints(nodes);
  Result += q;

  if Length(nodes) = 0 then
    RaiseException('Points ' + p.ToString() + ' and ' + q.ToString() + ' don''t connect!');
end;



function TWebGraphV2.FindObjectPath(me: TPoint; out p: TPoint): TPointArray;
var
  i: Int32;
  cluster, best: TPointArray;
begin
  if Self.UseCollisionData then
  begin
    for i := 0 to High(Self.WalkableClusters) do
      if Self.WalkableClusters[i].Contains(me) then
        cluster := Self.WalkableClusters[i];

    if cluster = [] then
      RaiseException(SRL.TimeStamp() + ':[WebGraph]:[Fatal]: Can''t find player cluster containg: ' + me.ToString());
  end;

  best := Self.FindNearestNodesEx(p, 12);
  for i := 0 to High(best) do
  begin
    p := best[i];

    if not Self.UseCollisionData or cluster.Contains(p) then
    begin
      try
        Result := Self.PathBetweenEx(me, p, 0.2, 2);
        if Result = [] then
        begin
          if me.InRange(p, 52) then Exit([p]);
          RaiseException('Path empty');
        end;
      except
        if me.InRange(p, 52) then Exit([p]);
        RaiseException(SRL.TimeStamp() + ':[WebGraph]:[Fatal]: Can''t find a walkable path to ' + p.ToString() + ' object.');
      end;
      Break;
    end;
  end;
end;



function TWebGraphV2.InvalidConnection(p,q: TPoint): Boolean;

  function LinesIntersect(p,q:array[0..1] of TPoint; out i:TPoint): Boolean;
  var
    dx,dy,d: TPoint;
    dt,s,t: Double;
    function Det(a,b: TPoint): Int64;
    begin
      Result := a.x*b.y - a.y*b.x;
    end;
  begin
    dx := [p[0].x - p[1].x, q[0].x - q[1].x];
    dy := [p[0].y - p[1].y, q[0].y - q[1].y];
    dt := det(dx, dy);
    if dt = 0 then Exit(False);
    d := [Det(p[0],p[1]), Det(q[0],q[1])];
    i.x := Round(Det(d, dx) / dt);
    i.y := Round(Det(d, dy) / dt);
    s := (dx.x * (q[0].y-p[0].y) + dy.x * (p[0].x-q[0].x)) / dt;
    t := (dx.y * (p[0].y-q[0].y) + dy.y * (q[0].x-p[0].x)) / (-dt);
    Result := (s > 0) and (s < 1) and (t > 0) and (t < 1);
  end;

var
  i,n: Int32;
  l1,l2: array[0..1] of TPoint;
  _: TPoint;
begin
  l1 := [p,q];
  for i:=0 to High(self.Paths) do
  begin
    l2[0] := self.Nodes[i];
    for n in self.Paths[i] do
    begin
      l2[1] := self.Nodes[n];
      if (l1[0] = l2[0]) and (l1[1] = l2[1]) then
        Continue;
      if LinesIntersect(l1,l2,_) then
        Exit(True);
    end;
  end;
end;


function TWebGraphV2.AddNode(p: TPoint; FromNode: Int32): Boolean;
var
  c: Int32;
begin
  if (FromNode <> -1) and (Self.InvalidConnection(p, Self.Nodes[FromNode])) then
    Exit(False);

  c := Length(Self.Nodes);
  SetLength(Self.Nodes, c+1);
  SetLength(Self.Paths, c+1);
  SetLength(Self.Names, c+1);
  Self.Nodes[c] := p;

  if FromNode <> -1 then
  begin
    Self.Paths[FromNode] += c;
    Self.Paths[c] += FromNode;
  end;

  Result := True;
end;


function TWebGraphV2.ConnectNodes(a,b: Int32): Boolean;
begin
  if InIntArray(Self.Paths[a], b) then
  begin
    Self.Paths[a].Remove(b);
    Self.Paths[b].Remove(a);
  end else
  begin
    Self.Paths[a] += b;
    Self.Paths[b] += a;
  end;

  Result := True;
end;

function TWebGraphV2.ConnectNodes(a,b: TPoint): Boolean; overload;
var
  i, j: Int32;
begin
  i := Self.Nodes.Find(a);
  if i = -1 then Exit;
  j := Self.Nodes.Find(b);
  if j = -1 then Exit;
  Result := Self.ConnectNodes(i,j);
end;

function TWebGraphV2.ConnectNodes(a: Int32; b: TPoint): Boolean; overload;
var
  i: Int32;
begin
  i := Self.Nodes.Find(b);
  if i = -1 then Exit;
  Result := Self.ConnectNodes(a, i);
end;

function TWebGraphV2.ConnectNodesEx(a,b: TPoint): Boolean; overload;
var
  i, j: Int32;
begin
  i := Self.FindNearestNode(a);
  j := Self.FindNearestNode(b);
  Result := Self.ConnectNodes(i,j);
end;


function TWebGraphV2.DeleteNode(node: Int32): Int32;
var
  i,j,n,curr: Int32;
  marked: TIntegerArray;
begin
  marked += node;
  repeat
    curr := marked.Pop();

    for n in Self.Paths[curr] do
    begin
      Self.Paths[n].Remove(curr, True);
      if Length(Self.Paths[n]) = 0 then
        marked += n;
    end;

    // offset remainding nodes
    for i:=0 to High(Self.Paths) do
      for j:=0 to High(Self.Paths[i]) do
        if Self.Paths[i][j] > curr then
          Dec(Self.Paths[i][j]);

    for i:=0 to High(marked) do
      if marked[i] > curr then Dec(marked[i]);

    // remove the node itself
    Delete(Self.Paths, curr, 1);
    Delete(Self.Nodes, curr, 1);
    Result += 1;
  until Length(marked) = 0;
end;

procedure TWebGraphV2.DeleteNodes(b: TBox);
var
  i: Int32;
begin
  for i := High(Self.Nodes) downto 0 do
    if b.Contains(Self.Nodes[i]) then
    begin
      Self.DeleteNode(i);
      i := High(Self.Nodes) + 1;
    end;
end;


function TWebGraphV2.NodesToString(): String;
var
  I: Int32;
begin
  for I := 0 to High(Self.Nodes) do
    Result := Result + '[' + IntToStr(Self.Nodes[I].X) + ' ' + IntToStr(Self.Nodes[I].Y) + ']';
  Result := Base64Encode(CompressString(Result));
end;

function TWebGraphV2.DoorsToString(): String;
var
  i: Int32;
begin
  for i := 0 to High(Self.Doors) do
  begin
    Result := Result + '[' +
              IntToStr(Self.Doors[i].Before.X) + ' ' + IntToStr(Self.Doors[i].Before.Y) + ' ' +
              IntToStr(Self.Doors[i].After.X) + ' ' + IntToStr(Self.Doors[i].After.Y) + ' ' +
              IntToStr(Self.Doors[i].Center.X) + ' ' + IntToStr(Self.Doors[i].Center.Y) + ' ' +
              IntToStr(Self.Doors[i].Direction.X) + ' '+ IntToStr(Self.Doors[i].Direction.Y) + ' '+
              IntToStr(Ord(Self.Doors[i].DoorType)) + ' ' +
              IntToStr(Int32(self.doors[i].SEPARATING)) +
              ']';
  end;
  Result := Base64Encode(CompressString(Result));
end;

procedure TWebGraphV2.LoadDoorsFromString(s: String);
var
  elements, values: TStringArray;
  i: Int32;
begin
  elements := MultiBetween(DecompressString(Base64Decode(s)), '[', ']');

  SetLength(Self.Doors, Length(elements));

  for i := 0 to High(elements) do
  begin
    values := Explode(' ', elements[i]);

    Self.Doors[i].Before.X := StrToInt(values[0]);
    Self.Doors[i].Before.Y := StrToInt(values[1]);
    Self.Doors[i].After.X := StrToInt(values[2]);
    Self.Doors[i].After.Y := StrToInt(values[3]);
    Self.Doors[i].Center.X := StrToInt(values[4]);
    Self.Doors[i].Center.Y := StrToInt(values[5]);
    Self.Doors[i].Direction.X := StrToInt(values[6]);
    Self.Doors[i].Direction.Y := StrToInt(values[7]);

    Self.Doors[i].DoorType := ERSDoorType(StrToInt(values[8]));
    Self.Doors[i].SEPARATING := Boolean(StrToInt(values[9]));
  end;
end;

procedure TWebGraphV2.LoadNodesFromString(S: String);
var
  Elements, Values: TStringArray;
  I: Int32;
begin
  Elements := MultiBetween(DecompressString(Base64Decode(S)), '[', ']');

  SetLength(Self.Nodes, Length(Elements));

  for I := 0 to High(Elements) do
  begin
    Values := Explode(' ', Elements[I]);

    Self.Nodes[I].X := StrToInt(Values[0]);
    Self.Nodes[I].Y := StrToInt(Values[1]);
  end;
end;

function TWebGraphV2.PathsToString(): String;
var
  I, J: Int32;
begin
  for I := 0 to High(Self.Paths) do
  begin
    Result := Result + '[';
    if Length(Self.Paths[I]) = 0 then
      Result += ' ';

    for J := 0 to High(Self.Paths[I]) do
    begin
      if (J > 0) then
        Result += ' ';
      Result += IntToStr(Self.Paths[I][J]);
    end;

    Result := Result + ']';
  end;

  Result := Base64Encode(CompressString(Result));
end;

procedure TWebGraphV2.LoadPathsFromString(S: String);
var
  Elements, Values: TStringArray;
  I, J: Int32;
begin
  Elements := MultiBetween(DecompressString(Base64Decode(S)), '[', ']');

  SetLength(Self.Paths, Length(Elements));

  for I := 0 to High(Elements) do
  begin
    if Elements[I] = ' ' then
      Continue;

    Values := Explode(' ', Elements[I]);

    SetLength(Self.Paths[I], Length(Values));
    for J := 0 to High(Values) do
      Self.Paths[I][J] := StrToInt(Values[J]);
  end;
end;

function TWebGraphV2.NamesToString(): String;
var
  I: Int32;
begin
  for I := 0 to High(Self.Names) do
    if Self.Names[I] = '' then
      Result := Result + '[#0]'
    else
      Result := Result + '[' + Self.Names[I] + ']';

  Result := Base64Encode(CompressString(Result));
end;

procedure TWebGraphV2.LoadNamesFromString(S: String);
var
  Elements: TStringArray;
  I: Int32;
begin
  Elements := MultiBetween(DecompressString(Base64Decode(S)), '[', ']');

  SetLength(Self.Names, Length(Elements));

  for I := 0 to High(Elements) do
    if (Elements[I] <> '#0') then
      Self.Names[I] := Elements[I];
end;


procedure TWebGraphV2.Merge(graph: TWebGraphV2);
var
  i, j, len: Int32;
begin
  len := Length(Self.Nodes);

  for i := 0 to High(graph.Nodes) do
  begin
    Self.Nodes += graph.Nodes[i];
    Self.Paths += graph.Paths[i];
    for j := 0 to High(Self.Paths[len+i]) do
      Self.Paths[len+i,j] += len;

    Self.Names += graph.Names[i];
  end;

  Self.Doors            += graph.Doors;
  Self.WalkableSpace    += graph.WalkableSpace;
  Self.WalkableClusters += graph.WalkableClusters;
  Self.ObjectClusters   += graph.ObjectClusters;
end;


procedure TWebGraphV2.Draw(bitmap: TMufasaBitmap);
var
  i,j,color: Int32;
  p,q: TPoint;
begin
  if Length(Self.Nodes) = 0 then
    Exit;

  for i := 0 to High(Self.Paths) do
  begin
    p := Self.Nodes[i];

    for j := 0 to High(Self.Paths[i]) do
    begin
      q := Self.Nodes[Self.Paths[i, j]];
      bitmap.DrawTPA(TPAFromLine(p, q), $00EAEA);
    end;
  end;

  for i := 0 to High(Self.Nodes) do
  begin
    color := $0101CC;
    if Length(Self.Names[i]) <> 0 then
      color := $FF7F00;

    p := Self.Nodes[i];
    bitmap.DrawBox(p, 1, color);
  end;
end;

type
  TWebGraphV2Settings = record
    Spacing, MinimumTiles, NodeRadius, MaxConnections: Int32;
    WallCrossings, Disabled: Boolean;
  end;

function TWebGraphV2Settings.Hash(): String;
var
  data: TIntegerArray;
  h, i: Int32;
  str: String;
begin
  data := [Self.Spacing, Self.MinimumTiles, Self.NodeRadius, Self.MaxConnections, Int32(WallCrossings)];

  h := $811C9DC5;
  for i := 0 to High(data) do
  begin
    if data[i] = $0 then Continue;
    h := (h * $1000193) xor data[i];
  end;

  str := LowerCase(IntToHex(h, 16));
  Result := str.SubString(Length(str)-8, Length(str));
end;

var
  GENERATED_GRAPH: TWebGraphV2Settings;

begin
  GENERATED_GRAPH.Spacing := 18;         //low = better/slower, high = worse/faster
  GENERATED_GRAPH.MinimumTiles := 4;     //spaces with less tiles than this will be ignored.
  GENERATED_GRAPH.NodeRadius := 50;      //closed space less than NodeRadius pixels will have a single node.
  GENERATED_GRAPH.MaxConnections := 6;   //Max connections per node.
  GENERATED_GRAPH.WallCrossings := True; //Whether to allow wall crossings when there's a close path around it.
end;
