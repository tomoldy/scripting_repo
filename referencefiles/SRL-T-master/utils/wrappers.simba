{$DEFINE SRL_WRAPPERS_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL-T/utils.simba}
{$ENDIF}

(*
# Wrappers
The wrappers include contains wrapper functions used throughout SRL, some of them to simplify coding while others are just fixes.
The source for this file can be found `here <https://github.com/Olly-/SRL/blob/master/lib/utilities/wrappers.simba>`_.
*)

function TPAFromLine(Start, Stop: TPoint): TPointArray; overload;
begin
  Result := TPAFromLine(Start.X, Start.Y, Stop.X, Stop.Y);
end;

(*
## GetClientBounds()
```pascal
function GetClientBounds(): TBox;
```
Returns the clients bounds.
```{note}
By Olly
```

Example:
```pascal
b := GetClientBounds();
```
*)
function GetClientBounds(): TBox;
var
  width, height: Integer;
begin
  client.GetIOManager().GetDimensions(width, height);
  Result := TBox([0, 0, Max(0, width-1), Max(0, height-1)]);
end;

(*
## GetColor; overload
```pascal
function GetColor(const p: TPoint): Integer; overload;
```
Takes a TPoint variable instead of x, y variables.
```{note}
By Olly
```

Example:
```pascal
p := Point(350, 200);
WriteLn(GetColor(p));
```
*)
function GetColor(const p: TPoint): Integer; overload;
begin
  Result := GetColor(p.x, p.y);
end;

(*
## GetColors; overload
```pascal
function GetColors(const TPA: TPointArray; const ClearSame: boolean): TIntegerArray; overload;
```
Takes an extra parameter, clearSame if true will clear the same integers in the result.
```{note}
By Olly
```

Example:
```pascal
Colors := GetColors(TPA, True);
```
*)
function GetColors(const TPA: TPointArray; const ClearSame:Boolean): TIntegerArray; overload;
begin
  Result := GetColors(TPA);

  if (ClearSame) then
    ClearSameIntegers(Result);
end;

(*
## FindColor; overload
```pascal
function FindColor(var x, y: integer; const Color: integer; const SearchBox: TBox): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Coh3n
```

Example:
```pascal
FindColor(x, y, clRed, Box);
```
*)
function FindColor(var x, y: Integer; const Color: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindColor(x, y, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## findColorTolerance; overload
```pascal
function FindColorTolerance(var x, y: Integer; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
FindColorTolerance(x, y, 255, Box, 10);
```
*)
function FindColorTolerance(var x, y: Integer; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := FindColorTolerance(x, y, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;

(*
## FindColors; overload
```pascal
function FindColors(var Points: TPointArray; const Color: Integer; const SearchBox: TBox): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Coh3n
```

Example:
```pascal
WriteLn(FindColors(TPA, 255, Box));
```
*)
function FindColors(var Points: TPointArray; const Color: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindColors(Points, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## FindColorsTolerance; overload
```pascal
function FindColorsTolerance(var Points: TPointArray; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Zyt3x
```

Example:
```pascal
WriteLn(FindColorsTolerance(TPA, 255, Box, 10));
```
*)
function FindColorsTolerance(var Points: TPointArray; const Color: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := System.FindColorsTolerance(Points, Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;

(*
## CountColor; overload
```pascal
function CountColor(const Color: Integer; const SearchBox: TBox): Integer; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Coh3n
```

Example:
```pascal
WriteLn(CountColor(clRed, Box));
```
*)
function CountColor(const Color: Integer; const SearchBox: TBox): Integer; overload;
begin
  Result := CountColor(Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## CountColorTolerance: overload;
```pascal
function CountColorTolerance(Color: integer; searchBox: TBox; tol: integer): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Coh3n
```

Example:
```pascal
WriteLn(CountColorTolerance(clRed, 10, Box));
```
*)
function CountColorTolerance(const Color: Integer; const SearchBox: TBox; const Tol: Integer): Integer; overload;
begin
  Result := CountColorTolerance(Color, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tol);
end;

(*
## BitmapFromClient; overload
```pascal
function BitmapFromClient(const SearchBox: TBox): Integer; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
BMP := BitmapFromClient(Box);
```
*)
function BitmapFromClient(const SearchBox: TBox): Integer; overload;
begin
  Result := BitmapFromClient(SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## FindBitmapIn; overload
```pascal
function FindBitmapIn(const BMP: Integer; var x, y: integer; const SearchBox: TBox): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
  Result := FindBitmap(bmp, x, y, Box);
```
*)
function FindBitmapIn(const BMP: Integer; var x, y: integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindBitmapIn(BMP, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## FindBitmapToleranceIn; overload
```pascal
function FindBitmapToleranceIn(const BMP: Integer; var x, y: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
Result := FindBitmapToleranceIn(BMP, x, y, Box, 20);
```
*)
function FindBitmapToleranceIn(const BMP: Integer; var x, y: Integer; const SearchBox: TBox; const Tolerance: Integer): Boolean; overload;
begin
  Result := FindBitmapToleranceIn(BMP, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, Tolerance);
end;


(*
## FindDTMRotatedSE; overload
```pascal
function FindDTMRotatedSE(const DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
if (FindDTMRotatedSE(aDTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
  WriteLn('Found the dtm!');
```
*)
function FindDTMRotatedSE(const DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
begin
  Result := FindDTMRotatedSE(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
## FindDTMRotatedAlternating: overload;
```pascal
function FindDTMRotatedAlternating(DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
if (FindDTMRotatedAlternating(DTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
  WriteLn('Found the dtm!');
```
*)
function FindDTMRotatedAlternating(DTM: Integer; var x, y: Integer; SearchBox: TBox; sAngle, eAngle, aStep, aFound: Extended): Boolean; overload;
begin
  result := FindDTMRotatedAlternating(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
## FindDTMRotated
```pascal
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const x1, y1, x2, y2: Integer; const sAngle, eAngle, aStep: Extended; out aFound: Extended): Boolean;
```
Searches for a rotated DTM, A legacy method commonly used in past SRL versions.
```{note}
By Olly
```

Example:
```pascal
if (FindDTMRotated(DTM, x, y, 100, 100, 400, 400, -Pi/4, Pi/4, Pi/60, aFound)) then
  WriteLn('Found the dtm!');
```
*)
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const x1, y1, x2, y2: Integer; const sAngle, eAngle, aStep: Extended; out aFound: Extended): Boolean;
begin
  Result := FindDTMRotatedAlternating(DTM, x, y, x1, y1, x2, y2, sAngle, eAngle, aStep, aFound);
end;

(*
## FindDTMRotated; overload
```pascal
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const SearchBox: TBox; const sAngle, eAngle, aStep: extended; out aFound: Extended): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
if (FindDTMRotated(aDTM, x, y, Box, -Pi/4, Pi/4, Pi/60, aFound)) then
  WriteLn('found the dtm!');
```
*)
function FindDTMRotated(const DTM: Integer; var x, y: Integer; const SearchBox: TBox; const sAngle, eAngle, aStep: extended; out aFound: Extended): Boolean; overload;
begin
  Result := FindDTMRotated(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2, sAngle, eAngle, aStep, aFound);
end;

(*
## FindDTMs; overload
```pascal
function FindDTMs(const DTM: Integer; var TPA: TPointArray; const SearchBox: TBox): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
FindDTMs(DTM, TPA, Box);
WriteLn('Matches' + toString(TPA));
```
*)
function FindDTMs(const DTM: Integer; var TPA: TPointArray; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindDTMs(DTM, TPA, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## FindDTM; overload
```pascal
function FindDTM(const DTM: Integer; var x, y: Integer; const SearchBox: TBox): Boolean; overload;
```
Takes a TBox variable instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
WriteLn(FindDTM(DTM, x, y, Box));
```
*)
function FindDTM(const DTM: Integer; var x, y: Integer; const SearchBox: TBox): Boolean; overload;
begin
  Result := FindDTM(DTM, x, y, SearchBox.x1, SearchBox.y1, SearchBox.x2, SearchBox.y2);
end;

(*
## TPAFromText; overload
```pascal
function TPAFromText(const Text, Font: string): TPointArray; overload;
```
Creates a TPA of the text without the need for the W and H params.
```{note}
By Olly
```

Example:
```pascal
TPA := TPAFromText('Hello world', StatChars);
```
*)
function TPAFromText(const Text, Font: string): TPointArray; overload;
var
  W, H: Integer;
begin
  Result := TPAFromText(Text, Font, W, H);
end;

(*
## InRange; overload
```pascal
function InRange(const Value, Min, Max: Extended): Boolean; overload;
```
Takes a extended variable instead of an integer variable.
```{note}
By Olly
```

Example:
```pascal
WriteLn(InRange(15.0, 10.0, 20.0));
```
*)
function InRange(const Value, Min, Max: Extended): Boolean; overload;
begin
  Result := (value >= min) and (value <= max);
end;

(*
## Distance; overload
```pascal
function Distance(const p1, p2: TPoint): Integer; overload;
```
Accepts two TPoints instead of x1, y1, x2 and y2 variables.
```{note}
By Olly
```

Example:
```pascal
WriteLn(Distance(Point(100, 100), Point(200, 200)));
```
*)
function Distance(const p1, p2: TPoint): Integer; overload;
begin
  Result := Distance(p1.x, p1.y, p2.x, p2.y);
end;

procedure TerminateScript(Reason: String); overload;
begin
  WriteLn('Terminating: ' + Reason);

  TerminateScript();
end;

function TJSONArray.High(): Int32; constref;
begin
  if Self = nil then
    Exit(-1);
  Result := Self.length()-1;
end;

procedure TJSONArray.Merge(other: TJSONArray);
var
  i: Int32;
begin
  if Self = nil then Exit;
  if other = nil then Exit;

  for i := 0 to other.High() do
    Self.Put(other.Get(i));
end;
