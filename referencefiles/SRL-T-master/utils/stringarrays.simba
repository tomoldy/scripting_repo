{$DEFINE SRL_STRINGARRAY_INCLUDED}
{$IFNDEF SRL_UTILS}
  {$I SRL-T/utils.simba}
{$ENDIF}

procedure TStringArray.Append(const value: String);
var
  top:Int32;
begin
  top := Length(Self);
  SetLength(self, top+1);
  Self[top] := value;
end;

procedure TStringArray.Insert(const value: String; index: Int32);
var
  l: UInt32;
begin
  l := Length(Self);
  if (l <= index) then
  begin
    Self.Append(value);
    Exit;
  end;

  SetLength(Self, l + 1);
  MemMove(Self[index], self[index + 1], (L - index) * SizeOf(Self[0]));
  Self[index] := value;
end;

procedure TStringArray.Del(const index: Int32; const count: Int32 = 1);
begin
  Delete(Self, index, count);
end;


function TStringArray.Len(): Int32;
begin
  Result := Length(Self);
end;

procedure TStringArray.Remove(const value: String; const All: Boolean = False);
var
  i: Int32;
  lst: TIntegerArray;
begin
  if (not All) then
  begin
    i := Self.Find(value);
    if i >= 0 then Self.Del(i);
    Exit;
  end;

  lst := Self.FindAll(value);
  for i:=High(lst) downto 0 do
    Self.Del(lst[i]);
end;

function TStringArray.Pop(): String;
var
  h: Int32;
begin
  h := High(Self);
  Result := Self[h];
  SetLength(Self, h);
end;

procedure TStringArray.Extend(const arr: TStringArray);
var
  i, len: Int32;
begin
  len := Length(Self);
  SetLength(Self, len+Length(arr));
  for i:=0 to High(arr) do
    Self[len+i] := arr[i];
end;


function TStringArray.Find(const value: String): Int32; constref;
begin
  for Result := 0 to High(Self) do
    if value = Self[Result] then
      Exit;
  Result := -1;
end;

function TStringArray.FindAll(const value: String): TIntegerArray; constref;
var
  i: UInt32;
begin
  for i:=0 to High(Self) do
    if (Self[i] = value) then
      Result += i;
end;


function TStringArray.Contains(const value: String): Boolean; constref;
begin
  Result := Self.Find(value) > -1;
end;

function TStringArray.ContainsAny(const values: TStringArray): Boolean; constref;
var
  value: String;
begin
  for value in values do
    if Self.Contains(value) then
      Exit(True);
end;

function TStringArray.ContainsAll(const values: TStringArray): Boolean; constref;
var
  value: String;
begin
  for value in values do
    if not Self.Contains(value) then
      Exit;
  Result := True;
end;


procedure TStringArray.Sort();
begin
  System.Sort(Self);
end;

function TStringArray.Sorted(): TStringArray;
begin
  Result := Copy(Self);
  System.Sort(Result);
end;


procedure TStringArray.WeightedSort(weights: TIntegerArray; iLo, iHi: Int32; sortUp: Boolean);
var
  lo, hi, mid: Int32;
begin
  if (Length(weights) <> Length(Self)) then Exit;
  lo := iLo;
  hi := iHi;
  mid := weights[(lo + hi) shr 1];
  repeat
    if sortUp then
    begin
      while (weights[lo] < mid) do Inc(lo);
      while (weights[hi] > mid) do Dec(hi);
    end
    else
    begin
      while (weights[lo] > mid) do Inc(lo);
      while (weights[hi] < mid) do Dec(hi);
    end;

    if (lo <= hi) then
    begin
      Swap(weights[lo], weights[hi]);
      Swap(Self[lo], Self[hi]);
      Inc(lo);
      Dec(hi);
    end;
  until lo > hi;

  if (hi > iLo) then Self.WeightedSort(weights, iLo, hi, sortUp);
  if (lo < iHi) then Self.WeightedSort(weights, lo, iHi, sortUp);
end;

function TStringArray.WeightSorted(weights: TIntegerArray; iLo, iHi: Int32; sortUp: Boolean): TStringArray; constref;
begin
  Result := Copy(Self);
  Result.WeightedSort(weights, iLo, iHi, sortUp);
end;


function TStringArray.Reversed(): TStringArray;
var
  lo:PtrUInt;
  p,r:^String;
begin

  SetLength(Result, Length(Self));
  p := @Self[High(Self)];
  r := @Result[0];

  lo := PtrUInt(@Self[0]);
  while (lo<=PtrUInt(p)) do
  begin
    r^ := p^;
    dec(p);
    inc(r);
  end;
end;

procedure TStringArray.Reverse();
var
  tmp:String;
  lo,hi:^String;
begin
  if (Length(Self) = 0) then Exit;

  lo := @Self[0];
  hi := @Self[High(self)];
  while (PtrUInt(lo)<PtrUInt(hi)) do
  begin
    tmp := hi^;
    hi^ := lo^;
    lo^ := tmp;
    dec(hi);
    inc(lo);
  end;
end;


function TStringArray.Combine(const Arr2: TStringArray): TStringArray; constref;
var
  i,j: Int32;
begin
  if (Length(Arr2) = 0) then
    Exit(Copy(Self));

  Result := Self;
  SetLength(Result, Length(Self) + Length(Arr2));

  j := 0;
  for i := Length(Self) to High(Arr2) + Length(Self) do
  begin
    Result[i] := Arr2[j];
    Inc(j);
  end;
end;

function TStringArray.Equals(other:TStringArray): Boolean; constref;
var
  i:Int32;
begin
  if (Length(Self) <> Length(Other)) then Exit(False);
  if (Length(Self) = 0) then Exit(True);

  for i:=0 to High(self) do
    if (self[i] <> Other[i]) then
      Exit(False);
  Result := True;
end;

function TStringArray.Merge(glue: String = ''): String; constref;
var
  i: Int32;
begin
  if Length(Self) = 0 then Exit;

  Result := Self[0];
  for i := 1 to High(Self) do
    Result += glue + Self[i];
end;


procedure TStringArray.ClearDuplicates();
var
  i: Int32;
  unique: TStringArray;
begin
  for i := 0 to High(Self) do
    if unique.Find(Self[i]) = -1 then
      unique += Self[i];

  Self := unique;
end;

function TStringArray.Unique(): TStringArray;
begin
  Result := Copy(Self);
  Result.ClearDuplicates();
end;


function TStringArray.ToLower(): TStringArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += LowerCase(Self[i]);
end;

function TStringArray.ToUpper(): TStringArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += UpperCase(Self[i]);
end;


function TStringArray.Replace(const oldvalue, newvalue: String): TStringArray;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    Result += StringReplace(Self[i], oldvalue, newvalue, [rfReplaceAll]);
end;


function TStringArray.CountSubstring(const subStr: String): Int32;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i].Contains(subStr) then
      Inc(Result);
end;

function TStringArray.Count(const value: String): Int32;
var
  i: Int32;
begin
  for i := 0 to High(Self) do
    if Self[i] = value then
      Inc(Result);
end;


function TStringArray.Intersection(other: TStringArray): TStringArray; constref;
var
  i: Int32;
begin
  for i := 0 to High(other) do
    if Self.Find(other[i]) > -1 then
      Result += other[i];
end;

function TStringArray.Difference(other: TStringArray): TStringArray; constref;
var
  item: String;
begin
  for item in Self do
    if other.Find(item) = -1 then
      Result += item;
  Result.ClearDuplicates();
end;

function TStringArray.SymmetricDifference(other: TStringArray): TStringArray; constref;
var
  item: String;
begin
  for item in Self do
    if other.Find(item) = -1 then
      Result += item;

  for item in other do
    if Self.Find(item) = -1 then
      Result += item;

  Result.ClearDuplicates();
end;



function TStringArray.RandomValue(): String; constref;
begin
  if Self <> [] then
    Result := Self[System.Random(Low(Self), High(Self))];
end;
