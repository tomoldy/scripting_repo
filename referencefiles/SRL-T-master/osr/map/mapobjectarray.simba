{$DEFINE SRL_MAPOBJECTARRAY_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  PRSMapObjectArray = array of Pointer;

function PRSMapObjectArray.GetClosest(): PRSMapObject;
var
  meObj, meNPC: TPoint = [0,0];
  tmp: PRSMapObject;
  i: Int32;
  closest: Double;
  current: Double;
begin
  closest := $FFFFFF;

  for i := High(Self) downto 0 do
  begin
    tmp := Self[i];

    case tmp^.MapObjectType of
      ERSMapObjectType.OBJ:
      begin
        if meObj = [0,0] then meObj := tmp^.Walker^.Position();
        current := tmp^.Coordinates.NearestPoint(meObj).DistanceTo(meObj);
      end;

      ERSMapObjectType.NPC:
      begin
        if meNPC = [0,0] then meNPC := tmp^.Walker^.Position();
        current := tmp^.Coordinates.NearestPoint(meNPC).DistanceTo(meNPC);
      end;
    end;

    if current < closest then
    begin
      closest := current;
      Result := tmp;
    end;
  end;
end;

function PRSMapObjectArray.GetCoordinates(): TPointArray;
var
  tmp: PRSMapObject;
  i: Int32;
begin
  for i := 0 to  High(Self) do
  begin
    tmp := Self[i];
    Result += tmp^.Coordinates;
  end;
end;

procedure PRSMapObjectArray.Offset(off: TPoint);
var
  tmp: PRSMapObject;
  i: Int32;
begin
  for i := 0 to  High(Self) do
  begin
    tmp := Self[i];
    tmp^.Coordinates := tmp^.Coordinates.Offset(off);
  end;
end;


procedure PRSMapObjectArray.Filter(polygon: TPointArray; inside: Boolean);
var
  tmp: PRSMapObject;
  i, j: Int32;
begin
  for i := High(Self) downto 0 do
  begin
    tmp := Self[i];
    for j := High(tmp^.Coordinates) downto 0 do
      if (inside and SRL.PointInPoly(tmp^.Coordinates[j], polygon)) or
         (not inside and not SRL.PointInPoly(tmp^.Coordinates[j], polygon))
      then
      begin
        Delete(tmp^.Coordinates, j, 1);
        if tmp^.MapObjectType = ERSMapObjectType.OBJ then
          Delete(PRSObjectV2(tmp)^.Rotations, j, 1);
      end;

    if Length(tmp^.Coordinates) = 0 then
      Delete(Self, i, 1);
  end;
end;

procedure PRSMapObjectArray.Filter(circle: TCircle; inside: Boolean); overload;
var
  tmp: PRSMapObject;
  i, j: Int32;
begin
  for i := High(Self) downto 0 do
  begin
    tmp := Self[i];
    for j := High(tmp^.Coordinates) downto 0 do
      if (inside and circle.Contains(tmp^.Coordinates[j])) or
         (not inside and not circle.Contains(tmp^.Coordinates[j]))
      then
      begin
        Delete(tmp^.Coordinates, j, 1);
        if tmp^.MapObjectType = ERSMapObjectType.OBJ then
          Delete(PRSObjectV2(tmp)^.Rotations, j, 1);
      end;

    if Length(tmp^.Coordinates) = 0 then
      Delete(Self, i, 1);
  end;
end;


procedure PRSMapObjectArray.Print();
var
  tmp: PRSMapObject;
  i: Int32;
begin
  for i := High(Self) downto 0 do
  begin
    tmp := PRSMapObject(Self[i]);
    WriteLn(
      'ID: ', tmp^.ID, ', Name: ', tmp^.Name,
      ', Category: ', tmp^.Category,
      ', Actions: ', tmp^.Actions, ', Colors: ', tmp^.Finder.Colors
    );
  end;
end;


type
  TRSObjectJSONParser = record
    Data: TJSONArray;
    Walker: PRSWalkerV2;
  end;

procedure TRSObjectJSONParser.Setup(json: TJSONArray; walker: PRSWalkerV2);
begin
  if Self.Data = nil then
    Self.Data := json
  else
    Self.Data.Merge(json);

  Self.Walker := walker;
end;


function TRSObjectJSONParser.Get(obj: Variant): TRSObjectV2;
var
  i: Int32;
  name: String;
begin
  if VarIsNumeric(obj) then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = obj then
        Exit(TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
    TerminateScript('Object with ID ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
  end;

  name := LowerCase(obj);

  if name.IsDigit() then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = obj then
        Exit(TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
    TerminateScript('Object with ID ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
  end;

  for i := 0 to Self.Data.High() do
  begin
    if LowerCase(Self.Data.getJSONObject(i).getString('name')) <> name then
      Continue;

    if Result.Name <> '' then
    begin
      if Result.SameObject(Self.Data.getJSONObject(i)) then
        Result := Result.Merge(Self.Data.getJSONObject(i));
      Continue;
    end;

    Result := TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
  end;

  if Result.Name = '' then
    TerminateScript('Object ' + ToStr(obj) + ' doesn''t exist on the loaded maps.');
end;

function TRSObjectJSONParser.GetByAction(action: String): TRSObjectV2;
var
  i, j: Int32;
begin
  action := LowerCase(action);

  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('actions').High() do
    begin
      if LowerCase(Self.Data.getJSONObject(i).getJSONArray('actions').getString(j)) <> action then
        Continue;
      Exit(TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
    end;
end;

function TRSObjectJSONParser.GetByCategory(category: Int32): TRSObjectV2;
var
  i: Int32;
begin
  for i := 0 to Self.Data.High() do
    if Self.Data.getJSONObject(i).getInt('category') = category then
      Exit(TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
end;


function TRSObjectJSONParser.GetAll(name: String): TRSObjectV2Array;
var
  i: Int32;
begin
  name := LowerCase(name);
  for i := 0 to Self.Data.High() do
    if LowerCase(Self.Data.getJSONObject(i).getString('name')) = name then
      Result += TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
end;

function TRSObjectJSONParser.GetAll(names: TStringArray): TRSObjectV2Array; overload;
var
  name: String;
begin
  for name in names do
    Result += Self.GetAll(name);
end;

function TRSObjectJSONParser.GetAllByAction(action: String): TRSObjectV2Array;
var
  i, j: Int32;
begin
  action := LowerCase(action);

  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('actions').High() do
    begin
      if LowerCase(Self.Data.getJSONObject(i).getJSONArray('actions').getString(j)) <> action then
        Continue;
      Result += TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
      Break;
    end;

  if Result <> [] then
    Result.Reduce();
end;

function TRSObjectJSONParser.GetAllByCoordinate(p: TPoint; dist: Int32): TRSObjectV2Array;
var
  i, j: Int32;
  coordJSON: TJSONArray;
  coord: TPoint;
begin
  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('coordinates').High() do
    begin
      coordJSON := Self.Data.getJSONObject(i).getJSONArray('coordinates').Get(j);
      coord := [coordJSON.getInt(0), coordJSON.getInt(1)];
      if p.DistanceTo(coord) >= dist then
        Continue;
      Result += TRSObjectV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
      Break;
    end;

  if Result <> [] then
    Result.Reduce();
end;

function TRSObjectJSONParser.GetNearest(names: TStringArray; point: TPoint; actions: TStringArray = []; maxDist: Integer = $FFFFFF): TRSObjectV2;
var
  obj: TRSObjectV2;
  objArr: TRSObjectV2Array;
  dist: Double;
  coordinate: TPoint;
  angle: Single;
  i, j: Integer;
  action: String;
  actionFound: Boolean;
begin
  objArr := Self.GetAll(names);
  dist := maxDist;
  for obj in objArr do
  begin
    actionFound := False;
    if actions <> [] then
    begin
      for action in obj.Actions do
        for j := 0 to High(actions) do
          if (actions[j] in action) or (actions[j] = action) then
            actionFound := True;
    end else actionFound := True;
    for i := 0 to high(obj.Coordinates) do
    begin
      if actionFound and (obj.Coordinates[i].DistanceTo(point) < dist) then
      begin
        Result := obj;
        coordinate := obj.Coordinates[i];
        angle := obj.Rotations[i];
        dist := obj.Coordinates[i].DistanceTo(point);
      end;
    end;
  end;
  Result.Coordinates := [coordinate];
  Result.Rotations := [angle];
end;

function TRSObjectJSONParser.GetNearest(name: String; point: TPoint; actions: TStringArray = []; maxDist: Integer = $FFFFFF): TRSObjectV2; overload;
begin
  Result := Self.GetNearest([name], point, actions, maxDist);
end;

procedure TRSObjectJSONParser.Print();
var
  i, j: Int32;
  actions: TStringArray;
  colors: TIntegerArray;
begin
  for i := 0 to  Self.Data.High() do with Self.Data.getJSONObject(i) do
  begin
    for j := 0 to getJSONArray('actions').High() do
      actions += getJSONArray('actions').getString(j);

    for j := 0 to getJSONArray('colors').High() do
      colors += getJSONArray('colors').getInt(j);

    WriteLn(
      'ID: ', getInt('id'), ', Name: ', getString('name'),
      ', Type: ', getInt('type'), ', Category: ', getInt('category'),
      ', Actions: ', actions, ', Colors: ', getJSONArray('colors').ToString(), ', Coordinates: ', getJSONArray('coordinates').toString()
    );

    actions := [];
    colors := [];
  end;
end;

var
  Objects: TRSObjectJSONParser;

type
  TRSNPCJSONParser = record
    Data: TJSONArray;
    Walker: PRSWalkerV2;
  end;

procedure TRSNPCJSONParser.Setup(json: TJSONArray; walker: PRSWalkerV2);
begin
  if Self.Data = nil then
    Self.Data := json
  else
    Self.Data.Merge(json);

  Self.Walker := walker;
end;


function TRSNPCJSONParser.Get(npc: Variant): TRSNPCV2;
var
  i: Int32;
  name: String;
begin
  if VarIsNumeric(npc) then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = npc then
        Exit(TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
    TerminateScript('NPC with ID ' + ToStr(npc) + ' doesn''t exist on the loaded maps.');
  end;

  name := LowerCase(npc);

  if name.IsDigit() then
  begin
    for i := 0 to  Self.Data.High() do
      if Self.Data.getJSONObject(i).getInt('id') = npc then
        Exit(TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));
    TerminateScript('NPC with ID ' + ToStr(npc) + ' doesn''t exist on the loaded maps.');
  end;

  for i := 0 to Self.Data.High() do
  begin
    if LowerCase(Self.Data.getJSONObject(i).getString('name')) <> name then
      Continue;

    if Result.Name <> '' then
    begin
      if Result.SameObject(Self.Data.getJSONObject(i)) then
        Result := Result.Merge(Self.Data.getJSONObject(i));
      Continue;
    end;

    Result := TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
  end;

  if Result.Name = '' then
    TerminateScript('NPC ' + name + ' doesn''t exist on the loaded maps.');
end;

function TRSNPCJSONParser.GetByAction(action: String): TRSNPCV2;
var
  i, j: Int32;
begin
  action := LowerCase(action);
  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('actions').High() do
      if LowerCase(Self.Data.getJSONObject(i).getJSONArray('actions').getString(j)) = action then
        Exit(TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i)));

  TerminateScript('NPCs with action ' + action + ' don''t exist on the loaded maps.');
end;

function TRSNPCJSONParser.GetAll(name: String): TRSNPCV2Array;
var
  i: Int32;
begin
  name := LowerCase(name);
  for i := 0 to Self.Data.High() do
    if LowerCase(Self.Data.getJSONObject(i).getString('name')) = name then
      Result += TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
end;

function TRSNPCJSONParser.GetAll(names: TStringArray): TRSNPCV2Array; overload;
var
  name: String;
begin
  for name in names do
    Result += Self.GetAll(name);
end;


function TRSNPCJSONParser.GetAllByAction(action: String): TRSNPCV2Array;
var
  i, j: Int32;
begin
  action := LowerCase(action);
  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('actions').High() do
      if LowerCase(Self.Data.getJSONObject(i).getJSONArray('actions').getString(j)) = action then
        Result += TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i));

  if Result <> [] then
    Result.Reduce();
end;

function TRSNPCJSONParser.GetAllByCoordinate(p: TPoint; dist: Int32): TRSNPCV2Array;
var
  i, j: Int32;
  coordJSON: TJSONArray;
  coord: TPoint;
begin
  for i := 0 to Self.Data.High() do
    for j := 0 to Self.Data.getJSONObject(i).getJSONArray('coordinates').High() do
    begin
      coordJSON := Self.Data.getJSONObject(i).getJSONArray('coordinates').Get(j);
      coord := [coordJSON.getInt(0), coordJSON.getInt(1)];
      if p.DistanceTo(coord) >= dist then
        Continue;
      Result += TRSNPCV2.Setup(Self.Walker, Self.Data.getJSONObject(i));
      Break;
    end;

  if Result <> [] then
    Result.Reduce();
end;

function TRSNPCJSONParser.GetNearest(names: TStringArray; point:TPoint): TRSNPCV2;
var
  NPC: TRSNPCV2;
  npcArr: TRSNPCV2Array;
  coordinate: TPoint;
  dist: Double;
  i: Integer;
begin
  npcArr := Self.GetAll(names);
  dist := $FFFFFF;
  for NPC in npcArr do
    for i := 0 to high(NPC.Coordinates) do
    begin
      if NPC.Coordinates[i].DistanceTo(point) < dist then
      begin
        Result := NPC;
        coordinate := NPC.Coordinates[i];
        dist := NPC.Coordinates[i].DistanceTo(point);
      end;
    end;
  Result.Coordinates := [coordinate];
end;

function TRSNPCJSONParser.GetNearest(name: String; point:TPoint): TRSNPCV2; overload;
begin
  Result := Self.GetNearest([name], point);
end;


procedure TRSNPCJSONParser.Print();
var
  i, j: Int32;
  actions: TStringArray;
  colors: TIntegerArray;
begin
  for i := 0 to  Self.Data.High() do with Self.Data.getJSONObject(i) do
  begin
    for j := 0 to getJSONArray('actions').High() do
      actions += getJSONArray('actions').getString(j);

    for j := 0 to getJSONArray('colors').High() do
      colors += getJSONArray('colors').getInt(j);

    WriteLn(
      'ID: ', getInt('id'), ', Name: ', getString('name'),
      ', Category: ', getInt('category'),
      ', Actions: ', actions, ', Colors: ', colors, ', Coordinates: ', getJSONArray('coordinates').toString()
    );
    actions := [];
    colors := [];
  end;
end;

var
  NPCs: TRSNPCJSONParser;

type
  TRSBanks = record
    MapObjects: PRSMapObjectArray;

    ObjectsCache: TRSObjectV2Array;
    NPCsCache: TRSNPCV2Array;
  end;

procedure TRSBanks._SetupMapObjects(Objects: TRSObjectJSONParser = Objects; NPCs: TRSNPCJSONParser = NPCs);
var
  i: Int32;
begin
  if Objects <> [] then
  begin
    Self.ObjectsCache := Objects.GetAllByAction('Bank');
    Self.ObjectsCache += Objects.GetAll('Bank chest');

    for i := 0 to High(Self.ObjectsCache) do
    begin
      Self.ObjectsCache[i].Filter.Finder := False;
      Self.MapObjects += @Self.ObjectsCache[i];
    end;
  end;

  if NPCs <> [] then
  begin
    Self.NPCsCache := NPCs.GetAllByAction('Bank');
    for i := 0 to High(Self.NPCsCache)  do
    begin
      Self.NPCsCache[i].Filter.Finder := False;
      Self.MapObjects += @Self.NPCsCache[i];
    end;
  end;

  if Self.MapObjects = [] then
    TerminateScript('No bank objects nor npcs available in the loaded TRSMap');
end;

procedure TRSBanks._AddObject(obj: TRSObjectV2);
begin
  Self.ObjectsCache += obj;
  Self.MapObjects += @Self.ObjectsCache[High(Self.ObjectsCache)];
end;

procedure TRSBanks._AddNPC(npc: TRSNPCV2);
begin
  Self.NPCsCache += npc;
  Self.MapObjects += @Self.NPCsCache[High(Self.NPCsCache)];
end;

procedure TRSBanks._FilterLocation(polygon: TPointArray; inside: Boolean);
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  Self.MapObjects.Filter(polygon, inside);
end;

procedure TRSBanks._FilterLocation(circle: TCircle; inside: Boolean); overload;
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  Self.MapObjects.Filter(circle, inside);
end;


function TRSBanks.GetCoordinates(): TPointArray;
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  Result := Self.MapObjects.GetCoordinates();
end;

procedure TRSBanks.SetOffset(offset: TPoint);
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  Self.MapObjects.Offset(offset);
end;


procedure TRSBanks.Debug();
var
  mapObj: PRSMapObject;
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  mapObj := Self.MapObjects.GetClosest();
  case mapObj^.MapObjectType of
    ERSMapObjectType.OBJ: System.Debug(PRSObjectV2(mapObj)^);
    ERSMapObjectType.NPC: System.Debug(PRSNPCV2(mapObj)^);
  end;
end;


function TRSBanks.GetClosest(): PRSMapObject;
begin
  if Self.MapObjects = [] then
    Self._SetupMapObjects();

  Result := Self.MapObjects.GetClosest();
end;


function TRSBanks.Hover(mapObj: PRSMapObject = nil): Boolean;
begin
  if RSInterface.IsOpen() then
    Exit;

  if mapObj = nil then
    mapObj := Self.GetClosest();

  Result := mapObj^.Hover();
end;

function TRSBanks.Open(mapObj: PRSMapObject = nil): Boolean;
begin
  if RSInterface.IsOpen() then
  begin
    if Bank.IsOpen() or BankPin.IsOpen() then
      Exit(True);
    RSInterface.Close(True);
  end;

  if mapObj = nil then
    mapObj := Self.GetClosest();

  case mapObj^.MapObjectType of
    ERSMapObjectType.OBJ: Result := mapObj^.Click() or (MainScreen.IsUpText('Banker') and ChooseOption.Select(['Bank B', 'Bank E']));
    ERSMapObjectType.NPC: Result := mapObj^.SelectOption(['Bank B', 'Bank E']) or (MainScreen.IsUpText('Bank') and ChooseOption.Select(['Bank B', 'Bank E']));
  end;

  if not Result then
    Exit;

  Minimap.WaitMoving();
  Result := WaitUntil(RSInterface.IsOpen(), 300, 3000) and (Bank.IsOpen() or BankPin.IsOpen());
end;

function TRSBanks.WalkHover(mapObj: PRSMapObject = nil): Boolean;
begin
  if RSInterface.IsOpen() then
    Exit;

  if mapObj = nil then
    mapObj := Self.GetClosest();

  Result := mapObj^.WalkHover();
end;

function TRSBanks.WalkOpen(mapObj: PRSMapObject = nil): Boolean;
begin
  if RSInterface.IsOpen() then
  begin
    if Bank.IsOpen() or BankPin.IsOpen() then
      Exit(True);
    RSInterface.Close(True);
  end;

  if mapObj = nil then
    mapObj := Self.GetClosest();

  case mapObj^.MapObjectType of
    ERSMapObjectType.OBJ: Result := mapObj^.WalkClick() or (MainScreen.IsUpText('Banker') and ChooseOption.Select(['Bank B', 'Bank E']));
    ERSMapObjectType.NPC: Result := mapObj^.WalkSelectOption(['Bank B', 'Bank E']) or (MainScreen.IsUpText('Bank') and ChooseOption.Select(['Bank B', 'Bank E']));
  end;

  if not Result then
    Exit;

  Minimap.WaitMoving();
  Result := WaitUntil(RSInterface.IsOpen(), 300, 3000) and (Bank.IsOpen() or BankPin.IsOpen());
end;

var
  {$H-}Banks: TRSBanks;{$H+}
