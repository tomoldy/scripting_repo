{$I SRL-T/osr.simba}

const
  PATH         = {$macro CURRENT_DIRECTORY};
  JSONS_PATH   = PATH + 'npcs' + DirectorySeparator;
  DATA_URL     = 'https://raw.githubusercontent.com/mejrs/data_osrs/master/NPCList_OSRS.json';
  HELPER_CACHE = PATH + 'npcs_helper' + DirectorySeparator;
  RESET_CACHE  = True;

var
  files: TJSONArray;

function LoadHelperByID(id: Int32): TJSONObject;
var
  jsonFile, str: String;
begin
  jsonFile := ToStr(id) + '.json';

  if not FileExists(HELPER_CACHE + jsonFile) then Exit;

  str := ReadFileContents(HELPER_CACHE + jsonFile);
  if str <> '' then
  Result.Init(str);
end;

function LoadHelperByName(name: String): TJSONObject;
var
  i: Int32;
begin
  for i := 0 to files.High() do
    if files.getJSONObject(i).getString('name') = name then
      Exit(files.getJSONObject(i));
end;


function TJSONObject.GetCoordinate(): TPoint;
begin
  Result := RSTranslator.RSCoordinate2Coordinate(Point(Self.GetInt('x'), Self.GetInt('y')));
end;

function TJSONObject.GetChunk(): String;
begin
  with RSTranslator.RSCoordinate2Chunk(Point(Self.GetInt('x'), Self.GetInt('y'))) do
    Result := ToStr(Self.GetInt('p')) + '-' + ToStr(X) + '-' + ToStr(Y);
end;

procedure TJSONObject.CreateNPC(id: Int32; helper: TJSONObject; coords: TJSONArray);
var
  coordinates: TJSONArray;
begin
  Self.Init();
  Self.Put('id', id);
  Self.Put('name', helper.GetString('name'));
  Self.Put('level', helper.getString('level'));
  Self.Put('category', helper.GetInt('category'));
  Self.Put('minimapdot', helper.getBoolean('minimapdot'));
  Self.Put('actions', helper.getJSONArray('actions'));
  Self.Put('size', helper.getJSONArray('size'));

  coordinates.Init();
  coordinates.Put(coords);
  Self.Put('coordinates', coordinates);
  Self.Put('colors', helper.getJSONArray('colors'));
end;

procedure TJSONArray.CreateCoordinate(coordinate: TPoint);
begin
  Self := nil;
  Self.Init();

  Self.Put(coordinate.X);
  Self.Put(coordinate.Y);
end;

procedure TJSONArray.SetupCache();
var
  f, content: String;
  tmp: TJSONObject;
begin
  files.Init();

  for f in FindFiles(HELPER_CACHE) do
  begin
    content := ReadFileContents(f);
    if content = '' then Continue;

    tmp.Init(content);
    files.Put(tmp);
  end;

  AddOnTerminate(@files.Free);
end;

var
  current, npc, final, helper: TJSONObject;
  data, coords, chunkArr: TJSONArray;
  i, j, hi, id: Int32;
  chunkStr, plane, name: String;
  coordinate: TPoint;
  idMiss, nameMiss: Int32;
begin
  ClearDebug();
  DeleteDirectory(JSONS_PATH, False);

  if RESET_CACHE then DeleteDirectory(HELPER_CACHE, False);

  for i := 0 to RSTranslator.Planes do
    if not ForceDirectories(JSONS_PATH + ToStr(i)) then
      TerminateScript('Failed to create: ' + JSONS_PATH + ToStr(i));

  if not ForceDirectories(HELPER_CACHE) then
    TerminateScript('Failed to create: ' + HELPER_CACHE);

  WriteLn('Setting up cache.');
  files.SetupCache();
  WriteLn('Finished setting up cache.');

  data.Init(GetPage(DATA_URL));
  AddOnTerminate(@data.Free);
  final.Init();

  WriteLn('Finished setting up. Unzipping files now.');
  if RESET_CACHE then UnZipFile(PATH + 'npcs_helper.zip', HELPER_CACHE);
  WriteLn('Finished unzipping files. Parsing data now.');

  for i := 0 to hi := data.High() do
  begin
    if (i mod 1000 = 0) then WriteLn(i, '/', hi);

    current := data.GetJSONObject(i);

    id := current.getInt('id');

    helper := LoadHelperByID(id);
    if helper = nil then
    begin
      Inc(idMiss);

      name := current.getString('name');
      if name = '' then Continue;

      helper := LoadHelperByName(name);
      if helper = nil then
      begin
        Inc(nameMiss);
        Continue;
      end;
    end
    else
    begin
      name := helper.GetString('name');
      if name = '' then Continue;
    end;

    coordinate := current.GetCoordinate();
    chunkStr := current.GetChunk();

    coords.CreateCoordinate(coordinate);

    if not final.Has(chunkStr) then
    begin
      chunkArr.Init();
      final.Put(chunkStr, chunkArr);
    end
    else
      chunkArr := final.getJSONArray(chunkStr);

    npc := nil;

    for j := 0 to chunkArr.High() do
    begin
      if chunkArr.getJSONObject(j).getInt('id') <> id then Continue;
      npc := chunkArr.getJSONObject(j);
      Break;
    end;

    if npc <> nil then
    begin
      npc.getJSONArray('coordinates').Put(coords);
      Continue;
    end;

    npc.CreateNPC(id, helper, coords);
    chunkArr.Put(npc);
  end;

  if RESET_CACHE then RMDir(HELPER_CACHE, True);

  WriteLn('Finished parsing data. Saving it to files now.');

  hi := final.Keys().getCount() - 1;

  for i := 0 to hi do
  begin
    if (i mod 200 = 0) then WriteLn(i, '/', hi);
    chunkStr := final.Keys().GetStrings(i);

    chunkArr := final.getJSONArray(chunkStr);

    plane := chunkStr.Before('-');
    chunkStr := JSONS_PATH + plane + DirectorySeparator + chunkStr.After('-') + '.json';

    WriteFileContents(
      chunkStr,
      chunkArr.ToString()
        .Replace('\u0020', ' ')
        .Replace('},{', '},' + LineEnding + '  {')
        .Replace('[{', '[' + LineEnding + '  {')
        .Replace('}]', '}' + LineEnding + ']'),
      False
    );
  end;

  WriteLn('Finished saving files.');
  WriteLn('Cache zip is missing ', idMiss, ' ids from the external data.');
  WriteLn('Failed to match ', nameMiss, ' npcs by name.');
end.
