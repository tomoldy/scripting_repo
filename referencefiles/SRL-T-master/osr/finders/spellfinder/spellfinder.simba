(*
# Spell Finder
*)

{$DEFINE SRL_SPELLFINDER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSSpell = (
    UNKNOWN,

    // Standard
    LUMBRIDGE_HOME_TELEPORT,
    WIND_STRIKE,
    CONFUSE,
    ENCHANT_CROSSBOW_BOLT,
    WATER_STRIKE,

    JEWELLERY_ENCHANTMENTS,
    BACK,
    LVL1_ENCHANT,
    LVL2_ENCHANT,
    LVL3_ENCHANT,
    LVL4_ENCHANT,
    LVL5_ENCHANT,
    LVL6_ENCHANT,
    LVL7_ENCHANT,

    EARTH_STRIKE,

    WEAKEN,
    FIRE_STRIKE,
    BONES_TO_BANANAS,
    WIND_BOLT,
    CURSE,
    BIND,
    LOW_LEVEL_ALCHEMY,

    WATER_BOLT,
    VARROCK_TELEPORT,

    EARTH_BOLT,
    LUMBRIDGE_TELEPORT,
    TELEKINETIC_GRAB,
    FIRE_BOLT,

    FALADOR_TELEPORT,
    CRUMBLE_UNDEAD,
    TELEPORT_TO_HOUSE,
    WIND_BLAST,
    SUPERHEAT_ITEM,
    CAMELOT_TELEPORT,
    WATER_BLAST,
    IBAN_BLAST,
    SNARE,
    MAGIC_DART,
    ARDOUGNE_TELEPORT,
    EARTH_BLAST,
    CIVITAS_ILLA_FORTIS_TELEPORT,   
    HIGH_LEVEL_ALCHEMY,

    CHARGE_WATER_ORB,
    WATCHTOWER_TELEPORT,
    FIRE_BLAST,
    CHARGE_EARTH_ORB,
    BONES_TO_PEACHES,
    SARADOMIN_STRIKE,

    CLAWS_OF_GUTHIX,
    FLAMES_OF_ZAMORAK,
    TROLLHEIM_TELEPORT,
    WIND_WAVE,
    CHARGE_FIRE_ORB,
    TELEPORT_TO_APE_ATOLL,
    WATER_WAVE,

    CHARGE_AIR_ORB,
    VULNERABILITY,
    TELEPORT_TO_KOUREND,
    EARTH_WAVE,
    ENFEEBLE,
    TELEOTHER_LUMBRIDGE,

    FIRE_WAVE,
    ENTANGLE,
    STUN,
    CHARGE,
    WIND_SURGE,
    TELEOTHER_FALADOR,
    WATER_SURGE,

    TELE_BLOCK,
    STANDARD_TARGET_TELEPORT,
    TELEOTHER_CAMELOT,
    EARTH_SURGE,
    FIRE_SURGE,

    // Ancient
    EDGEVILLE_HOME_TELEPORT,
    SMOKE_RUSH,
    SHADOW_RUSH,
    PADDEWWA_TELEPORT,

    BLOOD_RUSH,
    ICE_RUSH,
    SENNTISTEN_TELEPORT,
    SMOKE_BURST,

    SHADOW_BURST,
    KHARYRLL_TELEPORT,
    BLOOD_BURST,
    ICE_BURST,

    LASSAR_TELEPORT,
    SMOKE_BLITZ,
    SHADOW_BLITZ,
    DAREEYAK_TELEPORT,

    BLOOD_BLITZ,
    ICE_BLITZ,
    CARRALLANGAR_TELEPORT,
    ANCIENT_TARGET_TELEPORT,

    SMOKE_BARRAGE,
    SHADOW_BARRAGE,
    ANNAKARL_TELEPORT,
    BLOOD_BARRAGE,

    ICE_BARRAGE,
    GHORROCK_TELEPORT,

    // Lunar
    LUNAR_HOME_TELEPORT,
    BAKE_PIE,
    GEOMANCY,
    CURE_PLANT,
    MONSTER_EXAMINE,

    NPC_CONTACT,
    CURE_OTHER,
    HUMIDIFY,
    MOONCLAN_TELEPORT,
    TELE_GROUP_MOONCLAN,

    CURE_ME,
    OURANIA_TELEPORT,
    HUNTER_KIT,
    WATERBIRTH_TELEPORT,
    TELE_GROUP_WATERBIRTH,

    CURE_GROUP,
    STAT_SPY,
    BARBARIAN_TELEPORT,
    TELE_GROUP_BARBARIAN,
    SPIN_FLAX,

    SUPERGLASS_MAKE,
    TAN_LEATHER,
    KHAZARD_TELEPORT,
    TELE_GROUP_KHAZARD,
    DREAM,

    STRING_JEWELLERY,
    STAT_RESTORE_POT_SHARE,
    MAGIC_IMBUE,
    FERTILE_SOIL,
    BOOST_POTION_SHARE,

    FISHING_GUILD_TELEPORT,
    BOUNTY_TELEPORT,
    TELE_GROUP_FISHING_GUILD,
    PLANK_MAKE,
    CATHERBY_TELEPORT,

    TELE_GROUP_CATHERBY,
    RECHARGE_DRAGONSTONE,
    ICE_PLATEU_TELEPORT,
    TELE_GROUP_ICE_PLATEU,
    ENERGY_TRANSFER,

    HEAL_OTHER,
    VENGEANCE_OTHER,
    VENGEANCE,
    HEAL_GROUP,
    SPELLBOOK_SWAP,

    // Arceuus
    ARCEUUS_HOME_TELEPORT,
    ARCEUUS_LIBRARY_TELEPORT,
    BASIC_REANIMATION,
    DRAYNOR_MANOR_TELEPORT,
    BATTLEFRONT_TELEPORT,

    MIND_ALTAR_TELEPORT,
    RESPAWN_TELEPORT,
    GHOSTLY_GRASP,
    RESURRECT_LESSER_GHOST,
    RESURRECT_LESSER_SKELETON,

    RESURRECT_LESSER_ZOMBIE,
    SALVE_GRAVEYARD_TELEPORT,
    ADEPT_REANIMATION,
    INFERIOR_DEMONBANE,
    SHADOW_VEIL,

    FENKENSTRAINS_CASTLE_TELEPORT,
    DARK_LURE,
    SKELETAL_GRASP,
    RESURRECT_SUPERIOR_GHOST,
    RESURRECT_SUPERIOR_SKELETON,

    RESURRECT_SUPERIOR_ZOMBIE,
    MARK_OF_DARKNESS,
    WEST_ARDOUGNE_TELEPORT,
    SUPERIOR_DEMONBANE,
    LESSER_CORRUPTION,

    HARMONY_ISLAND_TELEPORT,
    VILE_VIGOUR,
    DEGRIME,
    CEMETERY_TELEPORT,
    EXPERT_REANIMATION,

    WARD_OF_ARCEUUS,
    RESURRECT_GREATER_GHOST,
    RESURRECT_GREATER_SKELETON,
    RESURRECT_GREATER_ZOMBIE,
    RESURRECT_CROPS,

    UNDEAD_GRASP,
    DEATH_CHARGE,
    DARK_DEMONBANE,
    BARROWS_TELEPORT,
    DEMONIC_OFFERING,

    GREATER_CORRUPTION,
    MASTER_REANIMATION,
    APE_ATOLL_TELEPORT,
    SINISTER_OFFERING
  );

  TRSSpellFinder = record(TSRLBaseRecord)
    IMAGES_ZIP: String;
    IMAGES_PATH: String;
    SpellImages: array [ERSSpell] of TMufasaBitmapArray;
  end;

procedure TRSSpellFinder.Free();
var
  spell: ERSSpell;
  i: Int32;
begin
  for spell := ERSSpell(0) to ERSSpell(High(ERSSpell)) do
    for i := 0 to High(Self.SpellImages[spell]) do
      Self.SpellImages[spell][i].Free();
end;

procedure TRSSpellFinder.Setup();
begin
  Self.IMAGES_ZIP  := {$macro CURRENT_DIRECTORY} + 'images.zip';
  Self.IMAGES_PATH := CACHE_DIR + 'spellfinder' + DirectorySeparator +
                      SHA1File(Self.IMAGES_ZIP).SubString(6) +
                      DirectorySeparator;

  ForceDirectories(Self.IMAGES_PATH);

  Self.Name := 'SpellFinder';
  AddOnTerminate(@Self.Free);
end;

function TRSSpellFinder.GetSpellImages(spell: ERSSpell): TMufasaBitmapArray;
const
  SIZES: TStringArray = ['_large.png', '_small.png'];
var
  fileName, size: String;
  spellImage: TMufasaBitmap;
begin
  if Self.SpellImages[spell] <> [] then
    Exit(Self.SpellImages[spell]);

  for size in SIZES do
  begin
    fileName := ExpandFileName(Self.IMAGES_PATH + LowerCase(ToStr(spell)) + size);

    if not FileExists(fileName) then
    begin
      Self.DebugLn('Unzipping spell sprite: ' + ExtractFileName(fileName) + ' this can take a few seconds');
      if not UnZipOneFile(Self.IMAGES_ZIP, ExtractFileName(fileName), Self.IMAGES_PATH) then
        Self.Fatal('Unknown spell: ' + ToStr(spell));
    end;

    spellImage.Init(Client.GetMBitmaps());
    spellImage.LoadFromFile(fileName);
    spellImage.SetName(ToStr(spell));
    spellImage.ReplaceColor(RS_ITEM_SHADOW, 0);
    Result += spellImage;
  end;

  Self.SpellImages[spell] := Result;
end;

type
  TRSSpellFinderMatch = record
    Spell: ERSSpell;
    Box: TBox;
    Index: Int32;
  end;
  TRSSpellFinderMatchArray = array of TRSSpellFinderMatch;

function TRSSpellFinder.FindAll(spells: array of ERSSpell; box: TBox; maxToFind: Integer = 0): TRSSpellFinderMatchArray;
var
  i, j, x1, y1, x2, y2: Int32;
  SpellBitmaps: array of TMufasaBitmapArray;
begin
  for i := 0 to High(spells) do
    SpellBitmaps += Self.GetSpellImages(spells[i]);

  for i := 0 to High(SpellBitmaps) do
    for j := 0 to High(SpellBitmaps[i]) do
      if FindBitmapIn(SpellBitmaps[i][j].getIndex(), x1, y1, box) then
      begin
        x2 := x1 + SpellBitmaps[i][j].getWidth() - 1;
        y2 := y1 + SpellBitmaps[i][j].getHeight() - 1;
        Result += [spells[i], [x1, y1, x2, y2], i];
        if Length(Result) = maxToFind then
          Exit;
        Break;
      end;
end;

function TRSSpellFinder.Find(spells: array of ERSSpell; box: TBox; out match: TRSSpellFinderMatch): Boolean;
var
  matches: TRSSpellFinderMatchArray;
begin
  matches := Self.FindAll(spells, box, 1);

  Result := Length(matches) = 1;
  if Result then
    match := matches[0];
end;

var
  SpellFinder: TRSSpellFinder;

begin
  SpellFinder.Setup();
end;
