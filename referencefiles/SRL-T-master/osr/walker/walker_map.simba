(*
# WalkerMap
This file contains internal methods used by walker.
*)

{$DEFINE SRL_WALKER_MAP_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

// not a const, allow people to edit.
{$H-}
var
  WALKER_DIR = {$MACRO CURRENT_DIRECTORY};
  WALKER_MAP = {$MACRO CURRENT_DIRECTORY} + 'map.png';
  WALKER_MAPS = {$MACRO CURRENT_DIRECTORY} + 'maps' + DirectorySeparator;
{$H+}

type
(*
## TRSWalkerRegions
```pascal
  TRSWalkerRegions = record
    WORLD:          TBox;
    ZEAH:           TBox;
    EDGEVILLE:      TBox;
    VARROCK:        TBox;
    GRAND_EXCHANGE: TBox;
    LUNAR_ISLE:     TBox;
    LUMBRIDGE:      TBox;
    ISLE_OF_SOULS:  TBox;
  end;
```
Collection of pre-made boxes that can be used in TRSWalker.Setup();
*)
  TRSWalkerRegions = record
    WORLD:          TBox;
    ZEAH:           TBox;
    EDGEVILLE:      TBox;
    VARROCK:        TBox;
    GRAND_EXCHANGE: TBox;
    LUNAR_ISLE:     TBox;
    LUMBRIDGE:      TBox;
    ISLE_OF_SOULS:  TBox;
  end;

(*
## RSWalkerLocations
Collection of pre-made coordinates that can be used in TRSWalker;
*)
  TRSWalkerLocations = record
    GRAND_EXCHANGE: TPoint;
    EDGE_BANKERS:   TPoint;
  end;

var
  RSWalkerRegions: TRSWalkerRegions;
  RSWalkerLocations: TRSWalkerLocations;

type
(*
## type TRSWalkerMap
TRSWalkerMap is the record responsible for handling map loading for TRSWalker and keep track of regions if there's any.
*)
  TRSWalkerMap = record
    Map: TMufasaBitmap;
    ScaledMap: TMufasaBitmap;
    Regions: TBoxArray;
    RegionOffsets: TPointArray;
  end;

(*
## TRSWalkerMap.FindMap
```pascal
function TRSWalkerMap.FindMap(Map: String): String; static;
```
Internal function responsible for finding our map.
If the **Map** is a path and it exists the function exits.
Otherwise, it looks for a .png and .bmp file with the map name in Simba/Includes/osr/walker/maps and returns the file path.
You probably will never need to use this directly but if you want to debug things consider the following example.

Example:
```pascal
WriteLn TRSWalkerMap.FindMap('world');
```
*)
function TRSWalkerMap.FindMap(map: String): String; static;
var
  mask: String = '.png;.bmp;';
  files: TStringArray;
begin
  if FileExists(map) then
    Exit(ExpandfileName(map));

  mask := StringReplace(mask, '.', map.FileName() + '.', [rfReplaceAll]);

  files := FindFile(ExtractFileDir(map), mask, False, False) +
           FindFile(WALKER_MAPS, mask, True, False);

  if Length(files) > 0 then
    Result := files[0];
end;

(*
## TRSWalkerMap.InternalLoadMap
```pascal
function TRSWalkerMap.InternalLoadMap(fileName: String; Region: TBox = []): TMufasaBitmap; static;
```
Internal function responsible for loading our map.
If a "Region" is specified, that region is cropped from the the image file and returned, otherwise the whole file is returned as a TMufasaBitmap.
You probably will never need to use this directly, but consider the following example for debugging purposes.

Example:
```pascal
TRSWalkerMap.InternalLoadMap('world', RSWalkerRegions.GRAND_EXCHANGE).Debug();
```
*)
function TRSWalkerMap.InternalLoadMap(fileName: String; aRegion: TBox = []): TMufasaBitmap; static;
var
  path, cacheName: String;
begin
  Result.Init();
  if ExtractFileExt(fileName) <> '.bmp' then
  begin
    path := CACHE_DIR + 'walker' + DirectorySeparator + SHA1File(WALKER_MAP).SubString(6);
    cacheName := path + DirectorySeparator + ExtractFileName(fileName.FileName()) + '.bmp';

    if not FileExists(cacheName) then
    begin
      if not ForceDirectories(path) then
        TerminateScript('Failed to create TRSWalker cache directories.');

      WriteLn('Caching ' + ExtractfileName(fileName) + ' this can take ~10 seconds.');

      Result.LoadFromFile(TRSWalkerMap.FindMap(fileName));
      Result.SaveToFile(cacheName);

      if (aRegion <> []) then
        Result.Crop(aRegion.X1, aRegion.Y1, aRegion.X2, aRegion.Y2);

      Exit;
    end;

    fileName := cacheName;
  end;

  Result.LoadFromFile(fileName);

  if (aRegion <> []) then
    Result.Crop(aRegion.X1, aRegion.Y1, aRegion.X2, aRegion.Y2);
end;

(*
## TRSWalkerMap.Free
```pascal
procedure TRSWalkerMap.Free();
```
Internal function responsible for releasing TRSWalkerMap from memory.
You probably will never need to use this directly. It's automatically called on script termination.
*)
procedure TRSWalkerMap.Free();
begin
  if Assigned(Self.Map) then
  begin
    Self.Map.Free();
    Self.Map := nil;
  end;

  if Assigned(Self.ScaledMap) then
  begin
    Self.ScaledMap.Free();
    Self.ScaledMap := nil;
  end;
end;

(*
## TRSWalkerMap.Load
```pascal
procedure TRSWalkerMap.Load(fileName: String; scaling: Int32); overload;
procedure TRSWalkerMap.Load(fileName: String; aRegions: TBoxArray; scaling: Int32; Padding: Int32 = 50); overload;
procedure TRSWalkerMap.Load(fileName: String; aRegion: TBox; scaling: Int32; padding: Int32 = 50); overload;
procedure TRSWalkerMap.Load(fileName: String; start: TPoint; scaling: Int32; out aRegion: TBox; padding: Int32 = 50); overload;
```
Internal function responsible for setting up TRSWalkerMap.
This is where we load our bitmaps and store them in a TRSWalkerMap variable.
It's also where we downsample our map for faster searches.
TRSWalkerMap.Map contains the full sized map image while TRSWalkerMap.ScaledMap contains the downsampled map.
You probably will never need to use this directly but consider the following example for debugging purposes.

Example:
```pascal
var
  map: TRSWalkerMap;
begin
  map.Load('world', 8);
  map.Map.Debug();
  Wait(4000);
  map.ScaledMap.Debug();
end;
```
*)
procedure TRSWalkerMap.Load(fileName: String; scaling: Int32);
begin
  Self.ScaledMap.Init();
  Self.Map := Self.InternalLoadMap(fileName);
  Self.Map.Downsample(scaling, Self.ScaledMap);
  AddOnTerminate(@Self.Free);

  Self.Regions := [[0, 0, Self.Map.getWidth()-1, Self.Map.getHeight()-1]];
  Self.RegionOffsets := [[0, 0]];
end;

procedure TRSWalkerMap.Load(fileName: String; aRegions: TBoxArray; scaling: Int32; padding: Int32 = 50); overload;
var
  bitmaps: TMufasaBitmapArray;
  i: Int32;
begin
  SetLength(Self.Regions, Length(aRegions));
  SetLength(Self.RegionOffsets, Length(aRegions));

  SetLength(bitmaps, Length(Self.Regions));
  for i := 0 to High(bitmaps) do
  begin
    Self.RegionOffsets[i] := Point(aRegions[i].X1, aRegions[i].Y1);

    bitmaps[i] := Self.InternalLoadMap(fileName, aRegions[i]);
    if (aRegions[i] <> RSWalkerRegions.WORLD) then
    begin
      Self.RegionOffsets[i].X -= padding;
      Self.RegionOffsets[i].Y -= padding;

      bitmaps[i].Pad(padding);
    end;

    Self.Regions[i] := Box(0, 0, bitmaps[i].GetWidth(), bitmaps[i].GetHeight());
  end;

  Self.Regions := Self.Regions.Pack();
  Self.Map.Init();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  for i := 0 to High(Self.Regions) do
    Self.Map.DrawBitmap(bitmaps[i], Point(Self.Regions[i].X1, Self.Regions[i].Y1));

  Self.ScaledMap.Init();
  AddOnTerminate(@Self.Free);
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for i := 0 to High(bitmaps) do
    bitmaps[i].Free();
end;

procedure TRSWalkerMap.Load(fileName: String; aRegion: TBox; scaling: Int32; padding: Int32 = 50); overload;
var
  bitmaps: TMufasaBitmapArray;
  bitmap: TMufasaBitmap;
  i, hi: Int32;
begin
  for i := 0 to High(Self.Regions) do
    bitmaps += Self.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);


  Self.Map.Clear();

  SetLength(Self.Regions, Length(Self.Regions) + 1);
  SetLength(Self.RegionOffsets, Length(Self.Regions));

  hi := High(Self.Regions);

  Self.RegionOffsets[hi] := Point(aRegion.X1, aRegion.Y1);

  bitmap := Self.InternalLoadMap(fileName, aRegion);

  if (aRegion <> RSWalkerRegions.WORLD) then
  begin
    Self.RegionOffsets[hi].X -= padding;
    Self.RegionOffsets[hi].Y -= padding;

    bitmap.Pad(padding);
  end;

  Self.Regions[hi] := Box(0, 0, bitmap.GetWidth(), bitmap.GetHeight());
  bitmaps += bitmap;

  Self.Regions := Self.Regions.Pack();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  for i := 0 to High(Self.Regions) do
    Self.Map.DrawBitmap(bitmaps[i], Point(Self.Regions[i].X1, Self.Regions[i].Y1));

  Self.ScaledMap.Clear();
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for i := 0 to High(bitmaps) do
    bitmaps[i].Free();
end;

procedure TRSWalkerMap.Load(fileName: String; start: TPoint; scaling: Int32; out aRegion: TBox; padding: Int32 = 50); overload;
var
  bitmaps: TMufasaBitmapArray;
  bitmap: TMufasaBitmap;
  i, hi: Int32;
begin
  for i := 0 to High(Self.Regions) do
    bitmaps += Self.Map.Copy(Self.Regions[i].X1, Self.Regions[i].Y1, Self.Regions[i].X2, Self.Regions[i].Y2);

  Self.Map.Clear();

  SetLength(Self.Regions, Length(Self.Regions) + 1);
  SetLength(Self.RegionOffsets, Length(Self.Regions));

  hi := High(Self.Regions);

  Self.RegionOffsets[hi] := start;

  bitmap := Self.InternalLoadMap(fileName);
  aRegion := [start.X, start.Y, bitmap.getWidth()-1, bitmap.getHeight()-1];

  Self.RegionOffsets[hi].X -= padding;
  Self.RegionOffsets[hi].Y -= padding;

  bitmap.Pad(padding);

  Self.Regions[hi] := Box(0, 0, bitmap.GetWidth(), bitmap.GetHeight());
  bitmaps += bitmap;

  Self.Regions := Self.Regions.Pack();
  Self.Map.SetSize(Self.Regions.Merge.Width(), Self.Regions.Merge.Height());

  for i := 0 to High(Self.Regions) do
    Self.Map.DrawBitmap(bitmaps[i], Point(Self.Regions[i].X1, Self.Regions[i].Y1));

  Self.ScaledMap.Clear();
  Self.Map.Downsample(Scaling, Self.ScaledMap);

  for i := 0 to High(bitmaps) do
    bitmaps[i].Free();
end;



(*
## TRSWalkerMap.RegionIndexFromPoint
```pascal
function TRSWalkerMap.RegionIndexFromPoint(P: TPoint): Int32;
```
Internal TRSWalkerMap function used to return the region **p** belongs to.
You probably don't need to ever call this but can be useful for debugging.
*)
function TRSWalkerMap.RegionIndexFromPoint(p: TPoint): Int32;
var
  i: Int32;
begin
  Result := -1;

  for i := 0 to High(Self.Regions) do
    if p.InBox(Self.Regions[i]) then
      Exit(i);
end;

(*
## TRSWalkerMap.RegionToGlobal
```pascal
function TRSWalkerMap.RegionToGlobal(p: TPoint): TPoint;
```
Internal TRSWalkerMap function used to convert a region point **p** to a global point.
This is responsible for converting WalkerMap region point to the coordinates of that same point in the original map file the regions were cropped from.
You probably don't need to ever call this but can be useful for debugging.
*)
function TRSWalkerMap.RegionToGlobal(p: TPoint): TPoint;
var
  i: Int32;
begin
  Result := p;
  for i := 0 to High(Self.Regions) do
    if p.InBox(Self.Regions[i]) then
    begin
      Result += Self.RegionOffsets[i] - [Self.Regions[i].X1, Self.Regions[i].Y1];
      Exit(Result);
    end;
end;

(*
## TRSWalkerMap.GlobalToRegion
```pascal
function TRSWalkerMap.GlobalToRegion(RegionIndex: Int32; P: TPoint): TPoint;
```
Internal TRSWalkerMap function used to convert a global point **p** to a region point.
This is literally the inverse of TRSWalkerMap.RegionToGlobal().
You probably don't need to ever call this but can be useful for debugging.
*)
function TRSWalkerMap.GlobalToRegion(RegionIndex: Int32; P: TPoint): TPoint;
begin
  Result := P;
  if (RegionIndex > -1) then
    Result := Result - Self.RegionOffsets[RegionIndex] + [Self.Regions[RegionIndex].X1, Self.Regions[RegionIndex].Y1];
end;

begin
  RSWalkerRegions.WORLD          := [0, 0, 7500, 5645];
  RSWalkerRegions.ZEAH           := [0, 5600, 3170, 8630];
  RSWalkerRegions.EDGEVILLE      := [4209, 1918, 4487, 2180];
  RSWalkerRegions.VARROCK        := [4690, 2190, 4935, 2425];
  RSWalkerRegions.GRAND_EXCHANGE := [4460, 1900, 4800, 2250];
  RSWalkerRegions.LUNAR_ISLE     := [75, 75, 1000, 1000];
  RSWalkerRegions.LUMBRIDGE      := [4693, 2990, 5031, 3302];
  RSWalkerRegions.ISLE_OF_SOULS  := [180, 3910, 1500, 4990];

  RSWalkerLocations.GRAND_EXCHANGE  := [4628, 2061];
  RSWalkerLocations.EDGE_BANKERS    := [4358, 2047];
end;
