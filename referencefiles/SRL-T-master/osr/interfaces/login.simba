(*
# Login

Handles logging in players.

Summary:

- Add players with `Login.AddPlayer`
- Login the current player with `Login.LoginPlayer`
- Switch to the next player with `Login.NextPlayer`

Example:
```pascal
Login.AddPlayer('myusername', 'mypassword');
if not Login.LoginPlayer() then
  TerminateScript('Failed to login!');
```
*)

{$DEFINE SRL_LOGIN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
(*
(TRSLoginPlayer)=
## type TRSLoginPlayer
```pascal
TRSLoginPlayer = record
  User: String;
  Password: String;
  Pin: String;
  Worlds: TIntegerArray;
  Active: Boolean;
  BioHash: Double;
end;
```
Type responsible for managing player data.
You usually don't use this directly but instead use TRSLogin methods to interact with TRSLoginPlayers stored in TRSLogin.Players array.
The **Active** variable decides wether the player is inteded to be skipped or not by TRSLogin.
*)
  TRSLoginPlayer = record
    User: String;
    Password: String;
    Pin: String;
    Worlds: TIntegerArray;
    Active: Boolean;
    BioHash: Double;
  end;

(*
(TRSLogin)=
## type TRSLogin
```pascal
TRSLogin = record(TRSInterface)
  Players: array of TRSLoginPlayer;
  PlayerIndex: Int32;
  AllowDangerousWorlds: Boolean;
end;
```
Type responsible for handling login and managing cached TRSLoginPlayers.
*)
  TRSLogin = record(TRSInterface)
    Players: array of TRSLoginPlayer;
    PlayerIndex: Int32;

    AllowDangerousWorlds: Boolean;

    {%codetools off}
    WhiteOCRFilter, YellowOCRFilter: TOCRColorFilter;
    {%codetools on}
  end;

const
(*
## LOGIN_MESSAGES
```pascal
LOGIN_MESSAGE_NONE = '';
LOGIN_MESSAGE_CONNECTING = 'Connecting to server';
LOGIN_MESSAGE_INVALID_CREDENTIALS = 'Invalid credentials';
LOGIN_MESSAGE_NEED_SKILL_TOTAL = 'You need a skill total of';
LOGIN_MESSAGE_INVALID_USER_PASS = 'Please enter your username/email address.';
LOGIN_MESSAGE_ERROR_CONNECTING = 'Error connecting to server';
LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT = 'Your account has not logged out';
LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE = 'Login server offline';
LOGIN_MESSAGE_ERROR_LOADING_PROFILE = 'Error loading your profile';
LOGIN_MESSAGE_CONNECTION_TIMED_OUT = 'Connection timed out';
LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED = 'Login limit exceeded';
LOGIN_MESSAGE_WORLD_FULL = 'This world is full';
LOGIN_MESSAGE_ACCOUNT_DISABLED = 'Your account has been disabled';
LOGIN_MESSAGE_ACCOUNT_RULE_BREAKER = 'Your account has been involved';
LOGIN_MESSAGE_MEMBERS = 'You need a members account';
LOGIN_MESSAGE_IN_MEMBERS_AREA = 'You are standing in a members-only area';
LOGIN_MESSAGE_AUTHENTICATOR = 'Authenticator';
```
Global constants for most if not all login messages.

Each of this messages is stored in **LOGIN_MESSAGES** in the same order.
*)
  LOGIN_MESSAGE_NONE = '';
  LOGIN_MESSAGE_CONNECTING = 'Connecting to server';
  LOGIN_MESSAGE_INVALID_CREDENTIALS = 'Invalid credentials';
  LOGIN_MESSAGE_NEED_SKILL_TOTAL = 'You need a skill total of';
  LOGIN_MESSAGE_INVALID_USER_PASS = 'Please enter your username/email address.';
  LOGIN_MESSAGE_ERROR_CONNECTING = 'Error connecting to server';
  LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT = 'Your account has not logged out';
  LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE = 'Login server offline';
  LOGIN_MESSAGE_ERROR_LOADING_PROFILE = 'Error loading your profile';
  LOGIN_MESSAGE_CONNECTION_TIMED_OUT = 'Connection timed out';
  LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED = 'Login limit exceeded';
  LOGIN_MESSAGE_WORLD_FULL = 'This world is full';
  LOGIN_MESSAGE_ACCOUNT_DISABLED = 'Your account has been disabled';
  LOGIN_MESSAGE_ACCOUNT_RULE_BREAKER = 'Your account has been involved';
  LOGIN_MESSAGE_MEMBERS = 'You need a members account';
  LOGIN_MESSAGE_IN_MEMBERS_AREA = 'You are standing in a members-only area';
  LOGIN_MESSAGE_AUTHENTICATOR = 'Authenticator';

  LOGIN_MESSAGES = [
    LOGIN_MESSAGE_CONNECTING,
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_INVALID_USER_PASS,
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED,
    LOGIN_MESSAGE_ACCOUNT_RULE_BREAKER,
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA ,
    LOGIN_MESSAGE_AUTHENTICATOR
  ];

  LOGIN_DIALOG_OK = 'Ok';
  LOGIN_DIALOG_TRY_AGAIN = 'Try again';
  LOGIN_DIALOG_EXISTING_USER = 'Existing User';
  LOGIN_DIALOG_CONTINUE = 'Continue';

  LOGIN_DIALOGS = [
    LOGIN_DIALOG_OK,
    LOGIN_DIALOG_TRY_AGAIN,
    LOGIN_DIALOG_EXISTING_USER
  ];

  LOGIN_DIALOGS_DANGEROUS = [
    LOGIN_DIALOG_CONTINUE
  ];


(*
## Login.FindText
```pascal
function TRSLogin.FindText(Text: String; out B: TBox): Boolean;
function TRSLogin.FindText(Text: String): Boolean; overload;
```
Internal TRSLogin method used to find a message on the TRSLogin interface.
You probably will never to use this directly.
*)
function TRSLogin.FindText(text: String; out b: TBox): Boolean;
begin
  Result := (OCR.LocateText(Self.Bounds, text, RS_FONT_BOLD_12,  Self.WhiteOCRFilter, b) = 1) or
            (OCR.LocateText(Self.Bounds, text, RS_FONT_BOLD_12,  Self.YellowOCRFilter, b) = 1) or
            (OCR.LocateText(Self.Bounds, text, RS_FONT_PLAIN_12, Self.WhiteOCRFilter, b) = 1) or
            (OCR.LocateText(Self.Bounds, text, RS_FONT_PLAIN_11, Self.WhiteOCRFilter, b) = 1);
end;

function TRSLogin.FindText(text: String): Boolean; overload;
var
  b: TBox;
begin
  Result := Self.FindText(text, b);
end;

(*
## Login.IsReady
```pascal
function TRSLogin.IsReady(): Boolean;
```
Checks if the login screen is ready to login. In other words, has no dialogs up.

Example:
```pascal
WriteLn Login.IsReady();
```
*)
function TRSLogin.IsReady(): Boolean;
begin
  Result := Self.FindText('Welcome') or
            (Self.FindText('Login:') and Self.FindText('Password:'));
end;

(*
## Login.UsingLauncher
```pascal
function TRSLogin.UsingLauncher(): Boolean;
```
Checks if the client was launched by a launcher (Steam/Jagex Launcher) or was manually ran by the user.

Example:
```pascal
WriteLn Login.UsingLauncher();
```
*)
function TRSLogin.UsingLauncher(): Boolean;
begin
  Result := not Self.FindText('New User') and
            not Self.FindText('Existing User') and not Self.FindText('Login:')
            and not Self.FindText('Password:');
end;

(*
## Login.ClickText
```pascal
function TRSLogin.ClickText(Text: String): Boolean;
```
Internal TRSLogin method used to find the specified **Text** on the TRSLogin interface and click it.
You probably will never to use this directly.
*)
function TRSLogin.ClickText(text: String): Boolean;
var
  b: TBox;
begin
  Result := FindText(text, b);
  if Result then
    Mouse.Click(b, MOUSE_LEFT);
end;

(*
## Login.ClickWorld
```pascal
function TRSLogin.ClickWorld(World: Int32): Boolean;
```
Internal TRSLogin method used to click a world on the login interface.
You probably will never to use this directly.
*)
function TRSLogin.ClickWorld(World: Int32): Boolean;
var
  B: TBox;
begin
  Result := OCR.LocateText(Self.Bounds, ToString(World), RS_FONT_BOLD_12, TOCRColorFilter.Create([$000000]), B) = 1;

  if Result then
  begin
    if (not Self.AllowDangerousWorlds) then
    begin
      // normal free(silver) or members(gold) world
      if (SRL.CountColor(CTS1(4089471, 20), B) = 0) and
         (SRL.CountColor(CTS1(8421504, 25), B) = 0) then
        Self.Fatal('Not allowed to login to dangerous worlds (' + ToString(World) + ')');
    end;

    Mouse.Click(B, MOUSE_LEFT);
  end;
end;

(*
## Login.IsOpen
```pascal
function TRSLogin.IsOpen(): Boolean;
```
TRSLogin method used to check if we are on the login screen.

Example:
```pascal
WriteLn Login.IsOpen();
```
*)
function TRSLogin.IsOpen(): Boolean;
begin
  Result := Self.FindText('Click to switch');
end;

(*
## Login.IsWorldSwitcherOpen
```pascal
function TRSLogin.IsWorldSwitcherOpen(): Boolean;
```
TRSLogin method used to check if the login world switcher is open.

Example:
```pascal
WriteLn Login.IsWorldSwitcherOpen();
```
*)
function TRSLogin.IsWorldSwitcherOpen(): Boolean;
begin
  Result := Self.FindText('Cancel');
end;

(*
## Login.OpenWorldSwitcher
```pascal
function TRSLogin.OpenWorldSwitcher(): Boolean;
```
TRSLogin method used to open the login screen world switcher.

Example:
```pascal
if not Login.IsWorldSwitcherOpen() then
  WriteLn Login.OpenWorldSwitcher();
```
*)
function TRSLogin.OpenWorldSwitcher(): Boolean;
begin
  Result := ClickText('Click to switch') and WaitUntil(Self.IsWorldSwitcherOpen(), 500, 5000);
end;

(*
## Login.CloseWorldSwitcher
```pascal
function TRSLogin.CloseWorldSwitcher(): Boolean;
```
TRSLogin method used to close the login screen world switcher.

Example:
```pascal
if Login.IsWorldSwitcherOpen() then
  WriteLn Login.CloseWorldSwitcher();
```
*)
function TRSLogin.CloseWorldSwitcher(): Boolean;
begin
  Result := Self.IsOpen() or (Self.ClickText('Cancel') and WaitUntil(Self.IsOpen(), 100, 1000));
end;

(*
## Login.GetCurrentWorld
```pascal
function TRSLogin.GetCurrentWorld(): Int32;
```
Returns the currently selected world.

Example:
```pascal
WriteLn Login.GetCurrentWorld();
```
*)
function TRSLogin.GetCurrentWorld(): Int32;
var
  B: TBox;
begin
  if Self.CloseWorldSwitcher() and Self.FindText('Click to switch', B) then
  begin
    B.Y1 -= 25;

    Result := OCR.RecognizeNumber(B, TOCRColorFilter.Create([$FFFFFF]), RS_FONT_BOLD_12);
  end;
end;

(*
## Login.SwitchToWorld
```pascal
function TRSLogin.SwitchToWorld(World: Int32): Boolean;
```
Attempts to switch the current world to the **World** specified.

Example:
```pascal
WriteLn Login.SwitchToWorld(303);
```
*)
function TRSLogin.SwitchToWorld(World: Int32): Boolean;
var
  i: Int32;
begin
  if Self.GetCurrentWorld() = World then
    Exit(True);

  if Self.OpenWorldSwitcher() then
  begin
    for i := 1 to 3 do // Three pages of worlds
    begin
      if Self.ClickWorld(World) then
      begin
        Result := Self.GetCurrentWorld() = World;
        Exit;
      end;

      Keyboard.PressKey(VK_RIGHT);

      Wait(500, 5000, wdLeft);
    end;
  end;
end;

(*
## Login.HandleDialogs
```pascal
function TRSLogin.HandleDialogs(): Boolean;
```
Internal TRSLogin method used to handle the dialog messages.
You probably will never need to call this directly.
*)
function TRSLogin.HandleDialogs(): Boolean;
var
  Dialog: String;
begin
  for Dialog in LOGIN_DIALOGS do
    if Self.ClickText(' ' + Dialog + ' ') then
      Exit(True);

  for Dialog in LOGIN_DIALOGS_DANGEROUS do
    case Self.AllowDangerousWorlds of
      True:
        if Self.ClickText(' ' + Dialog + ' ') then
          Exit(True);

      False:
        if Self.FindText(' ' + Dialog + ' ') then
          Self.Fatal('Not allowed to login to dangerous worlds (' + ToString(Self.GetCurrentWorld()) + ')');
    end;
end;

(*
## Login.EnterField
```pascal
function TRSLogin.EnterField(Field, Details: String): Boolean;
```

Used to enter player details in the login screen.
This is not an internal method but you probably will never need to call this directly.

Example:
```pascal
WriteLn Login.EnterField('Login:', 'my user name') and
        Login.EnterField('Password:', 'my password');
```
*)
function TRSLogin.EnterField(Field, Details: String): Boolean;
var
  B: TBox;
begin
  if Self.FindText(Details + ' ') then
    Exit(True);

  if Self.FindText(Field, B) then
  begin
    B.X1 := B.X2;
    B.X2 := B.X1 + 250;

    // Move caret
    while not WaitUntil(SRL.CountColor($00FFFF, B) > 15, 100, SRL.TruncatedGauss(800, 1600)) do
    begin
      if not Self.IsOpen() then
        Exit(False);

      Keyboard.PressKey(VK_TAB);
    end;

    // Erase field
    while SRL.CountColor($FFFFFF, B) > 0 do
      Keyboard.PressKey(VK_BACK);
    Keyboard.Send(Details);

    Wait(0, 1000, wdLeft);

    Result := True;
  end;
end;

(*
## Login.GetLoginMessage
```pascal
function TRSLogin.GetLoginMessage(): String;
```
Returns the login message that matches any of the messages stored in the constant **LOGIN_MESSAGES**.
This is not an internal method but you probably will never need to call this directly.

Example:
```pascal
WriteLn Login.GetLoginMessage();
```
*)
function TRSLogin.GetLoginMessage(): String;
var
  i: Int32;
begin
  Result := LOGIN_MESSAGE_NONE;

  for i := 0 to High(LOGIN_MESSAGES) do
    if Self.FindText(LOGIN_MESSAGES[i]) then
    begin
      Result := LOGIN_MESSAGES[i];

      Exit;
    end;
end;

(*
## Login.HandleMessage
```pascal
function TRSLogin.HandleMessage(Message: String): Boolean;
```
Attempts to handle the currently displayed login message.
This is not an internal method but you probably will never need to call this directly.

Example:
```pascal
WriteLn Login.HandleMessage(Login.GetLoginMessage());
```
*)
function TRSLogin.HandleMessage(Message: String): Boolean;
begin
  Self.DebugLn('Handling login message: ' + Message);

  case Message of
    // Cannot recover
    LOGIN_MESSAGE_MEMBERS,
    LOGIN_MESSAGE_IN_MEMBERS_AREA,
    LOGIN_MESSAGE_NEED_SKILL_TOTAL,
    LOGIN_MESSAGE_ACCOUNT_DISABLED,
    LOGIN_MESSAGE_ACCOUNT_RULE_BREAKER,
    LOGIN_MESSAGE_AUTHENTICATOR:
      Result := False;

    // Retry
    LOGIN_MESSAGE_INVALID_CREDENTIALS,
    LOGIN_MESSAGE_INVALID_USER_PASS:
      Result := True;

    // Retry after ~15 seconds
    LOGIN_MESSAGE_ERROR_CONNECTING,
    LOGIN_MESSAGE_ACCOUNT_NOT_LOGGED_OUT,
    LOGIN_MESSAGE_LOGIN_SERVER_OFFLINE,
    LOGIN_MESSAGE_ERROR_LOADING_PROFILE,
    LOGIN_MESSAGE_CONNECTION_TIMED_OUT,
    LOGIN_MESSAGE_LOGIN_LIMIT_EXCEEDED,
    LOGIN_MESSAGE_WORLD_FULL:
      begin
        Wait(10000, 20000);

        Result := True;
      end;

    // No handler
    else
      Self.Fatal('Unknown login message');
  end;
end;

(*
## Login.EnterGame
```pascal
function TRSLogin.EnterGame(): Boolean;
```

Attempts to login into the game.
This is not an internal method but you probably will never need to call this directly.
This assumes that the player username and password are already filled in.

Example:
```pascal
if Login.EnterField('Login:', 'my user name') and
   Login.EnterField('Password:', 'my password') then
  WriteLn Login.EnterGame();
```
*)
function TRSLogin.EnterGame(): Boolean;
var
  current, timeout, failsafe: UInt64;
begin
  current  := GetTickCount();
  timeout  := current + 15000;
  failsafe := current + Random(5000, 7000);
  Self.DebugLn('Handling lobby screen.');

  while not RSClient.IsLoggedIn() do
  begin
    if Self.ClickText('CLICK HERE TO PLAY') then
      if RSClient.IsLoggedIn(5000) then exit(True);

    current := GetTickCount();
    if (current > timeout) then
    begin
      Self.DebugLn('Lobby screen timed out.');
      Exit;
    end;

    if RSClient.IsLoggedIn() then
      Exit(True);

    if current > failsafe then
      Mouse.Move(Box(Mouse.Position(), 10, 10), True);

    Wait(300, 600);
  end;

  Result := RSClient.IsLoggedIn(5000);
end;

(*
## Login.GetPlayer
```pascal
function TRSLogin.GetPlayer(): TRSLoginPlayer;
```
Returns the currently selected TRSLoginPlayer.
The currently selected TRSLoginPlayer is decided by TRSLogin.PlayerIndex which
is an index of the TRSLogin.Players array.

Example:
```pascal
  WriteLn Login.GetPlayer().Username;
```
*)
function TRSLogin.GetPlayer(): TRSLoginPlayer;
begin
  if Self.Players = [] then
    Self.Fatal('No players declared: Add an account if you want scripts to handle login.');
  if not InRange(Self.PlayerIndex, 0, High(Self.Players)) then
    Self.Fatal('Player is out of range: Account number selected in script does not exist.');

  Result := Self.Players[Self.PlayerIndex];
end;

(*
## Login.DoLogin
```pascal
function TRSLogin.DoLogin(player: TRSLoginPlayer; launcher: Boolean = False): Boolean;
```
Performs a login in the loginscreen with the specified player.
*)
function TRSLogin.DoLogin(player: TRSLoginPlayer; launcher: Boolean = False): Boolean;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
begin
  if launcher then
  begin
    SRL.FindColors(tpa, CTS0(591881, 12), Self.Bounds);

    if tpa = [] then
      Exit;

    atpa := tpa.Cluster(3);
    atpa.FilterDimensions(200, 50, 230, 70);

    if Length(atpa) <> 1 then
      Exit;
    tpa := atpa[0];

    b := tpa.Bounds();
    b.Y2 -= 18;
    Mouse.Click(b, MOUSE_LEFT, True);
    Exit(True);
  end;

  Result := Self.EnterField('Login:', player.User) and
            Self.EnterField('Password:', player.Password);

  if Result then
    Keyboard.PressKey(VK_ENTER);
end;

(*
## Login.WaitLoginMessage
```pascal
function TRSLogin.WaitLoginMessage(): Boolean;
```
Waits for a login message after a login was performed, returns true if we successfully enter the game lobby.
*)
function TRSLogin.WaitLoginMessage(): Boolean;
var
  message: String;
  timeout: UInt64;
begin
  timeout := GetTickCount() + 80000; //80 seconds.
  Self.DebugLn('Waiting for login message.');
  while Self.IsOpen() do
  begin
    message := Self.GetLoginMessage();
    if (message <> LOGIN_MESSAGE_CONNECTING) and
       (message <> LOGIN_MESSAGE_NONE) then
      Break;

    if GetTickCount() >= timeout then
    begin
      Self.DebugLn('Login attempt timed out.');
      Exit;
    end;

    Wait(500);
  end;

  Result := not Self.IsOpen() or Self.HandleMessage(message);
end;

(*
## Login.LoginPlayer
```pascal
function TRSLogin.LoginPlayer(): Boolean;
```
Attempts to login the current selected player into the game.
The currently selected player is decided by TRSLogin.PlayerIndex which is an
index of the TRSLogin.Players array.

Example:
```pascal
WriteLn Login.LoginPlayer();
```
*)
function TRSLogin.LoginPlayer(): Boolean; 
var
  attempts, world: Int32;
  timeout: UInt64;
  player: TRSLoginPlayer;
  isLauncher: Boolean;
begin
  Self.DebugLn('Logging in player');

  timeout := GetTickCount() + 40000;

  while not Self.IsReady() do
  begin
    if Self.FindText('CLICK HERE TO PLAY') then
      Exit(Self.EnterGame());

    if Self.HandleDialogs() then
      Wait(500);

    if GetTickCount() > timeout then
    begin
      Self.DebugLn('Timed out waiting for the loginscreen to be ready.');
      Exit;
    end;
  end;

  player := Self.GetPlayer();
  isLauncher := Self.UsingLauncher();

  if isLauncher then
    Self.DebugLn('Jagex Launcher login detected.')
  else
  begin
    Self.DebugLn('Legacy login detected.');
    if (player.User = '') or (player.Password = '') then
      Self.Fatal('Player has no username or password');
  end;

  while Self.IsOpen() and (attempts < 10) do
  begin
    Self.DebugLn('Attempt ' + ToString(attempts + 1));

    if player.Worlds <> [] then
      if not (Self.GetCurrentWorld() in player.Worlds) or SRL.Dice(30) then
      begin
        world := Player.Worlds[Random(Length(Player.Worlds))];
        if (not Self.SwitchToWorld(world)) then
          Exit;
      end;

    if Self.HandleDialogs() then
      Wait(500);

    if Self.DoLogin(player, isLauncher) and not Self.WaitLoginMessage() then
      Exit;

    Inc(attempts);
  end;

  Result := Self.EnterGame();
end;

(*
## Login.LoginPlayer overload which allows for fully customizable hop and percentage.
It's coded to behave as the default if you just prefer having the option to customize.
```pascal
function TRSLogin.LoginPlayer(randomHop; hopChance): Boolean; overload;
```
Attempts to login the current selected player into the game.
The currently selected player is decided by TRSLogin.PlayerIndex which is an
index of the TRSLogin.Players array.

Example:
```pascal
WriteLn Login.LoginPlayer(True, 90); // When on the main login lobby, has a 90% chance to hop
```
*)

function TRSLogin.LoginPlayer(randomHop: Boolean; hopChance: Int32 = 30): Boolean; overload;
var
  attempts, world: Int32;
  timeout: UInt64;
  player: TRSLoginPlayer;
  isLauncher: Boolean;
begin
  Self.DebugLn('Logging in player');

  timeout := GetTickCount() + 40000;

  while not Self.IsReady() do
  begin
    if Self.FindText('CLICK HERE TO PLAY') then
      Exit(Self.EnterGame());

    if Self.HandleDialogs() then
      Wait(500);

    if GetTickCount() > timeout then
    begin
      Self.DebugLn('Timed out waiting for the loginscreen to be ready.');
      Exit;
    end;
  end;

  player := Self.GetPlayer();
  isLauncher := Self.UsingLauncher();

  if isLauncher then
    Self.DebugLn('Jagex Launcher login detected.')
  else
  begin
    Self.DebugLn('Legacy login detected.');
    if (player.User = '') or (player.Password = '') then
      Self.Fatal('Player has no username or password');
  end;

  while Self.IsOpen() and (attempts < 10) do
  begin
    Self.DebugLn('Attempt ' + ToString(attempts + 1));

    if (player.Worlds <> []) and randomHop then
      if not (Self.GetCurrentWorld() in player.Worlds) or SRL.Dice(hopChance) then
      begin
        world := Player.Worlds[Random(Length(Player.Worlds))];
        if (not Self.SwitchToWorld(world)) then
          Exit;
      end;

    if Self.HandleDialogs() then
      Wait(500);

    if Self.DoLogin(player, isLauncher) and not Self.WaitLoginMessage() then
      Exit;

    Inc(attempts);
  end;

  Result := Self.EnterGame();
end;   

(*
## Login.AddPlayer
```pascal
procedure TRSLogin.AddPlayer(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
```
Adds a TRSLoginPlayer to the TRSLogin.Players array.

Example:
```pascal
Login.AddPlayer('my username', 'my password', '0000'); //Adds a player to TRSLogin.Players
Login.PlayerIndex := High(Login.Players);              //Our added TRSLoginPlayer will be the last in the array.
Login.LoginPlayer();                                   //Login Login.Players[Login.PlayerIndex]
```
*)
procedure TRSLogin.AddPlayer(user, pass: String; pin: String = ''; worlds: TIntegerArray = []);
begin
  Self.Players += [user, pass, pin, worlds, true];
end;

(*
## Login.NextPlayer
```pascal
procedure TRSLogin.NextPlayer(DisableCurrentPlayer: Boolean);
```
This basically increments TRSLogin.PlayerIndex to the next TRSLoginPlayer that has the **Active** variable set to true.
If TRSLogin.PlayerIndex is already set to our last TRSLoginPlayer, then it's reset to 0 and set to the first **Active** player.

Example:
```pascal
WriteLn Login.PlayerIndex;
Login.NextPlayer(True);        //Make sure you have a couple of players to run this example properly.
WriteLn Login.PlayerIndex;
```
*)
procedure TRSLogin.NextPlayer(disableCurrentPlayer: Boolean);

  function Next(): Int32;
  var
    i: Int32;
  begin
    Result := -1;

    for i := Self.PlayerIndex + 1 to High(Self.Players) do
      if Self.Players[i].Active then
        Exit(i);
    for I := 0 to Self.PlayerIndex - 1 do // wrap around
      if Self.Players[i].Active then
        Exit(i);
  end;

begin
  Self.Players[Self.PlayerIndex].Active := not disableCurrentPlayer;

  Self.PlayerIndex := Next();
  if (Self.PlayerIndex = -1) then
    Self.Fatal('No other active players to switch to');
end;


(*
## Login.GetPlayerPin
```pascal
function TRSLogin.GetPlayerPin(): String;
```
Get the current player bank pin.

Example:
```pascal
if BankPin.IsOpen() then
  BankPin.Enter(Login.GetPlayerPin());
```
*)
function TRSLogin.GetPlayerPin(): String;
begin
  Result := Self.GetPlayer().Pin;
  if (Length(Result) <> 4) or (not Result.IsDigit()) then
    Self.Fatal('Invalid bank pin');
end;

(*
## Login.GetPlayerBioHash
```pascal
function TRSLogin.GetPlayerBioHash(): Double;
```
Get the current player BioHash.

Example:
```pascal
WriteLn Login.GetPlayerBioHash();
```
*)
function TRSLogin.GetPlayerBioHash(): Double;
var
  h: UInt32;
begin
  if Self.Players = [] then
    Self.Fatal('No players declared: Add an account if you want scripts to handle login.');
  if not InRange(Self.PlayerIndex, 0, High(Self.Players)) then
    Self.Fatal('Player is out of range: Account number selected in script does not exist.');

  if (Self.Players[Self.PlayerIndex].BioHash = 0) then
  begin
    h := Self.Players[Self.PlayerIndex].User.Hash();
    Self.Players[Self.PlayerIndex].BioHash := h / $FFFFFFFF;
  end;

  Result := Self.Players[Self.PlayerIndex].BioHash;
end;


(*
## Login.Draw
```pascal
procedure TRSLogin.Draw(Bitmap: TMufasaBitmap); override;
```
Internal TRSLogin method used for debugging.
You probably will never need to call this directly but can be useful for debugging.
This is automatically called with **SRL.Debug()**.

Example:
```pascal
SRL.Debug();
```
*)
procedure TRSLogin.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
end;

(*
## Login.Setup
```pascal
procedure TRSLogin.Setup(); override;
```
Internal TRSLogin setup method. This is automatically called by SRL and you
probably will never need to call this directly.
*)
procedure TRSLogin.Setup(); override;
begin
  inherited;

  Self.Name := 'Login';
  Self.WhiteOCRFilter := TOCRColorFilter.Create([$FFFFFF]);
  Self.YellowOCRFilter := TOCRColorFilter.Create([$00FFFF]);
end;

(*
## Login.SetupAlignment
```pascal
procedure TRSLogin.SetupAlignment(); overload;
```
Internal TRSLogin aligment method. This is automatically called by SRL and you
probably will never need to call this directly.

This is responsible for setting up the TRSLogin interface coordinates.
*)
procedure TRSLogin.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left   := RootInterface.Bounds.X1;
  alignment.Right  := RootInterface.Bounds.X2;
  alignment.Top    := RootInterface.Bounds.Y1;
  alignment.Bottom := RootInterface.Bounds.Y1 + 502;
  alignment.MaxWidth := 764;
  alignment.MaxHeight := 0;

  Self.SetupAlignment(alignment);
end;

(*
(Login)=
## var Login
Global TRSLogin variable.
*)
var
  Login: TRSLogin;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Login.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Login.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Login.Draw(Bitmap);
end;
