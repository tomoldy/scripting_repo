(*
# DepositBox
Methods to interact with the deposit box interface.
*)

{$DEFINE SRL_DEPOSITBOX_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSDepositButton = (
    LOCK_SETTINGS,
    QUANTITY_1, QUANTITY_5, QUANTITY_10, QUANTITY_CUSTOM, QUANTITY_ALL,
    DEPOSIT_WORN, DEPOSIT_LOOT, DEPOSIT_INVENTORY
  );

  TRSDepositBox = record(TRSTitledInterface)
    Items: TRSItemInterface;
    InventorySlotBoxes, EquipmentSlotBoxes : TBoxArray;
    Buttons: TRSButtonArray;
  end;

function TRSDepositBox.GetAllSlotBoxes(): TBoxArray;
begin
  Result := Self.InventorySlotBoxes + Self.EquipmentSlotBoxes;
end;

procedure TRSDepositBox.Setup(); override;
begin
  inherited;
  Self.Name := 'DepositBox';
  Self.Items.Name := Self.Name + '.Items';
  Self.Items.SlotBoxesFunction := @Self.GetAllSlotBoxes;
end;

procedure TRSDepositBox.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
const
  BUTTON_ENABLED_COLORS : array of TCTS1Color = [[2369440, 5], [2700350, 5]];
begin
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 425;
  alignment.MaxHeight := 313;

  case RSClient.Mode of
    ERSClientMode.FIXED:
    begin
      alignment.Left := InterfaceArea.Bounds.X1;
      alignment.Top := InterfaceArea.Bounds.Y1;
    end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
    begin
      alignment.Left := InterfaceArea.Bounds.X1 - 1;
      alignment.Top := InterfaceArea.Bounds.Y1 - 1;
    end;
  end;

  Self.SetupAlignment(alignment);

  Self.EquipmentSlotBoxes := [
    Box(77,56,110,89), Box(36,95,69,128), // Helm, Cape
    Box(77,95,110,128), Box(118,95,151,128), // Neck, Ammo
    Box(21,134,54,167), Box(77,134,110,167), // Weapon, Body
    Box(133,134,166,167), Box(77,173,110,206), // Shield, Legs
    Box(21,213,54,246), Box(77,213,110,246), // Hands, Feet
    Box(133,213,166,246)  // Ring
  ];
  Self.EquipmentSlotBoxes := Self.EquipmentSlotBoxes.Offset(Point(Self.Bounds.X1, Self.Bounds.Y1));

  Self.InventorySlotBoxes := Grid(4, 7, 33, 33, [9, 3], [Self.Bounds.X1 + 195, Self.Bounds.Y1 + 48]);

  Self.Buttons := [
    [BUTTON_ENABLED_COLORS, 0, Box(379,42,412,69).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,55).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 1, Box(379,95,412,128).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,111).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 2, Box(379,138,412,171).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,154).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 3, Box(379,181,412,214).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,197).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 4, Box(379,224,412,257).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,240).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 5, Box(379,267,412,300).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(395,283).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 6, Box(21,267,58,300).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(39,283).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 7, Box(75,267,112,300).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(93,283).Offset(Self.Bounds.X1, Self.Bounds.Y1)],
    [BUTTON_ENABLED_COLORS, 8, Box(129,267,166,300).Offset([Self.Bounds.X1, Self.Bounds.Y1]), Point(147,283).Offset(Self.Bounds.X1, Self.Bounds.Y1)]
  ];
end;

function TRSDepositBox.GetButton(button: ERSDepositButton): TRSButton;
begin
  Result := Self.Buttons[button];
end;

function TRSDepositBox.IsOpen(): Boolean; overload;
begin
  Result := StringMatch(Self.GetTitle.After(' - '), 'Deposit Box') >= 0.85;
end;

function TRSDepositBox.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSDepositBox.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSDepositBox.FindInventoryItems(items: TRSItemArray): TIntegerArray;
var
  matches: TRSItemFinderMatchArray;
  i: Int32;
begin
  if not Self.IsOpen then
    Exit;
  matches := ItemFinder.FindAll(items, Self.InventorySlotBoxes);

  SetLength(Result, Length(matches));
  for i := 0 to High(matches) do
    Result[I] := matches[I].Index;
end;

function TRSDepositBox.FindEquipmentItems(items: TRSItemArray): TIntegerArray;
var
  matches: TRSItemFinderMatchArray;
  i: Int32;
begin
  if not Self.IsOpen then
    Exit;
  matches := ItemFinder.FindAll(items, Self.EquipmentSlotBoxes);

  SetLength(Result, Length(matches));
  for I := 0 to High(matches) do
    Result[I] := matches[I].Index;
end;

function TRSDepositBox.FindInventoryItem(item: TRSItem): Int32;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := -1;
  if ItemFinder.Find([item], Self.InventorySlotBoxes, match) then
    Result := match.Index;
end;

function TRSDepositBox.FindEquipmentItem(item: TRSItem): Int32;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := -1;
  if ItemFinder.Find([item], Self.EquipmentSlotBoxes, match) then
    Result := match.Index;
end;

function TRSDepositBox.FindInventoryItem(item: TRSItem; out box: TBox): Boolean; overload;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := ItemFinder.Find([item], Self.InventorySlotBoxes, match);
  box := match.Box;
end;

function TRSDepositBox.FindEquipmentItem(item: TRSItem; out box: TBox): Boolean; overload;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := ItemFinder.Find([item], Self.EquipmentSlotBoxes, match);
  box := match.Box;
end;

function TRSDepositBox.ContainsInventoryItem(item: TRSItem): Boolean;
var
  b: TBox;
begin
  Result := Self.FindInventoryItem(item, b);
end;

function TRSDepositBox.ContainsEquipmentItem(item: TRSItem): Boolean;
var
  b: TBox;
begin
  Result :=  Self.FindEquipmentItem(item, b);
end;

function TRSDepositBox.ContainsAnyInventoryItems(items: TRSItemArray): Boolean;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := ItemFinder.Find(items, Self.InventorySlotBoxes, match);
end;

function TRSDepositBox.ContainsAnyEquipmentItems(items: TRSItemArray): Boolean;
var
  match: TRSItemFinderMatch;
begin
  if not Self.IsOpen then
    Exit;
  Result := ItemFinder.Find(items, Self.EquipmentSlotBoxes, match);
end;

function TRSDepositBox.ContainsAllInventoryItems(items: TRSItemArray): Boolean;
var
  matches: TRSItemFinderMatchArray;
  match: TRSItemFinderMatch;
  found: TRSItemArray;
begin
  if not Self.IsOpen then
    Exit;

  matches := ItemFinder.FindAll(items, Self.InventorySlotBoxes);
  if Length(matches) = 0 then
    Exit;

  for match in matches do
    if not found.Contains(match.Item) then
      found += match.Item;

  Result := items.Len = found.Len;
end;

function TRSDepositBox.ContainsAllEquipmentItems(items: TRSItemArray): Boolean;
var
  matches: TRSItemFinderMatchArray;
  match: TRSItemFinderMatch;
  found: TRSItemArray;
begin
  if not Self.IsOpen then
    Exit;

  matches := ItemFinder.FindAll(items, Self.EquipmentSlotBoxes);
  if Length(matches) = 0 then
    Exit;

  for match in matches do
    if not found.Contains(match.Item) then
      found += match.Item;

  Result := items.Len = found.Len;
end;

function TRSDepositBox.CountInventoryItem(item: TRSItem): Int32;
begin
  Result := Length(Self.FindInventoryItems([item]));
end;

function TRSDepositBox.CountInventoryItemStack(item: TRSItem): Int32;
var
  b: TBox;
begin
  if Self.FindInventoryItem(item, b) then
    Result := SRL.GetItemAmount(b);
end;

function TRSDepositBox.CountEquipmentItemStack(item: TRSItem): Int32;
var
  b: TBox;
begin
  if Self.FindEquipmentItem(item, b) then
    Result := SRL.GetItemAmount(b);
end;

function TRSDepositBox.ClickInventoryItem(item: TRSItem; option: String = ''): Boolean;
var
  b : TBox;
begin
  if not Self.FindInventoryItem(item, b) then
    Exit;

  Mouse.Move(b, True);

  if option = '' then begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;

function TRSDepositBox.ClickEquipmentItem(item: TRSItem; option: String = ''): Boolean;
var
  b : TBox;
begin
  if not Self.FindEquipmentItem(item, b) then
    Exit;

  Mouse.Move(b, True);

  if option = '' then begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;

function TRSDepositBox.DepositHelper(b: TBox; amount: Int32; useQuantityButtons: Boolean): Boolean;
var
  Button: TRSButton;
begin
  if UseQuantityButtons then
  begin
    if Bank.IsCustomQuantity(Amount) then
    begin
      Button := Self.Buttons[ERSDepositButton.QUANTITY_CUSTOM];

      if Button.Enable then
      begin
        Mouse.Move(B);

        if MainScreen.IsUpText('Deposit-' + ToString(Amount)) then
        begin
          Mouse.Click(MOUSE_LEFT);

          Result := True;
        end else
          Result := ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 4000));
      end;
    end else
    begin
      case Amount of
        1:  Button := Self.Buttons[ERSDepositButton.QUANTITY_1];
        5:  Button := Self.Buttons[ERSDepositButton.QUANTITY_5];
        10: Button := Self.Buttons[ERSDepositButton.QUANTITY_10];
        else
            Button := Self.Buttons[ERSDepositButton.QUANTITY_ALL]
      end;

      if Button.Enable then
      begin
        Result := True;

        Mouse.Click(B, MOUSE_LEFT);
      end;
    end;
  end else
  begin
    Mouse.Move(B);

    case Amount of
      Bank.QUANTITY_ALL:
        Result := ChooseOption.Select('Deposit-All');
      else
        Result := ChooseOption.Select('Deposit-' + ToString(Amount) + ' ', MOUSE_LEFT, True, False) or
                  ChooseOption.Select('Deposit-X') and Chat.AnswerQuery('Enter amount', ToString(Amount), Random(2000, 2500));
    end;
  end;
end;

function TRSDepositBox.DepositItem(item: TRSBankItem; useQuantityButtons: Boolean): Boolean;
var
  b: TBox;
begin
  if Self.FindInventoryItem(item.Item, b) then
    Result := Self.DepositHelper(b, item.Quantity, useQuantityButtons);
end;

function TRSDepositBox.DepositItem(Item: TRSItem; useQuantityButtons: Boolean): Boolean; overload;
var
  tmp: TRSBankItem;
begin
  tmp := tmp.Setup(item);
  Result := Self.DepositItem(tmp, useQuantityButtons);
end;

function TRSDepositBox.DepositItemArray(items: array of TRSBankItem; useQuantityButtons: Boolean): Boolean;
var
  item: TRSBankItem;
begin
  Result := True;
  for item in items do
    if not Self.DepositItem(item, useQuantityButtons) then
      Result := False;
end;

function TRSDepositBox.DepositItemArray(items: TRSItemArray; useQuantityButtons: Boolean): Boolean; overload;
var
  item: TRSItem;
begin
  Result := True;
  for item in items do
    if not Self.DepositItem(item, useQuantityButtons) then
      Result := False;
end;

function TRSDepositBox.DepositInventory(): Boolean;
begin
  Result := Self.IsOpen() and Self.Buttons[ERSDepositButton.DEPOSIT_INVENTORY].Click();
end;

function TRSDepositBox.DepositAll(): Boolean; deprecated 'Use TRSDepositBox.DepositInventory().';
begin
  Result := Self.DepositInventory();
end;

var
  DepositBox: TRSDepositBox;

function TRSGameTabs.GetCurrentTab(): ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and (Bank.IsOpen() or DepositBox.IsOpen()) then
    Result := ERSGameTab.INVENTORY;
end;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  DepositBox.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  DepositBox.Setup();
end;
