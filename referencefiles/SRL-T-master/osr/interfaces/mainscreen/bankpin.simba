(*
# BankPin
Methods to interact with the bank pin interface.
*)

{$DEFINE SRL_BANKPIN_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSBankPin = record(TRSTitledInterface)
    DigitFilter, ButtonFilter: TOCRColorFilter;
  end;

procedure TRSBankPin.Setup(); override;
begin
  inherited;
  
  Self.Name := 'Bank Pin';
  Self.ButtonColors := [CTS1(988769, 30)];
  Self.DigitFilter := TOCRColorFilter.Create([$FFFFFF]);
  Self.ButtonFilter := TOCRColorFilter.Create([$007FFF])
end;

procedure TRSBankPin.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := InterfaceArea.Bounds.X1;
  alignment.Right := InterfaceArea.Bounds.X2;
  alignment.Bottom := InterfaceArea.Bounds.Y2;
  alignment.MaxWidth := 488;
  alignment.MaxHeight := 305;

  case RSClient.Mode of
    ERSClientMode.FIXED:
      alignment.Top := InterfaceArea.Bounds.Y1 + 11;
    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      alignment.Top := InterfaceArea.Bounds.Y1 + 10;
  end;

  Self.SetupAlignment(alignment);
end;

function TRSBankPin.GetButtons(): TRSButtonArray;
begin
  Result := FindButtons([[56,56]]);
end;


function TRSBankPin.ButtonsLoaded(): Boolean;
const
  DIGITS: TStringArray = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
var
  buttons: TRSButtonArray;
  i: Int32;
  loaded: TBoolArray;
  digit: String;
begin
  buttons := Self.GetButtons();
  if Length(buttons) <> 10 then Exit;

  for i := 0 to High(buttons) do
  begin
    digit := OCR.Recognize(buttons[i].Bounds.Expand(5), Self.ButtonFilter, RS_FONT_BOLD_12);
    if DIGITS.Contains(digit) then loaded += True;
    if Length(loaded) > 2 then
      Exit(True);
  end;
end;


(*
## BankPin.IsOpen
```pascal
function TRSBankPin.IsOpen(): Boolean;
function TRSBankPin.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
```
Returns true if the bank pin is open.

Example:
```pascal
WriteLn BankPin.IsOpen();
```
*)
function TRSBankPin.IsOpen(): Boolean;
begin
  Result := Length(Self.GetButtons()) = 10;
end;

function TRSBankPin.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), interval, waitTime);
end;

(*
## BankPin.ClickDigit
```pascal
function TRSBankPin.ClickDigit(digit: Char): Boolean; override;
```
Clicks a bank pin digit.

```{note}
Original method by Olly, fixed by INeedBot.
```
*)
function TRSBankPin.ClickDigit(digit: Char): Boolean;
var
  buttons: TRSButtonArray;
  i: Int32;
  hovering: Boolean;
begin
  buttons := Self.GetButtons();
  if Length(buttons) <> 10 then
    Exit;

  for i := 0 to High(buttons) do
  begin
    if OCR.LocateText(buttons[i].Bounds.Expand(5), digit, RS_FONT_BOLD_12, TOCRColorFilter.Create([$007FFF]), 1) then
    begin
      Mouse.Click(buttons[i].Bounds, MOUSE_LEFT);
      Exit(True);
    end;

    if buttons[i].Bounds.Expand(5).Contains(Mouse.Position()) then
      hovering := True;
  end;

  if hovering then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;
end;

(*
## BankPin.Enter
```pascal
function TRSBankPin.Enter(pin: String): Boolean;
```
Handles entering the bank pin. Will do 4 attempts before terminating with a fatal error.

Example:
```pascal
BankPin.Enter('0000');
```
*)
function TRSBankPin.Enter(pin: String; attempts: Int32 = 3): Boolean;

  function _GetDigitToEnter(): Char;
  const
    DIGITS: TStringArray = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'];
  var
    i: Int32;
  begin
    for i := 0 to High(DIGITS) do
      if OCR.LocateText(Self.Bounds, DIGITS[i],  RS_FONT_BOLD_12, Self.DigitFilter, 1) then
        Exit(pin[i+1]);
  end;

  function _IsUnlocked(): Boolean;
  begin
    if Self.IsOpen() then
      Exit;
    Result := not Chat.GetChat().ContainsAny(['try again', 'forgotten your PIN', 'PIN incorrectly several']);
  end;

var
  i: Int32;
  digit: Char;
  chatCache: String;
begin
  if attempts < 0 then
    Exit;

  for i := 0 to 3 do
  begin
    digit := _GetDigitToEnter();
    if (digit = '') or not Self.ClickDigit(digit) then
      Break;
    Wait(200, 1500, EWaitDir.wdLeft);
    WaitUntil(digit <> _GetDigitToEnter(), 100, 5000);
  end;

  chatCache := Chat.GetChat();
  if 'try again' in chatCache then
  begin
    Chat.ClickContinue(True);
    Exit(Self.Enter(pin, Dec(attempts)));
  end;

  if 'forgotten your PIN' in chatCache then
  begin
    WaitUntil(not ('forgotten your PIN' in Chat.GetChat()), 300, 20000);
    Exit(Self.Enter(pin, Dec(attempts)));
  end;

  if 'PIN incorrectly several' in chatCache then
    Self.Fatal('Failed to enter the bank pin several times. Check that the pin is correct.');

  Result := WaitUntil(_IsUnlocked(), 300, 3000) or Self.Enter(pin, Dec(attempts));
end;

procedure TRSBankPin.Draw(Bitmap: TMufasaBitmap); override;
begin
  if (not Self.IsOpen()) then
    Exit;

  inherited(Bitmap);

 // Bitmap.DrawBoxes(GetDigitBoxes(), False, $00FF00);
end;

var
  BankPin: TRSBankPin;

function TRSBank.IsOpen(WaitForItems: Boolean = True): Boolean; override;
begin
  if BankPin.IsOpen() then
  begin
    if not WaitUntil(BankPin.ButtonsLoaded(), 100, 3000) then
      Self.Fatal('Bank pin buttons don''t seem to have loaded in 3 seconds.');

    if not BankPin.Enter(Login.GetPlayerPin()) then
      Self.Fatal('Failed to enter bank pin');
  end;

  Result := inherited(WaitForItems);
end;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  BankPin.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  BankPin.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;
  BankPin.Draw(Bitmap);
end;
