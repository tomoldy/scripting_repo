{$DEFINE SRL_INTERFACEAREA_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSInterfaceType = (CLASSIC, SCROLL, ANY);

  TRSInterfaceArea = record(TRSInterface)
    EscapeEnabled: Boolean;
  end;

(*
## TRSInterfaceArea.IsOpen
```pascal
function TRSInterfaceArea.IsOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY): Boolean;
```
Returns True/False if any interface is found open.
*)
function TRSInterfaceArea.IsOpen(interfaceType: ERSInterfaceType = ERSInterfaceType.ANY): Boolean;
begin
  case interfaceType of
    ERSInterfaceType.CLASSIC: Result := SRL.CountColor(CTS0(3358536, 2), Self.Bounds) > 10000;
    ERSInterfaceType.SCROLL:  Result := SRL.CountColor(CTS2(8693433, 5, 0.10, 1.17), Self.Bounds) > 35000;
    ERSInterfaceType.ANY:     Result := Self.IsOpen(ERSInterfaceType.CLASSIC) or Self.IsOpen(ERSInterfaceType.SCROLL)
  end;
end;

(*
## TRSInterfaceArea.GetCloseButton
```pascal
function TRSInterfaceArea.GetCloseButton(): TRSButton;
```
Attempts to close any open interface found.
*)
function TRSInterfaceArea.GetCloseButton(): TRSButton;
var
  buttons: TRSButtonArray;
begin
  buttons := Self.FindButtons([[21,21], [24,23]]);
  if buttons <> [] then
    Result := buttons[High(buttons)];
end;

(*
## TRSInterfaceArea.Close
```pascal
function TRSInterfaceArea.ClickClose(pressEscape: Boolean = False): Boolean;
function TRSInterfaceArea.Close(pressEscape: Boolean): Boolean;
```
Attempts to close any open interface found.
*)
function TRSInterfaceArea.ClickClose(pressEscape: Boolean = False): Boolean;
var
  button: TRSButton;
begin
  button := Self.GetCloseButton();
  Result := button <> [];

  if not Result then
    Exit;

  if (pressEscape and Self.EscapeEnabled) then
  begin
    Keyboard.PressKey(VK_ESCAPE);

    if Keyboard.IsKeyDown(VK_ESCAPE) then
      Keyboard.KeyUp(VK_ESCAPE);

    Exit;
  end;

  Result := button.Click();
end;

function TRSInterfaceArea.Close(pressEscape: Boolean): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  if Self.ClickClose(pressEscape) then
    Result := WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));

  if (not Result and (pressEscape and Self.EscapeEnabled)) then
    Self.EscapeEnabled := False;
end;


(*
## TRSInterfaceArea.Setup
```pascal
procedure TRSInterfaceArea.Setup(); override;
```
Initializes TRSInterfaceArea. This is called automatically for you.
*)
procedure TRSInterfaceArea.Setup(); override;
begin
  inherited;
  Self.Name := 'InterfaceArea';
  Self.EscapeEnabled := True;
end;

(*
## TRSInterfaceArea.SetupAlignment
```pascal
procedure TRSInterfaceArea.SetupAlignment(); overload;
```
Initializes TRSInterfaceArea coordinates. This is automatically called for you.
*)
procedure TRSInterfaceArea.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Top  := MainScreen.Bounds.Y1;
  alignment.Left := MainScreen.Bounds.X1;

  case RSClient.Mode of
    ERSClientMode.FIXED:
    begin
      alignment.Right  := MainScreen.Bounds.X2;
      alignment.Bottom := MainScreen.Bounds.Y2;
    end;

    ERSClientMode.RESIZABLE_CLASSIC:
    begin
      alignment.Right  := GameTabs.Bounds.X1 - 10;
      alignment.Bottom := Chat.Bounds.Y1;
    end;

    ERSClientMode.RESIZABLE_MODERN:
    begin
      alignment.Right  := GameTab.Bounds.X1 - 22;
      alignment.Bottom := Chat.Bounds.Y1;
    end;
  end;

  Self.SetupAlignment(alignment);
end;

var
  RSInterface, InterfaceArea: TRSInterfaceArea;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  InterfaceArea.SetupAlignment();
  RSInterface.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  InterfaceArea.Setup();
  RSInterface.Setup();
  RSInterface.Name := 'RSInterface';
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  RSInterface.Draw(Bitmap);
end;
