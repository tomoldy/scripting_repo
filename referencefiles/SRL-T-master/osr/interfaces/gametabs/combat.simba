(*
# Combat
Methods to interact with the combat tab.
*)

{$DEFINE SRL_COMBAT_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

const
  COMBAT_STYLE_ACCURATE  = 'Accurate';
  COMBAT_STYLE_RAPID     = 'Rapid';
  COMBAT_STYLE_LONGRANGE = 'Longrange';
  COMBAT_STYLE_BASH      = 'Bash';
  COMBAT_STYLE_POUND     = 'Pound';
  COMBAT_STYLE_PUMMEL    = 'Pummel';
  COMBAT_STYLE_SPIKE     = 'Spike';
  COMBAT_STYLE_IMPALE    = 'Impale';
  COMBAT_STYLE_FOCUS     = 'Focus';
  COMBAT_STYLE_CHOP      = 'Chop';
  COMBAT_STYLE_STAB      = 'Stab';
  COMBAT_STYLE_SLASH     = 'Slash';
  COMBAT_STYLE_LUNGE     = 'Lunge';
  COMBAT_STYLE_BLOCK     = 'Block';
  COMBAT_STYLE_FLICK     = 'Flick';
  COMBAT_STYLE_LASH      = 'Lash';
  COMBAT_STYLE_DEFLECT   = 'Deflect';
  COMBAT_STYLE_SWIPE     = 'Swipe';
  COMBAT_STYLE_JAB       = 'Jab';
  COMBAT_STYLE_FEND      = 'Fend';
  COMBAT_STYLE_SMASH     = 'Smash';
  COMBAT_STYLE_PUNCH     = 'Punch';
  COMBAT_STYLE_KICK      = 'Kick';
  COMBAT_STYLE_SPELL     = 'Spell';
  COMBAT_STYLE_HACK      = 'Hack';
  COMBAT_STYLE_SCORCH    = 'Scorch';
  COMBAT_STYLE_FLARE     = 'Flare';
  COMBAT_STYLE_BLAZE     = 'Blaze';

var
  COMBAT_STYLES: TStringArray = [
    COMBAT_STYLE_ACCURATE,
    COMBAT_STYLE_RAPID,
    COMBAT_STYLE_LONGRANGE,
    COMBAT_STYLE_BASH,
    COMBAT_STYLE_POUND,
    COMBAT_STYLE_PUMMEL,
    COMBAT_STYLE_SPIKE,
    COMBAT_STYLE_IMPALE,
    COMBAT_STYLE_FOCUS,
    COMBAT_STYLE_CHOP,
    COMBAT_STYLE_STAB,
    COMBAT_STYLE_SLASH,
    COMBAT_STYLE_LUNGE,
    COMBAT_STYLE_BLOCK,
    COMBAT_STYLE_FLICK,
    COMBAT_STYLE_LASH,
    COMBAT_STYLE_DEFLECT,
    COMBAT_STYLE_SWIPE,
    COMBAT_STYLE_JAB,
    COMBAT_STYLE_FEND,
    COMBAT_STYLE_SMASH,
    COMBAT_STYLE_PUNCH,
    COMBAT_STYLE_KICK,
    COMBAT_STYLE_SPELL,
    COMBAT_STYLE_HACK,
    COMBAT_STYLE_SCORCH,
    COMBAT_STYLE_FLARE,
    COMBAT_STYLE_BLAZE
  ];

type
  TRSCombat = type TRSInterface;

(*
## Combat.Setup
```pascal
procedure TRSCombat.Setup; override;
```

Initializes **Combat** variables.

```{note}
This is automatically called on the **Combat** variable.
```
*)
procedure TRSCombat.Setup; override;
begin
  inherited;
  Self.ButtonEnabledColors := [CTS1(1711479, 21)];
  Self.Name := 'Combat';
end;

(*
## Combat.SetupAlignment
```pascal
procedure TRSCombat.SetupAlignment(); overload;
```
Setups up the interface aligment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSCombat.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := GameTab.Bounds.X1;
  alignment.Right := GameTab.Bounds.X2;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;
  Self.SetupAlignment(alignment);
end;

(*
## Combat.IsOpen
```pascal
function TRSCombat.IsOpen: Boolean;
```

Returns true if the combat tab is open.

Example:
```pascal
WriteLn Combat.IsOpen;
```
*)
function TRSCombat.IsOpen: Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.COMBAT);
end;

(*
## Combat.Open
```pascal
function TRSCombat.Open: Boolean;
```

Attempts to open the combat tab.

Example:
```pascal
Combat.Open;
```
*)
function TRSCombat.Open: Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.COMBAT);
end;

(*
## Combat.GetButtons
```pascal
function TRSCombat.GetButtons: TRSButtonArray;
```

Internal function to get the available buttons in the combat tab.
*)
function TRSCombat.GetButtons: TRSButtonArray;
begin
  Result := Self.FindButtons([[69,45], [148,24], [148,42], [69,30], [69,48]])
end;

(*
## Combat.GetCombatStyle
```pascal
function TRSCombat.GetCombatStyle: String;
```

Get the current attack style.

Example:
```pascal
WriteLn('The current combat style is: ', Combat.GetCombatStyle);

```
*)
function TRSCombat.GetCombatStyle: String;
var
  I,H: Int32;
  Buttons: TRSButtonArray;
begin
  if not Self.Open() then
    Exit;

  Buttons := Self.GetButtons();

  for I := 0 to High(Buttons) do
  begin
    if not Buttons[I].Enabled() then
      Continue;

    for H := 0 to High(COMBAT_STYLES) do
      if Buttons[I].FindText(COMBAT_STYLES[H].Replace('l','I'), RS_FONT_PLAIN_11, 2070783) then
        Exit(COMBAT_STYLES[H]);
  end;
end;

(*
## Combat.SetCombatStyle
```pascal
function TRSCombat.SetCombatStyle(Style: String): Boolean;
```

Set the attack style to the **Style** specified.

Example:
```pascal
Combat.SetCombatStyle(COMBAT_STYLE_SLASH);

```
*)
function TRSCombat.SetCombatStyle(style: String): Boolean;
var
  Buttons: TRSButtonArray;
  Button: TRSButton;
begin
  if not Self.Open() then
    Exit;

  Buttons := Self.GetButtons();
  for Button in Buttons do
    if Button.FindText(style, RS_FONT_PLAIN_11, [2070783]) then
      Exit(Button.Enable());
end;

(*
## Combat.GetAutoRetaliate
```pascal
function TRSCombat.GetAutoRetaliate(): Boolean;
```

Get the current state of auto retaliate.

Example:
```pascal
WriteLn Combat.GetAutoRetaliate;

```
*)
function TRSCombat.GetAutoRetaliate(): Boolean;
var
  button: TRSButton;
begin
  if not Self.Open() then
    Exit;

  for button in Self.GetButtons() do
    if button.FindText('Auto Retaliate', RS_FONT_PLAIN_12, $1F98FF) then
      Exit(button.Enabled());
end;

(*
## Combat.SetAutoRetaliate
```pascal
function TRSCombat.SetAutoRetaliate(value: Boolean): Boolean;
```

Set the state of auto retaliate on or off.

Example:
```pascal
Combat.SetAutoRetaliate(True);

```
*)
function TRSCombat.SetAutoRetaliate(value: Boolean): Boolean;
var
  button: TRSButton;
begin
  if not Self.Open() then
    Exit;

  for button in Self.GetButtons() do
    if button.FindText('Auto Retaliate', RS_FONT_PLAIN_12, $1F98FF) then
      Exit((value and button.Enable()) or (not value and button.Disable()));
end;

(*
## Combat.GetWeapon
```pascal
function TRSCombat.GetWeapon: String;
```

Get the name of the current worn weapon.

Example:
```pascal
WriteLn('The current weapon is: ', Combat.GetWeapon);

```
*)
function TRSCombat.GetWeapon: String;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit;

  B := Self.Bounds;
  B.Y2 := B.Y1 + 25;

  Result := OCR.Recognize(B, TOCRColorFilter.Create([2070783]), RS_FONT_QUILL_8);
end;

(*
## Combat.GetCombatLevel
```pascal
function TRSCombat.GetCombatLevel: Int32;
```

Get the current combat level.

Example:
```pascal
WriteLn('Current combat level is: ', Combat.GetCombatLevel);

```
*)
function TRSCombat.GetCombatLevel: Int32;
var
  B: TBox;
begin
  if not Self.Open() then
    Exit;

  B := Self.Bounds;
  B.Y1 += 27;
  B.Y2 := B.Y1 + 15;
  B.X1 += 20;
  B.X2 -= 20;

  Result := OCR.RecognizeNumber(B, TOCRColorFilter.Create([2070783]), RS_FONT_PLAIN_11);
end;

(*
## var Combat
  Global Combat variable.
*)
var
  Combat: TRSCombat;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Combat.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Combat.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  Combat.Draw(bitmap);
end;
