(*
# Magic
Methods to interact with the magic tab.
*)

{$DEFINE SRL_MAGIC_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSSpellBook = (STANDARD, ANCIENT, LUNAR, ARCEUUS);
  TRSSpellSet = set of ERSSpell;

const
  RS_STANDARD_SPELL_FIRST = ERSSpell.LUMBRIDGE_HOME_TELEPORT;
  RS_STANDARD_SPELL_LAST  = ERSSpell.FIRE_SURGE;

  RS_ANCIENT_SPELL_FIRST  = ERSSpell.EDGEVILLE_HOME_TELEPORT;
  RS_ANCIENT_SPELL_LAST   = ERSSpell.GHORROCK_TELEPORT;

  RS_LUNAR_SPELL_FIRST    = ERSSpell.LUNAR_HOME_TELEPORT;
  RS_LUNAR_SPELL_LAST     = ERSSpell.SPELLBOOK_SWAP;

  RS_ARCEUUS_SPELL_FIRST  = ERSSpell.ARCEUUS_HOME_TELEPORT;
  RS_ARCEUUS_SPELL_LAST   = ERSSpell.SINISTER_OFFERING;

  RS_STANDARD_SPELLS = [RS_STANDARD_SPELL_FIRST..RS_STANDARD_SPELL_LAST];
  RS_ANCIENT_SPELLS  = [RS_ANCIENT_SPELL_FIRST..RS_ANCIENT_SPELL_LAST];
  RS_LUNAR_SPELLS    = [RS_LUNAR_SPELL_FIRST..RS_LUNAR_SPELL_LAST];
  RS_ARCEUUS_SPELLS  = [RS_ARCEUUS_SPELL_FIRST..RS_ARCEUUS_SPELL_LAST];

  RS_INSTANT_THROW_SPELLS = TRSSpellSet([
    ERSSpell.TELEPORT_TO_HOUSE,
    ERSSpell.TELEPORT_TO_KOUREND,
    ERSSpell.TELEPORT_TO_APE_ATOLL,
    ERSSpell.BOUNTY_TELEPORT,
    ERSSpell.LASSAR_TELEPORT,
    ERSSpell.OURANIA_TELEPORT,
    ERSSpell.RESPAWN_TELEPORT,
    ERSSpell.VARROCK_TELEPORT,
    ERSSpell.CAMELOT_TELEPORT,
    ERSSpell.KHAZARD_TELEPORT,
    ERSSpell.FALADOR_TELEPORT,
    ERSSpell.BARROWS_TELEPORT,
    ERSSpell.MOONCLAN_TELEPORT,
    ERSSpell.CEMETERY_TELEPORT,
    ERSSpell.GHORROCK_TELEPORT,
    ERSSpell.ARDOUGNE_TELEPORT,
    ERSSpell.PADDEWWA_TELEPORT,
    ERSSpell.KHARYRLL_TELEPORT,
    ERSSpell.ANNAKARL_TELEPORT,
    ERSSpell.CATHERBY_TELEPORT,
    ERSSpell.APE_ATOLL_TELEPORT,
    ERSSpell.LUMBRIDGE_TELEPORT,
    ERSSpell.BARBARIAN_TELEPORT,
    ERSSpell.TROLLHEIM_TELEPORT,
    ERSSpell.MIND_ALTAR_TELEPORT,
    ERSSpell.WATCHTOWER_TELEPORT,
    ERSSpell.ICE_PLATEU_TELEPORT,
    ERSSpell.LUNAR_HOME_TELEPORT,
    ERSSpell.FENKENSTRAINS_CASTLE_TELEPORT,
    ERSSpell.SALVE_GRAVEYARD_TELEPORT,
    ERSSpell.ARCEUUS_LIBRARY_TELEPORT,
    ERSSpell.STANDARD_TARGET_TELEPORT,
    ERSSpell.HARMONY_ISLAND_TELEPORT,
    ERSSpell.EDGEVILLE_HOME_TELEPORT,
    ERSSpell.ANCIENT_TARGET_TELEPORT,
    ERSSpell.DRAYNOR_MANOR_TELEPORT,
    ERSSpell.FISHING_GUILD_TELEPORT,
    ERSSpell.LUMBRIDGE_HOME_TELEPORT,
    ERSSpell.WEST_ARDOUGNE_TELEPORT,
    ERSSpell.CARRALLANGAR_TELEPORT,
    ERSSpell.ARCEUUS_HOME_TELEPORT,
    ERSSpell.WATERBIRTH_TELEPORT,
    ERSSpell.SENNTISTEN_TELEPORT
  ]);

type
  TRSMagic = record(TRSInterface)
    SpellCache: array [ERSSpell] of
      record
        Box: TBox;
        UpText: String;
      end;
  end;

(*
## Magic.Setup
```pascal
procedure TRSMagic.Setup; override;
```
Initializes **Magic** variables.

```{note}
This is automatically called on the **Magic** variable.
```
*)
procedure TRSMagic.Setup(); override;
begin
  inherited;

  Self.Name := 'Magic';
end;

(*
## Magic.SetupAlignment
```pascal
procedure TRSMagic.SetupAlignment(); overload;
```
Setups up the interface aligment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSMagic.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := GameTab.Bounds.X1;
  alignment.Right := GameTab.Bounds.X2;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;
  Self.SetupAlignment(alignment);
end;

(*
## Magic.IsOpen
```pascal
function TRSMagic.IsOpen(): Boolean;
```
Returns true if the Magic tab is open.

Example:
```pascal
WriteLn Magic.IsOpen();
```
*)
function TRSMagic.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.MAGIC);
end;

(*
## Magic.Open
```pascal
function TRSMagic.Open(): Boolean;
```
Attempts to open the magic tab.

Example:
```pascal
Magic.Open();
```
*)
function TRSMagic.Open(): Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.MAGIC);
end;

(*
## Magic.GetSpellBook
```pascal
function TRSMagic.GetSpellBook(): ERSSpellBook;
```
Returns the current spell book.

Example:
```pascal
WriteLn Magic.GetSpellBook();
```
*)
function TRSMagic.GetSpellBook(): ERSSpellBook;
const
  //Colors of the book on the gametab
  ARCEUUS_COLOR: TCTS1Color = [9801276, 78];
  ANCIENT_COLOR: TCTS1Color = [8077142, 28];
  LUNAR_COLOR  : TCTS1Color = [12761525, 27];
var
  box: TBox;
begin
  box := Gametabs.Boxes[ERSGameTab.MAGIC];
  if SRL.CountColor(ARCEUUS_COLOR, box) >= 81 then Exit(ERSSpellBook.ARCEUUS);
  if SRL.CountColor(ANCIENT_COLOR, box) >= 85 then Exit(ERSSpellBook.ANCIENT);
  if SRL.CountColor(LUNAR_COLOR,   box) >= 85 then Exit(ERSSpellBook.LUNAR);
end;

(*
## Magic.IsSpellBook
```pascal
function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;
```
Returns true if we are using the specified spell book.

Example:
```pascal
WriteLn Magic.IsSpellBook(ERSSpellBook.LUNAR);
```
*)
function TRSMagic.IsSpellBook(book: ERSSpellBook): Boolean;
begin
  Result := book = Self.GetSpellBook();
end;

(*
## Magic.InfoIsOpen
```pascal
function TRSMagic.InfoIsOpen(): Boolean;
```
Returns true if the info black box about a spell is open.

Example:
```pascal
WriteLn Magic.IsSpellBook(ERSSpellBook.LUNAR);
```
*)
function TRSMagic.InfoIsOpen(): Boolean;
begin
  Result := SRL.CountColor(1731247, GameTab.Bounds) > 0;
end;

(*
## Magic._CloseInfoMouseCallback
```pascal
procedure TRSMagic._CloseInfoMouseCallback(sender: PMouse; var x, y: Double; var done: Boolean);
```
Mouse movement callback to stop mouse movement when the spell info box closes.
Do not touch this if you don't understand it.
*)
procedure TRSMagic._CloseInfoMouseCallback({$H-}sender: PMouse; var x, y: Double; var done: Boolean);{$H+}
begin
  done := not Self.InfoIsOpen() and SRL.Dice(30);
end;

(*
## Magic.CloseInfo
```pascal
function TRSMagic.CloseInfo(): Boolean;
function TRSMagic.CloseInfo(spell: ERSSpell): Boolean; overload;
```
Returns true if the info black box about a spell is open.

Example:
```pascal
WriteLn Magic.CloseInfo();
```
*)
function TRSMagic.CloseInfo(): Boolean;
var
  p, destination: TPoint;
begin
  p := Mouse.Position();
  destination := GameTab.Bounds.Expand(10).NearestEdge(p);
  Mouse.OnMovingEx := @Self._CloseInfoMouseCallback;
  Mouse.Move(destination);
  Mouse.OnMovingEx := nil;

  Result := not Self.InfoIsOpen();
end;

function TRSMagic.CloseInfo(spell: ERSSpell): Boolean; overload;
var
  p: TPoint;
begin
  p := Mouse.Position();
  Mouse.OnMovingEx := @Self._CloseInfoMouseCallback;
  Mouse.Move(Self.SpellCache[spell].Box);
  Mouse.OnMovingEx := nil;
  Result := not Self.InfoIsOpen();
end;


(*
## Magic.FindSpell
```pascal
function TRSMagic.FindSpell(spell: ERSSpell; out box: TBox): Boolean;
```
Return true or false wether we found a spell or not and return it's bounds if found.
*)
function TRSMagic.FindSpell(spell: ERSSpell; out b: TBox; attempts: Int32 = 2): Boolean;
var
  match: TRSSpellFinderMatch;
begin
  if not Self.IsOpen() then
    Exit;

  Result := SpellFinder.Find([spell], GameTab.Bounds, match);
  if Result then
  begin
    b := match.Box.Expand(-1);
    Self.SpellCache[spell].Box := b;
    Exit;
  end;

  if attempts = 0 then
    Exit;

  if Self.InfoIsOpen() then
  begin
    case attempts of
      2: if Self.CloseInfo(spell) then
          Result := Self.FindSpell(spell, b, attempts-1);

      1: if Self.CloseInfo() then
          Result := Self.FindSpell(spell, b, attempts-1);
    end;
  end;

  if not Result then
  begin
    if spell in [ERSSpell.LVL1_ENCHANT..ERSSpell.LVL7_ENCHANT] then
    begin
      if SpellFinder.Find([ERSSpell.BACK], GameTab.Bounds, match) then
        Exit;

      if SpellFinder.Find([ERSSpell.JEWELLERY_ENCHANTMENTS], GameTab.Bounds, match) then
      begin
        Mouse.CLick(match.Box, MOUSE_LEFT);
        if WaitUntil(SpellFinder.Find([ERSSpell.BACK], GameTab.Bounds, match), 300, 2000) then
          Exit(Self.FindSpell(spell, b, attempts-1));
      end;
    end
    else if SpellFinder.Find([ERSSpell.BACK], GameTab.Bounds, match) then
      begin
        Mouse.CLick(match.Box, MOUSE_LEFT);
        WaitUntil(SpellFinder.Find([ERSSpell.JEWELLERY_ENCHANTMENTS], GameTab.Bounds, match), 300, 2000);
      end;

    Result := Self.FindSpell(spell, b, attempts-1);
  end;
end;


(*
## Magic.ContainsSpell
```pascal
function TRSMagic.ContainsSpell(spell: ERSSpell): Boolean;
```
Return true or false wether we found a spell or not.
*)
function TRSMagic.ContainsSpell(spell: ERSSpell): Boolean;
var
  b: TBox;
begin
  Result := Self.FindSpell(spell, b);
end;


(*
## Magic.MouseSpell
```pascal
function TRSMagic.MouseSpell(spell: ERSSpell): Boolean;
```
Used to move the mouse to the specified spell.

Example:
```pascal
Magic.MouseSpell(ERSSpell.HIGH_LEVEL_ALCHEMY);
```
*)
function TRSMagic.MouseSpell(spell: ERSSpell): Boolean;
var
  b: TBox;
  upText: String;
begin
  if (Self.SpellCache[spell].UpText <> '') and
     Self.SpellCache[spell].Box.Contains(Mouse.Position()) then
  begin
    upText := MainScreen.GetUpText().After('Cast').Before('/').Strip();
    if (upText = Self.SpellCache[spell].UpText) then
      Exit(True);
  end;

  Result := Self.Open() and Self.FindSpell(spell, b);

  if Result then
  begin
    Mouse.Move(b);

    if Self.SpellCache[spell].UpText = '' then
    begin
      upText := MainScreen.GetUpText().After('Cast').Before('/').Strip();
      Self.SpellCache[spell].UpText := upText;
    end;
  end;
end;


(*
## Magic.ClickSpell
```pascal
function TRSMagic.ClickSpell(spell: ERSSpell; option: String = ''): Boolean;
```
Used to interact with the specified spell.

Example:
```pascal
Magic.ClickSpell(ERSSpell.HIGH_LEVEL_ALCHEMY);
```
*)
function TRSMagic.ClickSpell(spell: ERSSpell; option: String = ''): Boolean;
begin
  if not Self.MouseSpell(spell) then
    Exit;

  if (option = '') or MainScreen.IsUpText(option) then
  begin
    Mouse.Click(MOUSE_LEFT);
    Exit(True);
  end;

  Result := ChooseOption.Select(option);
end;


(*
## Magic.FindSelected
```pascal
function TRSMagic.FindSelected(out tpa: TPointArray): Boolean;
```
Returns the true if we have a selected spell and returns it's tpa.

Example:
```pascal
if Magic.FindSelected(tpa) then
  Debug(tpa);
```
*)
function TRSMagic.FindSelected(out tpa: TPointArray): Boolean;
var
  searchBox: TBox;
begin
  if not Self.IsOpen() then Exit;

  searchBox := GameTab.Bounds;
  searchBox.Y2 -= 18;

  Result := SRL.FindColors(tpa, $FFFFFF, searchBox) > 10;

  if not Result then
    Exit;

  for tpa in tpa.Cluster(8) do
    if tpa.Density < 0.28 then
      Exit;

  Result := False;
  tpa := [];
end;

(*
## Magic.ContainsSelected
```pascal
function TRSMagic.ContainsSelected(): Boolean;
```
Returns the true if we have a selected spell.

Example:
```pascal
WriteLn Magic.ContainsSelected();
```
*)
function TRSMagic.ContainsSelected(openTab: Boolean = False): Boolean;
var
  searchBox: TBox;
  tpa: TPointArray;
begin
  if not openTab and not Self.IsOpen() then
    Exit(MainScreen.IsUpText('Cast'));

  searchBox := GameTab.Bounds;
  searchBox.Y2 -= 18;

  Result := SRL.FindColors(tpa, $FFFFFF, searchBox) > 10;

  if not Result then
    Exit;

  for tpa in tpa.Cluster(10) do
    if tpa.Density < 0.3 then
      Exit;

  Result := False;
end;


(*
## Magic.IsSelected
```pascal
function TRSMagic.IsSelected(spell: ERSSpell): Boolean;
function TRSMagic.IsSelected(spell: ERSSpell; selected: TPointArray): Boolean; overload;
```
Returns true if the specified spell is currently active (with white outline).

Example:
```pascal
WriteLn Magic.IsSpellSelected(ERSSpell.ICE_BARRAGE);
```
*)
function TRSMagic.IsSelected(spell: ERSSpell): Boolean;
var
  box: TBox;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit;

  Result := Self.FindSpell(spell, box) and (SRL.CountColor($FFFFFF, box.Expand(2)) > 10);
end;

function TRSMagic.IsSelected(spell: ERSSpell; selected: TPointArray): Boolean; overload;
var
  box: TBox;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit;

  if not Self.FindSpell(spell, box) then
    Exit;

  Result := box.Contains(selected.Mean());
end;


function TRSMagic.Deselect(spell: TPointArray = []): Boolean;
begin
  Result := True;

  if Self.IsOpen() then
  begin
    if (spell = []) and not Self.FindSelected(spell) then
      Exit;

    Mouse.Click(spell.Bounds(), MOUSE_LEFT);
    Exit(not Self.ContainsSelected());
  end;

  if MainScreen.IsUpText('Cast') then
  begin
    ChooseOption.Open();
    ChooseOption.Select('Cancel');
  end;
end;

(*
## Magic.CanActivate
```pascal
function TRSMagic.CanActivate(spell: ERSSpell): Boolean;
```

Returns true if we can activate the spell (we have runes, level and the spell unlocked).

Example:
```pascal
Magic.CanActivate(ERSSpell.HIGH_LEVEL_ALCHEMY);
```
*)
function TRSMagic.CanActivate(spell: ERSSpell): Boolean;
begin
  Result := Self.ContainsSpell(spell);
end;


(*
## Magic.SpellWasCast
```pascal
function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;
```
Returns true if we are in a state that casting a spell would leave you.

Example:
```pascal
Magic.SpellWasCast(ERSSpell.ICE_BARRAGE);
```
*)
function TRSMagic.SpellWasCast(spell: ERSSpell): Boolean;
begin
  if spell in RS_INSTANT_THROW_SPELLS then
    Exit(True);

  //enchant and alch spells open inventory
  Result := Self.IsSelected(spell) or Inventory.IsOpen();
end;

(*
## Magic.CastSpell
```pascal
function TRSMagic.CastSpell(spell: ERSSpell): Boolean;
```
Attempts to cast the specified spell.

Example:
```pascal
Magic.CastSpell(ERSSpell.LOW_LEVEL_ALCHEMY);
```
*)
function TRSMagic.CastSpell(spell: ERSSpell; option: String = ''): Boolean;
var
  selected: TPointArray;
begin
  if not Self.Open() then
    Exit;

  if Self.FindSelected(selected) then
  begin
    if Self.IsSelected(spell, selected) then
      Exit(True);

    if not Self.Deselect(selected) then
    begin
      Self.DebugLn('Failed to deactivate the currently active spell.');
      Exit;
    end;
  end;

  Result := Self.ClickSpell(spell, option) and
            WaitUntil(Self.SpellWasCast(spell), 300, SRL.TruncatedGauss(1000, 2000));
end;

procedure TRSMagic.Draw(bitmap: TMufasaBitmap); override;
var
  book: ERSSpellBook;
begin
  if not Self.IsOpen() then Exit;

  inherited();

  book := Self.GetSpellBook();
  bitmap.DrawBox(GameTab.Bounds, $00FFFF);
  case book of
    ERSSpellBook.STANDARD: bitmap.DrawText('Standard book', GameTab.Bounds, True, $00FFFF);
    ERSSpellBook.ANCIENT: bitmap.DrawText('Ancient book', GameTab.Bounds, True, $00FFFF);
    ERSSpellBook.LUNAR: bitmap.DrawText('Lunar book', GameTab.Bounds, True, $00FFFF);
    ERSSpellBook.ARCEUUS: bitmap.DrawText('Arceuus book', GameTab.Bounds, True, $00FFFF);
  end;
end;

(*
## var Magic
Global Magic variable.
*)
var
  Magic: TRSMagic;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Magic.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Magic.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  Magic.Draw(bitmap);
end;
