{$DEFINE SRL_OPTIONS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSOptionsTab = (CONTROLS, AUDIO, DISPLAY);
  ERSOptionsSlider = (BRIGHTNESS, ZOOM);
  ERSOptionsButton = (AID, RUN, HOUSE, BOND);
  ERSHouseOptionsButton = (CLOSE, VIEWER, EXPEL, SERVANT, LEAVE);

  TRSOptions = record(TRSInterface)
    Sliders: array [ERSOptionsSlider] of TBox;
    Tabs: array [ERSOptionsTab] of TBox;
  end;
  
procedure TRSOptions.Setup(); override;
begin
  inherited;

  Self.Name := 'Options';
  Self.ButtonColors += CTS1(2369440, 5);
end;

procedure TRSOptions.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
var
  boxes: TBoxArray;
  i: Int32;
begin
  alignment.Left := GameTab.Bounds.X1;
  alignment.Right := GameTab.Bounds.X2;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;

  Self.SetupAlignment(alignment);

  boxes := Grid(3, 1, 55, 24, [9], [Self.Bounds.X1, Self.Bounds.Y1 + 5]);

  for i := 0 to High(boxes) do
    Self.Tabs[ERSOptionsTab(i)] := boxes[i];

  Self.Sliders[ERSOptionsSlider.BRIGHTNESS].X1 := Self.Bounds.X1 + 57;
  Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Y1 := Self.Bounds.Y1 + 72;
  Self.Sliders[ERSOptionsSlider.BRIGHTNESS].X2 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].X1 + 96;
  Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Y2 := Self.Sliders[ERSOptionsSlider.BRIGHTNESS].Y1 + 9;

  Self.Sliders[ERSOptionsSlider.ZOOM].X1 := Self.Bounds.X1 + 57;
  Self.Sliders[ERSOptionsSlider.ZOOM].Y1 := Self.Bounds.Y1 + 109;
  Self.Sliders[ERSOptionsSlider.ZOOM].X2 := Self.Sliders[ERSOptionsSlider.ZOOM].X1 + 96;
  Self.Sliders[ERSOptionsSlider.ZOOM].Y2 := Self.Sliders[ERSOptionsSlider.ZOOM].Y1 + 9;
end;


function TRSOptions.GetSliderLevel(SliderBounds: TBox; SliderColor: Integer): Integer;
var
  TPA: TPointArray;
begin
  Result := -1;
  if Self.Open() and Self.OpenTab(ERSOptionsTab.DISPLAY) then
  begin
    if SRL.FindColors(TPA, SliderColor, SliderBounds.Expand(10)) > 0 then
      Result := Round((TPA.Mean.X - SliderBounds.X1) * 100 / (SliderBounds.Width() - 1));
  end;
end;

function TRSOptions.GetZoomLevel(): Integer;
begin
  Result := Self.GetSliderLevel(Self.Sliders[ERSOptionsSlider.ZOOM], 2106152);
end;

function TRSOptions.SetZoomLevel(level: Integer): Boolean;
var
  currentLevel: Integer;
  sliderBounds: TBox;
begin
  currentLevel := Self.GetZoomLevel();
  if (currentLevel = level) then Exit(True);
    
  // Move slider away so we can click the level
  if (Abs(currentLevel - level) <= 20) then
  begin
    if (currentLevel + 40 < 100) then
      Self.SetZoomLevel(currentLevel + Random(20, 40))
    else
      Self.SetZoomLevel(currentLevel - Random(20, 40));
  end;
  
  sliderBounds := Self.Sliders[ERSOptionsSlider.ZOOM];
  Mouse.Click(
    sliderBounds.X1 + Round((level * (sliderBounds.Width() - 1) / 100)) + 1,
    sliderBounds.Y1 + Random(sliderBounds.Y2 - sliderBounds.Y1),
    MOUSE_LEFT
  );

  Result := WaitUntil(InRange(Self.GetZoomLevel(), level-1, level+1), SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.GetBrightnessLevel(): Integer;
begin
  Result := Self.GetSliderLevel(Self.Sliders[ERSOptionsSlider.BRIGHTNESS], 2040359);
end;

function TRSOptions.SetMaxBrightness(): Boolean;
begin
  Result := Self.OpenTab(ERSOptionsTab.DISPLAY);
  if not Result then Exit;

  with Self.Sliders[ERSOptionsSlider.BRIGHTNESS] do
    Mouse.Click(X2 + Random(3, 5), Random(Y1, Y2), MOUSE_LEFT);
end;

function TRSOptions.IsOpen(): Boolean;
begin
  Result := GameTabs.GetCurrentTab = ERSGameTab.OPTIONS;
end;

function TRSOptions.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.OPTIONS);
end;


function TRSOptions.GetButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[38,38]]);
end;

function TRSOptions.GetButton(button: ERSOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray := Self.GetButtons;
begin
  if Length(Buttons) = Length(ERSOptionsButton) then
    Result := Buttons[Button];
end;


function TRSOptions.GetHouseOptionsButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[21, 21], [103, 38], [164, 30]]);
end;

function TRSOptions.GetHouseOptionsButton(button: ERSHouseOptionsButton): TRSButton;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetHouseOptionsButtons;
  if High(Buttons) = Ord(High(ERSHouseOptionsButton)) then
    Result := Buttons[Button];
end;

function TRSOptions.IsHouseOptionsOpen(): Boolean;
begin
  Result := SRL.CountColor(CTS2(4630611, 23, 0.04, 0.79), Self.Bounds) = 148;
end;

function TRSOptions.OpenHouseOptions(): Boolean;
begin
  if Self.IsHouseOptionsOpen() then Exit(True);
  if not Self.Open or not Self.OpenTab(ERSOptionsTab.CONTROLS) then Exit;

  Self.GetButton(ERSOptionsButton.HOUSE).Click();

  Result := WaitUntil(Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 3000);
end;

function TRSOptions.CloseHouseOptions(): Boolean;
begin
  if not Self.IsHouseOptionsOpen() then Exit(True);
  Self.GetHouseOptionsButton(ERSHouseOptionsButton.CLOSE).Click();
  Result := WaitUntil(not Self.IsHouseOptionsOpen(), SRL.TruncatedGauss(50, 1500), 3000);
end;


function TRSOptions.GetCurrentTab(): ERSOptionsTab;
var
  tab: ERSOptionsTab;
  count: Integer;
begin
  for tab := Low(ERSOptionsTab) to High(ERSOptionsTab) do
  begin
    count := SRL.CountColor($48585D, tabs[tab]) + SRL.CountColor($1E2528, tabs[tab]);
    if count < 50 then //finds the one without the bottom white/black line
      Exit(tab);
  end;
end;

function TRSOptions.OpenTab(tab: ERSOptionsTab): Boolean;
begin
  if not Self.Open() or not Self.CloseHouseOptions() then
    Exit(False);
  if Self.GetCurrentTab() = tab then
    Exit(True);

  Mouse.Click(Self.Tabs[tab], MOUSE_LEFT);

  Result := WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 1500), 3000);
end;

procedure TRSOptions.Draw(bitmap: TMufasaBitmap); override;
var
  buttons: TRSButtonArray;
begin
  if not Self.IsOpen() then Exit;

  inherited;

  buttons := Self.GetButtons();
  buttons.Draw(bitmap);

  if Self.IsHouseOptionsOpen() then
  begin
    buttons := Self.GetHouseOptionsButtons();
    buttons.Draw(bitmap);
    Exit;
  end;

  bitmap.DrawBoxes(Self.Tabs, $00FFFF);
  if Self.GetCurrentTab() = ERSOptionsTab.DISPLAY then
  begin
    bitmap.DrawBox(Self.Sliders[ERSOptionsSlider.BRIGHTNESS], $00FFFF);
    bitmap.DrawBox(Self.Sliders[ERSOptionsSlider.ZOOM], $00FFFF);
  end;
end;

var
  Options: TRSOptions;

function TRSGameTabs.GetCurrentTab(): ERSGameTab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and Options.IsHouseOptionsOpen() then
    Result := ERSGameTab.OPTIONS;
end;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Options.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Options.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Options.Draw(Bitmap);
end;

