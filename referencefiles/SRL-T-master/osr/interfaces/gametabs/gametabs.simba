(*
# GameTabs
Methods to interact with the gametabs.
*)
{$DEFINE SRL_GAMETABS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSGameTab = (
    COMBAT, STATS, QUESTS, INVENTORY, EQUIPMENT, PRAYER, MAGIC,
    CLAN, FRIENDS, ACCOUNT, LOGOUT, OPTIONS, EMOTES, MUSIC, UNKNOWN
  );

  TRSGameTabs = record(TRSInterface)
    Boxes: TBoxArray;
  end;

function TRSGameTabs.GetCurrentTab(): ERSGametab;
var
  tab: ERSGameTab;
begin
  if (RSClient.Mode = ERSClientMode.RESIZABLE_MODERN) and (SRL.CountColor(8639715, Self.Boxes[ERSGameTab.LOGOUT]) > 0) then
    Exit(ERSGameTab.LOGOUT);
  
  for tab := Low(ERSGameTab) to ERSGameTab.MUSIC do
    if (SRL.CountColor(CTS1(1778534, 22), Self.Boxes[tab]) > 50) then
      Exit(tab);
      
  Result := ERSGameTab.UNKNOWN;
end;

(*
## GameTabs.Open()
```pascal
function TRSGameTabs.Open(tab: ERSGameTab): Boolean;
```
Opens the specified `Tab`.

Example:
```pascal
WriteLn GameTabs.Open(ERSGameTab.INVENTORY);
```
*)
function TRSGameTabs.Open(tab: ERSGameTab): Boolean;
var
  i: Int32;
begin
  if Self.GetCurrentTab() = tab then Exit(True);

  for i := 1 to 3 do
  begin
    Mouse.Click(Self.Boxes[tab], MOUSE_LEFT, SRL.Dice(50));

    Result := WaitUntil(Self.GetCurrentTab() = tab, SRL.TruncatedGauss(50, 2000), SRL.TruncatedGauss(2000, 3000));
    if Result then Exit;
  end;
end;

procedure TRSGameTabs.Draw(Bitmap: TMufasaBitmap); override;
begin
  inherited;
  Bitmap.DrawBoxes(Self.Boxes, $00FFFF);
end;

procedure TRSGameTabs.Setup(); override;
begin
  inherited;
  Self.Name := 'GameTabs';
end;

procedure TRSGameTabs.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
  i: Int32;
begin
  alignment.Bottom := RootInterface.Bounds.Y2;

  case RSClient.Mode of
    ERSClientMode.FIXED:
    begin
      alignment.Left  := RootInterface.Bounds.X2 - 242;
      alignment.Right := RootInterface.Bounds.X2 - 2;
      alignment.Top   := RootInterface.Bounds.Y2 - 334;
    end;

    ERSClientMode.RESIZABLE_CLASSIC:
    begin
      alignment.Left  := RootInterface.Bounds.X2 - 240;
      alignment.Right := RootInterface.Bounds.X2;
      alignment.Top   := RootInterface.Bounds.Y2 - 334;
    end;

    ERSClientMode.RESIZABLE_MODERN:
    begin
      alignment.Right := RootInterface.Bounds.X2;

      //Needed because depending on the client width the tabs stack into row(s)
      if RootInterface.Width >= 948 then
      begin
        alignment.Left := RootInterface.Bounds.X2 - 428;
        alignment.Top  := RootInterface.Bounds.Y2 - 35;
      end
      else
      begin
        alignment.Left := RootInterface.Bounds.X2 - 230;
        alignment.Top  := RootInterface.Bounds.Y2 - 71;
      end;
    end;
  end;

  Self.SetupAlignment(alignment);

  case RSClient.Mode of
    ERSClientMode.FIXED, ERSClientMode.RESIZABLE_CLASSIC:
      Self.Boxes := Grid(7, 2, 30, 33, [3, 265], [Self.Bounds.X1 + 6, Self.Bounds.Y1 + 1]);

    ERSClientMode.RESIZABLE_MODERN:
      begin
        // One row
        if RootInterface.Width >= 948 then
        begin
          Self.Boxes := Grid(14, 1, 30, 33, [3, 0], [Self.Bounds.X1, Self.Bounds.Y2 - 35]);
          for i := Ord(ERSGameTab.MUSIC) downto Ord(ERSGameTab.FRIENDS) - 1 do
            Self.Boxes[i] := Self.Boxes[i-1];
        end
        else // Two rows
          Self.Boxes := Grid(7, 2, 30, 33, [3, 3], [Self.Bounds.X1, Self.Bounds.Y2 - 70]);

        // Logout button is moved to top right corner
        Self.Boxes[7] := Self.Boxes[10];
        Self.Boxes[10] := [RootInterface.Bounds.X2 - 19, RootInterface.Bounds.Y1 + 9, RootInterface.Bounds.X2 - 10, RootInterface.Bounds.Y1 + 18];
      end;
  end;
end;

var
  GameTabs: TRSGameTabs;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  GameTabs.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  GameTabs.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  GameTabs.Draw(bitmap);
end;

