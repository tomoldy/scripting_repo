(*
# Inventory
Methods to interact with the inventory.
*)

{$DEFINE SRL_INVENTORY_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

const
  //Column wise and "reversed" column wise - normal pattern
  DROP_PATTERN_REGULAR: TIntegerArray = [0..27];
  DROP_PATTERN_REGULAR_R: TIntegerArray = [3,2,1,0, 7,6,5,4, 11,10,9,8, 15,14,13,12, 19,18,17,16, 23,22,21,20, 27,26,25,24];

  //Column wise snake and "reversed" version
  DROP_PATTERN_SNAKE: TIntegerArray  = [0,1,2,3, 7,6,5,4, 8,9,10,11, 15,14,13,12, 16,17,18,19, 23,22,21,20, 24,25,26,27];
  DROP_PATTERN_SNAKE_R: TIntegerArray = [3,2,1,0, 4,5,6,7, 11,10,9,8, 12,13,14,15, 19,18,17,16, 20,21,22,23, 27,26,25,24];

  //by row (and "reversed")
  DROP_PATTERN_TOPDOWN: TIntegerArray = [0,4,8,12,16,20,24,  1,5,9,13,17,21,25,  2,6,10,14,18,22,26, 3,7,11,15,19,23,27];
  DROP_PATTERN_TOPDOWN_R: TIntegerArray = [3,7,11,15,19,23,27, 2,6,10,14,18,22,26, 1,5,9,13,17,21,25,  0,4,8,12,16,20,24];

  //Spiral pattern: Starts in slot 0(top left corner of invy) and circles in a clockwise spiral
  DROP_PATTERN_SPIRAL: TIntegerArray   = [0,1,2,3, 7,11,15,19,23, 27,26,25,24, 20,16,12,8,4, 5, 6,10,14,18,22, 21,17,13,9];

type
  TRSInventory = record(TRSItemGameTab)
    LOW_SLOT: Int32;
    HIGH_SLOT: Int32;
    ShiftEnabled: Boolean;
  end;

(*
## Inventory.GetSlotBoxes
```pascal
function TRSInventory.GetSlotBoxes(): TBoxArray;
```
Mainly used internally by TRSInventory methods.
This function is used to return a TBoxArray of the inventory slots.

Example:
```pascal
Debug(Inventory.GetSlotBoxes());
```
*)

function TRSInventory.GetSlotBoxes(): TBoxArray;
begin
  Result := Self.SlotBoxes;
end;

function TRSInventory.GetSlotBox(slot: Int32): TBox;
begin
  if InRange(slot, 0, Self.HIGH_SLOT) then
    Result := Self.SlotBoxes[slot];
end;

procedure TRSInventory.Setup(); override;
begin
  inherited;

  Self.Name := 'Inventory';
  Self.HIGH_SLOT := 27;

  Self.Items.Name := Self.Name + '.Items';
  Self.Items.SlotBoxesFunction := @Self.GetSlotBoxes;
  Self.Items.DiscoverOffset := [0, 9, 4, 0];
  Self.ShiftEnabled := True;
end;

procedure TRSInventory.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left   := GameTab.Bounds.X1;
  alignment.Right  := GameTab.Bounds.X2;
  alignment.Top    := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;

  Self.SetupAlignment(alignment);

  Self.SlotBoxes := Grid(4, 7, 31, 31, [11, 5], [Self.Bounds.X1 + 13, Self.Bounds.Y1 + 9]);
end;

(*
## Inventory.IsOpen
```pascal
function TRSInventory.IsOpen(): Boolean;
```
Returns true if the inventory gametab is open, false if it's not.

Example:
```pascal
WriteLn Inventory.IsOpen();
```
*)
function TRSInventory.IsOpen(): Boolean;
begin
  Result := GameTabs.GetCurrentTab() = ERSGameTab.INVENTORY;
end;

(*
## Inventory.Open
```pascal
function TRSInventory.Open(): Boolean;
```
Attempts to open the inventory, returns true if it succeeds.

Example:
```pascal
WriteLn Inventory.Open();
```
*)
function TRSInventory.Open(): Boolean;
begin
  Result := GameTabs.Open(ERSGameTab.INVENTORY);
end;


(*
## Inventory.PointToSlot
```pascal
function TRSInventory.PointToSlot(P: TPoint): Int32;
```
Returns the inventory slot index which contains the TPoint `P`.
Returns -1 if the point does not fall in any slots.

Example:
```pascal
var P: TPoint;
var Slot: Int32;

P := Inventory.GetSlotBox(15).Middle; // Example point

Slot := Inventory.PointToSlot(P);
WriteLn(Slot); // 15
```
*)
function TRSInventory.PointToSlot(p: TPoint): Int32;
begin
  Result := Self.Items.PointToSlot(p);
end;

(*
## Inventory.MouseSlot
```pascal
function TRSInventory.MouseSlot(slot: Int32): Boolean;
```
Moves the mouse over the slot. Slot is an Integer between 0 and 27.

Example:
```pascal
if Inventory.HoverSlot(1) then
  WriteLn('Mouse is now over slot #1');
```
*)
function TRSInventory.MouseSlot(slot: Int32): Boolean;
begin
  Result := Self.Items.MouseSlot(slot);
end;


(*
## Inventory.ClickSlot
```pascal
function TRSInventory.ClickSlot(slot: Int32; option: String = ''): Boolean;
```
Moves the mouse and clicks on the slot. Slot is an Integer between 0 and 27.

If option is empty the slot is left clicked. Else a right click is performed
and the option is selected from the choose option menu.

Example:
```pascal
if Inventory.ClickSlot(1) then
  WriteLn('Left clicked slot #1');
  
if Inventory.ClickSlot(1, 'Drop') then
  WriteLn('Right clicked and selected "Drop" on slot #1', 'Drop');  
```
*)
function TRSInventory.ClickSlot(slot: Int32; option: String = ''): Boolean;
begin
  Result := Self.Items.InteractSlot(slot, option);
end;

function TRSInventory.IsSlotUsed(b: TBox): Boolean; overload;
begin
  // black with tolerance for when item is transparent
  Result := SRL.CountColor(CTS1(1118740, 35), b) > 0;
end;

function TRSInventory.IsSlotUsed(slot: Int32): Boolean; overload;
begin
  Result := Self.Open() and Self.IsSlotUsed(Self.GetSlotBox(slot));
end;

(*
## Inventory.IsSlotSelected
```pascal
function TRSInventory.IsSlotSelected(Slot: Int32): Boolean;
```
Returns True if the slot is selected (white outline).

Example:
```pascal
if Inventory.IsSlotSelected(1) then
  WriteLn('Slot 1 is selected!');
```
*)
function TRSInventory.IsSlotSelected(slot: Int32): Boolean;
var
  b: TBox;
begin
  if not Self.Open() then
    Exit(False);

  b := Self.GetSlotBox(slot);
  b.Y1 += 8; // Skip item stack text

  Result := SRL.CountColor($FFFFFF, b) > 0;
end;

(*
## Inventory.GetSelectedSlot
```pascal
function TRSInventory.GetSelectedSlot(): Int32;
```
Returns the index of the selected slot (white outline).
**-1** is returned if no slot is selected.

Example:
```pascal
WriteLn(Inventory.GetSelectedSlot());
```
*)
function TRSInventory.GetSelectedSlot(): Int32;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  slot: TBox;
begin
  if not Self.Open() then
    Exit(-1);
  if SRL.FindColors(tpa, $FFFFFF, Self.Bounds) = 0 then
    Exit(-1);

  atpa := tpa.Cluster(1);
  atpa.FilterSize(17, EComparator.__GT__); //17 seems good

  if atpa = [] then
    Exit(-1);

  for tpa in atpa do
  begin
    Result := Self.PointToSlot(tpa[0]);

    slot := Self.GetSlotBox(Result);
    slot.Y1 += 8;

    if tpa.FilterBox(slot) <> [] then
      Exit;
  end;

  Result := -1;
end;

(*
## Inventory.SetSelectedSlot
```pascal
function TRSInventory.SetSelectedSlot(Slot: Int32): Boolean;
```
Set the slot as selected (white outline).
Slot can be **-1** to unselect the currently selected slot.

Example:
```pascal
WriteLn(Inventory.GetSelectedSlot());
```
*)
function TRSInventory.SetSelectedSlot(slot: Int32; skipConfirmation: Boolean = False): Boolean;
var
  selected: Int32;
begin
  selected := Self.GetSelectedSlot();
  if selected = slot then Exit(True);

  if selected > -1 then Mouse.Click(Self.GetSlotBox(selected), MOUSE_LEFT);

  if slot > -1 then
  begin
    Mouse.Move(Self.GetSlotBox(slot), True);
    if MainScreen.IsUpText('Use') then
      Mouse.Click(MOUSE_LEFT)
    else if not ChooseOption.Select('Use') then
      Exit(False);
  end
  else
    Mouse.Click(Self.GetSlotBox(selected), MOUSE_LEFT);

  Result := skipConfirmation or WaitUntil(Self.GetSelectedSlot() = slot, 50, SRL.TruncatedGauss(1000, 2000));
end;

(*
## Inventory.RandomPattern
```pascal
function TRSInventory.RandomPattern(): TIntegerArray;
```
Returns a random inventory pattern.

Example:
```pascal
Inventory.ShiftDrop(Inventory.RandomPattern());
```
*)
function TRSInventory.RandomPattern(): TIntegerArray;
var
  Patterns: T2DIntegerArray;
begin

  Patterns := [
    DROP_PATTERN_SNAKE, DROP_PATTERN_SPIRAL,
    DROP_PATTERN_REGULAR, DROP_PATTERN_TOPDOWN,
    DROP_PATTERN_SNAKE_R, DROP_PATTERN_TOPDOWN_R
  ];

  Result := Patterns[Random(0, High(Patterns))];
end;

(*
## Inventory.ErrorPattern
```pascal
function TRSInventory.ErrorPattern(Pattern: TIntegerArray=DROP_PATTERN_REGULAR; ErrorChance:Int32=5): TIntegerArray;
```
Returns the passed in pattern slightly modified.

Example:
```pascal
Inventory.ShiftDrop(Iventory.ErrorPattern(Inventory.RandomPattern()));
```
*)
function TRSInventory.ErrorPattern(pattern: TIntegerArray = DROP_PATTERN_REGULAR; errorChance: Int32 = 5): TIntegerArray;
var i,j,h,k,tmp: Int32;
begin
  Result := Copy(Pattern);
  h := High(Pattern);
  i := 1;
  while i < h do
  begin
    if Random(100) < ErrorChance then
    begin
      case Random(0,2) of
        0:begin
            tmp := Result[i];
            for j:=i+1 to h do Result[j-1] := Result[j];
            Result[h] := tmp;
          end;
        1:begin
            Swap(Result[i+1],Result[i]);
          end;
        2:begin
            tmp := Result[i];
            k := Random(i+1,h);
            for j:=i+1 to k do Result[j-1] := Result[j];
            Result[k] := tmp;
          end;
      end;
    end;
    Inc(i);
  end;
end;


procedure TRSInventory.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then Exit;
  inherited();
  Bitmap.DrawBoxes(Self.SlotBoxes, $00FFFF);
end;

(*
## Inventory.Count
```pascal
function TRSInventory.Count(): Int32;
function TRSInventory.CountItem(Item: TRSItem): Int32;
function TRSInventory.CountItems(items: TRSItemArray): Int32;
function TRSInventory.CountItemStack(item: TRSItem): Int32;
function TRSInventory.CountSlotStack(slot: Int32): Int32;
```
Counts how many items are in the inventory right now or slack amounts.

Example:
```pascal
WriteLn Inventory.Count();
WriteLn Inventory.CountItem('Shark');
WriteLn Inventory.CountItemStack('Air rune');
```
*)
function TRSInventory.Count(): Int32;
begin
  if not Self.Open() then
    Exit;
  Result := Self.Items.Count();
end;

function TRSInventory.CountItem(item: TRSItem): Int32;
begin
  if Self.Open() then
    Result := Self.Items.Count(item);
end;

function TRSInventory.CountItems(items: TRSItemArray): Int32;
begin
  if Self.Open() then
    Result := Self.Items.Count(items);
end;

function TRSInventory.CountItemStack(item: TRSItem): Int32;
begin
  if Self.Open() then
    Result := Self.Items.CountStack(item);
end;

function TRSInventory.CountSlotStack(slot: Int32): Int32;
begin
  if Self.Open() then
    Result := Self.Items.CountStack(slot);
end;


(*
## Inventory.IsFull
```pascal
function TRSInventory.IsFull(): Boolean;
```
Returns true if the inventory is full.

Example:
```pascal
WriteLn Inventory.IsFull();
```
*)
function TRSInventory.IsFull(): Boolean;
begin
  Result := Self.Count() >= 28;
end;

(*
## Inventory.WaitCount
```pascal
function TRSInventory.WaitCount(Count: Int32; WaitTime: Int32; Interval: Int32 = -1): Boolean;
```
Wait **WaitTime** until the Inventory.Count() matches **Count**.

Example:
```pascal
Inventory.WaitCount(28, 5000); //Wait up to 5 seconds to have 28 items in the inventory.
```
*)
function TRSInventory.WaitCount(Count: Int32; WaitTime: Int32; Interval: Int32 = -1): Boolean;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.Count() = Count, Interval, WaitTime);
end;

(*
## Inventory.RandomSlotNearby
```pascal
function TRSInventory.RandomSlotNearby(Slot: Int32; Slots: TIntegerArray): Int32;
```
Randomly returns one of the **Slots** weighted towards **Slot** by distance.

Example:
```pascal
var Slot: Int32;

Slot := Inventory.RandomSlotNearby(0, [0..27]);
WriteLn('This slot is likely nearby slot 0');
WriteLn(Slot);
```
*)
function TRSInventory.RandomSlotNearby(slot: Int32; slots: TIntegerArray): Int32;
begin
  Result := Self.Items.RandomSlotNearby(slot, slots);
end;


(*
## Inventory.FindItems
```pascal
function TRSInventory.FindItems(Items: TRSItemArray; out Slots: TIntegerArray): Boolean;
```
Attempts to find the items passed in **Items**. The function returns true if any item is found and
the slots of the found items will be returned in **Slots**.

Example:
```pascal
var
  slots: TIntegerArray;
begin
  if Inventory.FindItems(['Shark', 'Lobster'], slots) then
    WriteLn('The slots that have sharks and lobsters are: ', slots);
end;
```
*)
function TRSInventory.FindItems(items: TRSItemArray; out slots: TIntegerArray): Boolean;
begin
  if not Self.Open() then
    Exit;
  slots := Self.Items.IndicesOf(items);
  Result := Length(slots) > 0;
end;

(*
## Inventory.FindItem
```pascal
function TRSInventory.FindItem(Item: TRSItem; out Slots: TIntegerArray): Boolean;
function TRSInventory.FindItem(item: TRSItem; out slot: Int32): Boolean; overload;
```

Attempts to find the item passed in **Item**. The function returns true if the item was found can be
used to return a single slot or all slots containing the item.

Example:
```pascal
var
  slots: TIntegerArray;
  slot: Int32;
begin
  if Inventory.FindItem('Shark', slots) then
    WriteLn('The slots that have sharks are: ', slots);

  if Inventory.FindItem('Shark', slot) then
    WriteLn('The first slot that has a shark is: ', slot);
end;
```
*)
function TRSInventory.FindItem(item: TRSItem; out slots: TIntegerArray): Boolean;
begin
  Result := Self.FindItems([item], slots);
end;

function TRSInventory.FindItem(item: TRSItem; out slot: Int32): Boolean; overload;
begin
  slot := -1;
  if not Self.Open() then
    Exit;
  slot := Self.Items.IndexOf([item]);
  Result := slot <> -1;
end;


(*
## Inventory.Contains
```pascal
function TRSInventory.ContainsAny(items: TRSItemArray): Boolean;
function TRSInventory.ContainsItem(item: TRSItem): Boolean;
function TRSInventory.ContainsAll(items: TRSItemArray): Boolean;
```
Returns true if the inventory contains an `item` or `items`.

Example:
```pascal
WriteLn Inventory.ContainsAny(['Shark', 'Lobster']);
WriteLn Inventory.ContainsItem('Shark');
WriteLn Inventory.ContainsAll(['Shark', 'Lobster', 'Tuna']);
```
*)
function TRSInventory.ContainsAny(items: TRSItemArray): Boolean;
begin
  Result := Self.Open() and Self.Items.ContainsAny(items);
end;

function TRSInventory.ContainsItem(item: TRSItem): Boolean;
begin
  Result := Self.Open() and Self.Items.Contains(item);
end;

function TRSInventory.ContainsAll(items: TRSItemArray): Boolean;
begin
  Result := Self.Open() and Self.Items.ContainsAll(items);
end;


(*
## Inventory.Discover
```pascal
function TRSInventory.DiscoverAllEx(): array of TRSItemArray;
function TRSInventory.DiscoverAll(): TRSItemArray;
function TRSInventory.Discover(slot: Int32): TRSItemArray;
```
Returns possible items found in the inventory, either in a single slot or all of them.
The extended version returns an `array of TRSItemArray` while the others return
a flat `TRSItemArray`.

Example:
```pascal
if Inventory.Open() then
  WriteLn Inventory.DiscoverAll();

WriteLn Inventory.Discover(0);
```
*)
function TRSInventory.DiscoverAllEx(): array of TRSItemArray;
begin
  Result := Self.Items.DiscoverAllEx();
end;

function TRSInventory.DiscoverAll(): TRSItemArray;
begin
  Result := Self.Items.DiscoverAll();
end;

function TRSInventory.Discover(slot: Int32): TRSItemArray;
begin
  Result := Self.Items.Discover(slot);
end;


(*
## Inventory.MouseItem
```pascal
function TRSInventory.MouseItem(Item: TRSItem): Boolean;
```
Hover **Item** in the inventory.

Example:
```pascal
if Inventory.MouseItem('Bronze arrows') then
  ChooseOption.Select('Drop');
```
*)
function TRSInventory.MouseItem(item: TRSItem): Boolean;
begin
  if not Self.Open() then
    Exit;
  Result := Self.Items.MouseItem(item);
end;

(*
## Inventory.ClickItem
```pascal
function TRSInventory.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
```
Clicks **Item** in the inventory. If **Option** is specified that option will be
selected with right click if it exists.

Example:
```pascal
WriteLn Inventory.ClickItem('Attack potion(3)');
WriteLn Inventory.ClickItem('Ashes', 'Drop');
```
*)
function TRSInventory.ClickItem(item: TRSItem; option: String = ''): Boolean;
begin
  if not Self.Open() then
    Exit;

  Result := Self.Items.InteractItem(item, option);
end;

(*
## Inventory.Use()
```pascal
function TRSInventory.Use(slot, otherSlot: Int32): Boolean;
function TRSInventory.Use(Item, OtherItem: TRSItem): Boolean; overload;
```
Use 2 slots or items on one another.

Example:
```pascal
WriteLn Inventory.Use('Knife', 'Oak logs');
```
*)
function TRSInventory.Use(slot, otherSlot: Int32): Boolean;
var
  b: TBox;
begin
  b := Self.GetSlotBox(otherSlot);
  if b = [] then Exit;

  Result := Self.SetSelectedSlot(slot);
  if Result then
  begin
    Wait(0, 500, wdLeft);
    Mouse.Click(b, MOUSE_LEFT);
  end;
end;

function TRSInventory.Use(item, otherItem: TRSItem): Boolean; overload;
var
  slots, otherSlots: TIntegerArray;
  slot, otherSlot: Int32;
begin
  Self.SetSelectedSlot(-1); // Item images change when selected...

  Result := Self.FindItem(item, slots) and Self.FindItem(otherItem, otherSlots);
  if Result then
  begin
    slot := slots[Random(Length(slots))];
    otherSlot := Self.RandomSlotNearby(slot, otherSlots);
  
    Result := Self.Use(slot, otherSlot);
  end;
end;

(*
## Inventory.Drop
```pascal
function TRSInventory.RightClickDrop(slots: TIntegerArray): Boolean;
function TRSInventory.RightClickDrop(items: TRSItemArray; pattern: TIntegerArray): Boolean; overload;
function TRSInventory.ShiftDrop(slots: TIntegerArray): Boolean;
function TRSInventory.ShiftDrop(items: TRSItemArray; pattern: TIntegerArray): Boolean; overload;
```
Right click or shift drops `slots` or `items` specified.
If `items` are passed in, you also have to specify a `pattern` to use.

Shift dropping falls back to right click dropping if `TRSInventory.ShiftEnabled` is set to false.

Example:
```pascal
// Right click drop maple & willow logs in the snake pattern
Inventory.RightClickDrop(['Maple logs', 'Willow logs'], DROP_PATTERN_SNAKE);

// Shift drop maple & willow logs in the snake pattern
Inventory.ShiftDrop(['Maple logs', 'Willow logs'], DROP_PATTERN_SNAKE);
```
*)
function TRSInventory.RightClickDrop(slots: TIntegerArray): Boolean;
var
  b: TBox;
  i, j, attempts: Int32;
  selected: Int32;
  circle: TCircle;
begin
  if (Length(slots) = 0) then
    Exit(True);

  for attempts := 1 to 5 do
  begin
    i := 0;

    for i := 0 to High(slots) do
    begin
      b := Self.SlotBoxes[slots[i]];
      selected := Self.GetSelectedSlot();
      if (selected > -1) then
      begin
        Self.SetSelectedSlot(-1);
        Continue(2);
      end;

      if Self.IsSlotUsed(b) then
      begin
        Mouse.Move(b);
        ChooseOption.Select('Drop');

        if SRL.Dice(3) then
          for j := 1 to SRL.TruncatedGauss(0, 2) do
          begin
            circle.X := Mouse.Position().X;
            circle.Y := Mouse.Position().Y;
            circle.Radius := 5;

            Mouse.Click(circle, MOUSE_LEFT, True);
          end;

        Wait(0, 250, wdLeft);
      end;
    end;

    Break;
  end;

  Result := attempts <= 5;
end;

function TRSInventory.RightClickDrop(items: TRSItemArray; pattern: TIntegerArray): Boolean; overload;
var
  slots, order: TIntegerArray;
  i: Int32;
begin
  if Self.FindItems(items, slots) then
  begin
    for i := 0 to High(pattern) do
      if slots.Find(pattern[i]) > -1 then
        order += pattern[i];

    Result := Self.RightClickDrop(order);
  end;
end;


function TRSInventory.ShiftDrop(slots: TIntegerArray): Boolean;
var
  box: TBox;
  i, j, attempts: Int32;
  selected: Int32;
  circle: TCircle;
begin
  if (Length(slots) = 0) then Exit(True);

  if not Self.ShiftEnabled then
    Exit(Self.RightClickDrop(slots));

  Keyboard.IsKeyDown(VK_SHIFT); // Clear cache

  try
    for attempts := 1 to 5 do
    begin
      i := 0;

      while (i < Length(slots)) do
      begin
        box := Self.SlotBoxes[slots[i]];
        selected := Self.GetSelectedSlot();
        if (selected > -1) then
        begin
          Self.SetSelectedSlot(-1);
          Break;
        end;

        if Self.IsSlotUsed(box) then
        begin
          if not Keyboard.IsKeyDown(VK_SHIFT) then
          begin
            Keyboard.KeyDown(VK_SHIFT);
            Wait(95,170,wdLeft); //Wait for SHIFT to be registered before the click (important).
          end;

          Mouse.Click(box, MOUSE_LEFT);

          // Spam click a little
          for j := 1 to SRL.TruncatedGauss(0, 3) do
          begin
            circle.X := Mouse.Position().X;
            circle.Y := Mouse.Position().Y;
            circle.Radius := 5;

            Mouse.Click(circle, MOUSE_LEFT, True);
          end;

          Wait(0, 250, wdLeft);
        end;

        Inc(i);
      end;

      if (i = Length(slots)) then
        Exit;
    end;
  finally
    Result := attempts <= 5;
    if Keyboard.IsKeyDown(VK_SHIFT) then
      Keyboard.KeyUp(VK_SHIFT);
  end;

  Self.DebugLn('Shift drop is not enabled, consider enabling it for better performance.');
  Self.ShiftEnabled := False;
end;

function TRSInventory.ShiftDrop(slots, pattern: TIntegerArray): Boolean; overload;
begin
  Result := Self.ShiftDrop(slots.Intersection(pattern));
end;


function TRSInventory.ShiftDrop(items: TRSItemArray; pattern: TIntegerArray): Boolean; overload;
var
  slots: TIntegerArray;
begin
  if not Self.FindItems(items, slots) then Exit;
  Result := Self.ShiftDrop(slots.Intersection(pattern));
end;

var
(*
## var Inventory
Global TRSInventory variable.
*)
  Inventory: TRSInventory;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Inventory.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  Inventory.Setup();

  inherited;
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Inventory.Draw(Bitmap);
end;
