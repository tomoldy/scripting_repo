(*
# Prayer
Methods to interact with the prayer tab and quick prayers.
*)

{$DEFINE SRL_PRAYER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  ERSPrayer = (
    THICK_SKIN,
    BURST_OF_STRENGTH,
    CLARITY_OF_THOUGHT,
    SHARP_EYE,
    MYSTIC_WILL,

    ROCK_SKIN,
    SUPERHUMAN_STRENGTH,
    IMPROVED_REFLEXES,
    RAPID_RESTORE,
    RAPID_HEAL,

    PROTECT_ITEM,
    HAWK_EYE,
    MYSTIC_LORE,
    STEEL_SKIN,
    ULTIMATE_STRENGTH,

    INCREDIBLE_REFLEXES,
    PROTECT_FROM_MAGIC,
    PROTECT_FROM_MISSILES,
    PROTECT_FROM_MELEE,
    EAGLE_EYE,

    MYSTIC_MIGHT,
    RETRIBUTION,
    REDEMPTION,
    SMITE,
    PRESERVE,

    CHIVALRY,
    PIETY,
    RIGOUR,
    AUGURY
  );

  TRSPrayer = record(TRSInterface)
    PrayerBoxes: TBoxArray;
  end;
  TRSQuickPrayer = type TRSInterface;


(*
## Prayer.Setup
```pascal
procedure TRSPrayer.Setup; override;
```
Initializes **Prayer** variables.

```{note}
This is automatically called on the **Prayer** variable.
```
*)
procedure TRSPrayer.Setup(); override;
begin
  inherited;
  Self.Name := 'Prayer';
end;

(*
## Prayer.SetupAlignment
```pascal
procedure TRSPrayer.SetupAlignment(); overload;
```
Setups up the interface aligment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSPrayer.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := GameTab.Bounds.X1;
  alignment.Right := GameTab.Bounds.X2;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;
  Self.SetupAlignment(alignment);

  Self.PrayerBoxes := Grid(5, 6, 33, 33, [4, 4], [Self.Bounds.X1 + 1, Self.Bounds.Y1 + 10]);
end;

(*
## Prayer.GetPrayerLevel
```pascal
function TRSPrayer.GetPrayerLevel(): Int32;
```

**Prayer.GetPrayerLevel** is used to retrieve the prayer level from the prayer tab.

Example:
```pascal
Writeln Prayer.GetPrayerLevel();
```
*)
function TRSPrayer.GetPrayerLevel(): Int32;
var
  Text: String;
begin
  Result := -1;

  if (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) then
  begin
    Text := OCR.Recognize(Self.Bounds, TOCRColorFilter.Create([$1F98FF]), RS_FONT_PLAIN_12); 
    
    Result := Text.Before('/').ExtractNumber();
  end;
end;

(*
## Prayer.IsOpen
```pascal
function TRSPrayer.IsOpen(): Boolean;
```

Returns true if the Prayer tab is open.
*)
function TRSPrayer.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) and (Self.GetPrayerLevel <> -1);
end;

(*
## Prayer.Open
```pascal
function TRSPrayer.Open(): Boolean;
```

Attempts to open the prayer tab.

Example:
```pascal
Prayer.Open;
```
*)
function TRSPrayer.Open(): Boolean;
begin
  Result := Self.IsOpen() or GameTabs.Open(ERSGameTab.PRAYER);
end;

function TRSPrayer.GetPrayerBoxes(prayers: array of ERSPrayer): TBoxArray; overload;
var
  prayer: ERSPrayer;
begin
  for prayer in prayers do
    Result += Self.PrayerBoxes[prayer];
end;

(*
## Prayer.PointToPrayer
```pascal
function TRSPrayer.PointToPrayer(P: TPoint): Int32;
```

Returns the prayer number that **P** is part of.
-1 is returned if there's no result.

Example:
```pascal
WriteLn('Mouse is hovering prayer ', Prayer.PointToPrayer(Mouse.Position));
```
*)
function TRSPrayer.PointToPrayer(P: TPoint): Int32;
var
  prayer: ERSPrayer;
begin
  for prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.PrayerBoxes[prayer].Contains(p) then
      Exit(Ord(prayer));

  Result := -1;
end;

(*
## Prayer.MouseOver
```pascal
function TRSPrayer.MouseOver(Prayer: ERSPrayer): Boolean;
```

Hovers the specified prayer.

Example:
```pascal
Prayer.MouseOver(ERSPrayer.PROTECT_FROM_MELEE);
```
*)
function TRSPrayer.MouseOver(prayer: ERSPrayer): Boolean;
begin
  if not Self.Open() then Exit();
  Result := True;
  Mouse.Move(Self.PrayerBoxes[prayer]);
end;

(*
## Prayer.CanActivate
```pascal
function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean;
```

Returns true if we have enough level and have unlocked the specified prayer.

Example:
```pascal
WriteLn Prayer.CanActivate(ERSPrayer.PROTECT_FROM_MELEE);
```
*)
function TRSPrayer.CanActivate(prayer: ERSPrayer): Boolean;
begin
  if not Self.IsOpen() then Exit;
  Result := SRL.PeakBrightness(Self.PrayerBoxes[prayer]) > 55;
end;

(*
## Prayer.GetAvailablePrayers
```pascal
function TRSPrayer.GetAvailablePrayers: array of ERSPrayer;
```

Returns an array of all available prayers.
*)
function TRSPrayer.GetAvailablePrayers: array of ERSPrayer;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.CanActivate(ERSPrayer(Prayer)) then
      Result += Prayer;
end;

(*
## Prayer.IsPrayerActive
```pascal
function TRSPrayer.IsPrayerActive(Prayer: ERSPrayer): Boolean;
```
Returns true if the specified prayer is active right now.

Example:
```pascal
WriteLn Prayer.IsPrayerActive(ERSPrayer.SMITE);
```
*)
function TRSPrayer.IsPrayerActive(prayer: ERSPrayer): Boolean;
begin
  if not Self.IsOpen() then Exit;
  Result := SRL.CountColor(CTS0(7315120, 27), Self.PrayerBoxes[prayer]) > 10;
end;

(*
## Prayer.AnyPrayerActive()
```pascal
function TRSPrayer.AnyPrayerActive(prayers: array of ERSPrayer): Boolean;
```
Returns true if any of the specified prayers is active.
*)
function TRSPrayer.AnyPrayerActive(prayers: array of ERSPrayer): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(prayers) do
    if Self.IsPrayerActive(prayers[i]) then
      Exit(True);
end;

(*
## Prayer.AllPrayerActive
```pascal
function TRSPrayer.AllPrayerActive(prayers: array of ERSPrayer): Boolean;
```
Returns true if all of the specified prayers is active.
*)
function TRSPrayer.AllPrayerActive(prayers: array of ERSPrayer): Boolean;
var
  i: Int32;
begin
  for i := 0 to High(prayers) do
    if not Self.IsPrayerActive(prayers[i]) then
      Exit;
  Result := True;
end;


(*
## Prayer.GetActivePrayers
```pascal
function TRSPrayer.GetActivePrayers: array of ERSPrayer;
```

Returns an array of all active prayers.
*)
function TRSPrayer.GetActivePrayers(): array of ERSPrayer;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.IsPrayerActive(ERSPrayer(Prayer)) then
      Result += Prayer;
end;

(*
## Prayer.PrayerActive
```pascal
function TRSPrayer.PrayerActive: Boolean;
```

Returns true if any prayer is active.
*)
function TRSPrayer.PrayerActive: Boolean;
begin
  if not Self.Open then
    Exit;

  Result := Self.GetActivePrayers <> [];
end;

(*
## Prayer.ActivatePrayer
```pascal
function TRSPrayer.ActivatePrayer(prayers: array of ERSPrayer): Boolean;
function TRSPrayer.ActivatePrayer(prayer: ERSPrayer): Boolean; overload;
```
Attempts to activate the specified `prayer`or `prayers`.

Example:
```pascal
Prayer.ActivatePrayer(ERSPrayer.PROTECT_FROM_MELEE);
```
*)
function TRSPrayer.ActivatePrayer(prayers: array of ERSPrayer): Boolean;
var
  i : int32;
  cantActivate: Boolean;
begin
  if not Self.Open() then
    Exit(False);

  for i := 0 to High(prayers) do
  begin
    cantActivate := cantActivate or not Self.CanActivate(prayers[i]);
    if not cantActivate and not Self.IsPrayerActive(prayers[i]) then
      Mouse.Click(Self.PrayerBoxes[prayers[i]], MOUSE_LEFT);
  end;

  Result := not cantActivate and WaitUntil(Self.AllPrayerActive(prayers), 100, 2000);
end;

function TRSPrayer.ActivatePrayer(prayer: ERSPrayer): Boolean; overload;
begin
  Result := Self.ActivatePrayer([prayer]);
end;

(*
## Prayer.DisablePrayer
```pascal
function TRSPrayer.DisablePrayer(prayers: array of ERSPrayer): Boolean;
function TRSPrayer.DisablePrayer(prayer: ERSPrayer): Boolean; overload;
```
Attempts to disable the specified `prayer` or `prayers`.

Example:
```pascal
Prayer.DisablePrayer(ERSPrayer.PROTECT_FROM_MELEE);
```
*)
function TRSPrayer.DisablePrayer(prayers: array of ERSPrayer): Boolean;
var
  i : int32;
begin
  if not Self.Open() then Exit;

  for i := 0 to High(prayers) do
    if Self.CanActivate(prayers[i]) and Self.IsPrayerActive(prayers[i]) then
    begin
      Mouse.Click(Self.PrayerBoxes[prayers[i]], MOUSE_LEFT);
      Wait(0, 100, EWaitDir.wdLeft);
    end;

  Result := WaitUntil(not Self.AnyPrayerActive(prayers), 100, 2000);
end;

function TRSPrayer.DisablePrayer(prayer: ERSPrayer): Boolean; overload;
begin
  Result := Self.DisablePrayer([prayer]);
end;

procedure TRSPrayer.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Self.PrayerBoxes, $00FFFF);
  Bitmap.DrawBoxes(Self.GetPrayerBoxes(Self.GetAvailablePrayers), $00FF22);
  Bitmap.DrawBoxes(Self.GetPrayerBoxes(Self.GetActivePrayers), $FFFFFF);
end;

(*
## var Prayer
  Global Prayer variable.
*)
var
  Prayer: TRSPrayer;

(*
## QuickPrayer.Setup
```pascal
procedure QuickPrayer.Setup;
```

Initializes **QuickPrayer** variables.

```{note}
This is automatically called on the **QuickPrayer** variable.
```
*)
procedure TRSQuickPrayer.Setup(); override;
begin
  inherited;

  Self.Name := 'QuickPrayer';
end;

(*
## QuickPrayer.SetupSetupAlignment
```pascal
procedure QuickPrayer.SetupSetupAlignment(); overload;
```
Setups up the interface aligment for the current client mode.

```{note}
This is automatically called on the **TRSClient.ClientModeChanged** function.
```
*)
procedure TRSQuickPrayer.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left := GameTab.Bounds.X1;
  alignment.Right := GameTab.Bounds.X2;
  alignment.Top := GameTab.Bounds.Y1;
  alignment.Bottom := GameTab.Bounds.Y2;
  Self.SetupAlignment(alignment);
end;

(*
## QuickPrayer.IsOpen
```pascal
function QuickPrayer.IsOpen(): Boolean;
function QuickPrayer.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
```
Returns true if the quick prayers are open.
*)
function TRSQuickPrayer.IsOpen(): Boolean;
begin
  Result := (GameTabs.GetCurrentTab() = ERSGameTab.PRAYER) and (Prayer.GetPrayerLevel = -1);
end;

function TRSQuickPrayer.IsOpen(waitTime: Int32; interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;

(*
## QuickPrayer.Open
```pascal
function QuickPrayer.Open(): Boolean;
```
Attempts to open the quick prayers.

Example:
```pascal
QuickPrayer.Open();
```
*)
function TRSQuickPrayer.Open(): Boolean;
begin
  if Self.IsOpen then Exit(True);

  Mouse.Move(Minimap.Orbs[ERSMinimapOrb.PRAYER]);
  ChooseOption.Open;
  if ChooseOption.Select('Setup') then
    Result := Self.IsOpen(2000);
end;

(*
## QuickPrayer.GetButton
```pascal
function QuickPrayer.GetButton(): TBox;
```
Internal function that returns the bounds of the quick prayers close button.
*)
function TRSQuickPrayer.GetButton(): TBox;
begin
  Result := [Self.Bounds.X1 + 50, Self.Bounds.Y1 + 233, Self.Bounds.X2 - 49, Self.Bounds.Y2 - 7];
end;

(*
## QuickPrayer.Close
```pascal
function QuickPrayer.Close(): Boolean;
```
Attempts to close the quick prayers.

Example:
```pascal
QuickPrayers.Close;
```
*)
function TRSQuickPrayer.Close(): Boolean;
begin
  if not Self.IsOpen then
    Exit(True);

  Mouse.Click(Self.GetButton, MOUSE_LEFT);

  Result := WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(0, 1500), Random(1500, 3000));
end;

(*
## QuickPrayer.IsPrayerSelected
```pascal
function QuickPrayer.IsPrayerSelected(qPrayer: ERSPrayer): Boolean;
```
Returns true if the specified quick prayer is selected.

Example:
```pascal
WriteLn QuickPrayers.IsPrayerSelected(ERSPrayer.PROTECT_FROM_MAGIC);
```
*)
function TRSQuickPrayer.IsPrayerSelected(qPrayer: ERSPrayer): Boolean;
begin
  if not Self.IsOpen() then  Exit;
  Result := SRL.CountColor(CTS0($080CEF), Prayer.PrayerBoxes[qPrayer]) > 0;
end;

(*
## QuickPrayer.GetSelectedPrayers
```pascal
function QuickPrayer.GetSelectedPrayers(): array of ERSPrayer;
```
Returns an array of all selected quick prayers

Example:
```pascal
WriteLn QuickPrayers.GetSelectedPrayers;
```
*)
function TRSQuickPrayer.GetSelectedPrayers(): array of ERSPrayer;
var
  qPrayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen() then
    Exit;

  for qPrayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.IsPrayerSelected(qPrayer) then
      Result += qPrayer;
end;

(*
## QuickPrayer.SelectPrayer
```pascal
function QuickPrayer.SelectPrayer(QPrayer: ERSPrayer): Boolean;
function QuickPrayer.SelectPrayer(QPrayers: array of ERSPrayer): Boolean; overload;
```
Attempts to select the specified quick prayer/prayers.

Example:
```pascal
QuickPrayers.SelectPrayer(ERSPrayer.PROTECT_ITEM);
```
*)
function TRSQuickPrayer.SelectPrayer(qPrayer: ERSPrayer): Boolean;
begin
  if not Self.Open() then Exit;
  if Self.IsPrayerSelected(qPrayer) then Exit(True);

  Mouse.Click(Prayer.PrayerBoxes[qPrayer], MOUSE_LEFT);

  Result := WaitUntil(Self.IsPrayerSelected(qPrayer), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSQuickPrayer.SelectPrayer(qPrayers: array of ERSPrayer): Boolean; overload;
var
  i : int32;
begin
  for i := 0 to High(qPrayers) do
  Self.SelectPrayer(qPrayers[i]);

  Result := qPrayers = Self.GetSelectedPrayers();
end;

(*
## QuickPrayer.DeselectPrayer
```pascal
function QuickPrayer.DeselectPrayer(QPrayer: ERSPrayer): Boolean;
function QuickPrayer.DeselectPrayer(QPrayers: array of ERSPrayer): Boolean; overload;
```
Attempts to Deselect the specified quick prayer/prayers.

Example:
```pascal
QuickPrayers.DeselectPrayer(ERSPrayer.PROTECT_ITEM);
```
*)
function TRSQuickPrayer.DeselectPrayer(qPrayer: ERSPrayer): Boolean;
begin
  if not Self.Open then Exit;
  if not Self.IsPrayerSelected(qPrayer) then Exit(True);

  Mouse.Click(Prayer.PrayerBoxes[qPrayer], MOUSE_LEFT);

  Result := WaitUntil(not Self.IsPrayerSelected(qPrayer), 50, SRL.TruncatedGauss(1000, 2000));
end;

function TRSQuickPrayer.DeselectPrayer(qPrayers: array of ERSPrayer): Boolean; overload;
var
  i : int32;
begin
  for i := 0 to High(qPrayers) do
    Self.DeselectPrayer(qPrayers[i]);

  Result := qPrayers <> Self.GetSelectedPrayers();
end;

procedure TRSQuickPrayer.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited();

  Bitmap.DrawBoxes(Prayer.PrayerBoxes, $00FFFF);
  Bitmap.DrawBoxes(Prayer.GetPrayerBoxes(Prayer.GetAvailablePrayers()), $00ff22);
  Bitmap.DrawBoxes(Prayer.GetPrayerBoxes(Self.GetSelectedPrayers()), $FFFFFF);
  Bitmap.DrawBox(Self.GetButton, $00FFFF);
end;

var
(*
## var QuickPrayer
  Global QuickPrayer variable.
*)
  QuickPrayer: TRSQuickPrayer;

(*
## Prayer.Open() override
```pascal
function TRSPrayer.Open: Boolean; override;
```
Overrides **Prayer.Open** to handle quick prayers if they are open.
*)
function TRSPrayer.Open(): Boolean; override;
begin
  Result := Self.IsOpen or (GameTabs.Open(ERSGameTab.PRAYER) and QuickPrayer.Close);
end;

(*
## Prayer.CanActivate() override
```pascal
function TRSPrayer.CanActivate(Prayer: ERSPrayer): Boolean; override;
```
Overrides `Prayer.CanActivate()` to handle quick prayers.
*)
function TRSPrayer.CanActivate(prayer: ERSPrayer): Boolean; override;
begin
  if not Self.IsOpen() and not QuickPrayer.IsOpen() then Exit;
  Result := SRL.PeakBrightness(Self.PrayerBoxes[prayer]) > 55;
end;

(*
## Prayer.GetAvailablePrayers() override
```pascal
function TRSPrayer.GetAvailablePrayers(): array of ERSPrayer; override;
```
Overrides `Prayer.GetAvailablePrayers()` to handle quick prayers.
*)
function TRSPrayer.GetAvailablePrayers(): array of ERSPrayer; override;
var
  Prayer: ERSPrayer;
begin
  Result := [];
  if not Self.IsOpen and not QuickPrayer.IsOpen then
    Exit;

  for Prayer := Low(ERSPrayer) to High(ERSPrayer) do
    if Self.CanActivate(ERSPrayer(Prayer)) then
      Result += Prayer;
end;


procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Prayer.SetupAlignment();
  QuickPrayer.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;
  Prayer.Setup();
  QuickPrayer.Setup();
end;

procedure TSRL.Debug(bitmap: TMufasaBitmap); override;
begin
  inherited;
  Prayer.Draw(Bitmap);
  QuickPrayer.Draw(Bitmap);
end;
