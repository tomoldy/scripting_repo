(*
# Make
The "Make" menu is the chatbox menu that pops up when you attempt to craft certain items in OldSchool RuneScape.
TRSMake is the record SRL has to handle it.
*)

{$DEFINE SRL_MAKE_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

type
  TRSMakeItem = record
    Item: String;
    Index: Int32;
    Quantity: Int32;
  end;

  TRSMake = record(TRSInterface)
    Items: array of TRSMakeItem;
    QUANTITY_ALL: Int32;
  end;

(*
## Make.Setup
```pascal
procedure TRSMake.Setup; override;
```
Internal setup method automatically called by SRL on startup.
You will probably never need to use this directly.
*)
procedure TRSMake.Setup; override;
begin
  inherited;

  Self.Name := 'Make';
  Self.QUANTITY_ALL := -1;
end;

(*
## Make.SetupAlignment
```pascal
procedure TRSMake.SetupAlignment(); overload;
```
Internal method automatically called by SRL on startup used to setup the interface coordinates.
You will probably never need to use this directly.
*)
procedure TRSMake.SetupAlignment(); overload;
var
  alignment: TRSInterfaceAlignment;
begin
  alignment.Left   := Chat.Bounds.X1;
  alignment.Right  := Chat.Bounds.X2;
  alignment.Top    := Chat.Bounds.Y1;
  alignment.Bottom := Chat.Bounds.Y2;
  Self.SetupAlignment(alignment);
end;


(*
## Make.GetItemButtons
```pascal
function TRSMake.GetItemButtons: TRSButtonArray;
```
Internal method used to get the interface buttons.
This is used by all other methods that interact with buttons.
You will probably never need to call this directly.

Example:
```pascal
Debug(Make.GetItemButtons());
```
*)
function TRSMake.GetItemButtons(): TRSButtonArray;
var
  button: TRSButton;
begin
  for button in Self.FindButtons([[0,0]]) do
    if InRange(button.Bounds.Height(), 60, 85) and InRange(button.Bounds.Width(), 20, 120) then
    begin
      button.Index := Length(Result);
      Result += button;
    end;
end;

(*
## Make.GetQuantityButtons
```pascal
function TRSMake.GetQuantityButtons(): TRSButtonArray;
```
Internal method used to get the interface quantity buttons.
This is used by all other methods that interact with the quantity buttons.
You will probably never need to call this directly.

Example:
```pascal
Debug(Make.GetQuantityButtons());
```
*)
function TRSMake.GetQuantityButtons(): TRSButtonArray;
begin
  Result := Self.FindButtons([[35,30], [30,30]]);
end;


(*
## Make.IsOpen
```pascal
function TRSMake.IsOpen(): Boolean;
function TRSMake.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
```
Checks if the make interface is open.
You can optionally specify a **WaitTime** to wait for it to open.

Example:
```pascal
WriteLn Make.IsOpen();
```
*)
function TRSMake.IsOpen(): Boolean;
begin
  Result := Self.GetItemButtons() <> [];
end;

function TRSMake.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;


(*
## Make.FindHint
```pascal
function TRSMake.FindHint(): TPointArray;
```
Returns the hint tooltip has a TPointArray

Example:
```pascal
Debug(Make.FindHint());
```
*)
function TRSMake.FindHint(): TPointArray;
const
  HINT_COLOR = $A0FFFF;
begin
  FindColors(Result, HINT_COLOR, Self.Bounds);
end;

(*
## Make.GetFreeSpace
```pascal
function TRSMake.GetFreeSpace(): TPointArray;
```
Get a TPointArray of the chatbox that does not have a single point in any of the make item buttons.

Example:
```pascal
Debug(Make.GetFreeSpace());
```
*)
function TRSMake.GetFreeSpace(): TPointArray;
var
  b: TBox;
  tmp: TPointArray;
begin
  Result := Self.Rectangle.ToTPA().Connect();
  Result.Fill();

  for b in Self.GetItemButtons().ToBoxes() do
    tmp += Result.FilterBox(b.Expand(1));

  Result := ClearTPAFromTPA(Result, tmp);
end;

(*
## Make.SetQuantity
```pascal
function TRSMake.SetQuantity(Amount: Int32): Boolean;
```
Attempts to set a quantity.

Example:
```pascal
WriteLn Make.SetQuantity(Make.QUANTITY_ALL);
```
*)
function TRSMake.SetQuantity(Amount: Int32): Boolean;
const
  ENABLED_COLOR = $FFFFFF;
  DISABLED_COLOR = $203040;
var
  p: TPoint;
  hintPoint: TPoint;
  hint: TBox;
  freeSpace: TPointArray;
  Text: String;
  Button: TRSButton;
  Buttons: TRSButtonArray;
begin
  hint := Self.FindHint().Bounds().Expand(1); //Expand(1) because of the border
  p := [Self.Bounds.X2 - 193, Self.Bounds.Y1 + 44];

  hintPoint := [hint.X2, hint.Y1];
  if (hintPoint.X > p.X) and (hintPoint.Y < p.Y) then
  begin
    freeSpace := Self.GetFreeSpace();
    p := freeSpace[Random(0, High(freeSpace))];
    Mouse.Move(p);
    WaitUntil(Self.FindHint() = [], 100, 2000);
  end;

  if Amount = Self.QUANTITY_ALL then
    Text := 'All'
  else
    Text := ToString(Amount);

  Buttons := Self.GetQuantityButtons();

  for Button in Buttons do
  begin
    // Already selected
    if Button.FindText(Text, RS_FONT_PLAIN_11, ENABLED_COLOR) then
      Exit(True);

    // Select
    if Button.FindText(Text, RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click());
  end;

  for Button in Buttons do
    if Button.FindText('X', RS_FONT_PLAIN_11, DISABLED_COLOR) then
      Exit(Button.Click() and Chat.AnswerQuery('Enter amount', ToString(Amount), 3000));
end;


(*
## Make.SelectHelper
```pascal
function TRSMake.SelectHelper(var Item: TRSMakeItem; Quantity: Int32; UseKeyboard: Boolean = True): Boolean;
function TRSMake.SelectHelper(Button: TRSButton; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; overload;
```

Internal helper method that handles selecting a button and quantity with or without the keyboard.
You probably will never need to use this directly.
*)
function TRSMake.SelectHelper(var Item: TRSMakeItem; Quantity: Int32; UseKeyboard: Boolean = True): Boolean;
var
  buttons: TRSButtonArray;
begin
  if (Item.Quantity = 0) or (Item.Quantity <> Quantity) then
  begin
    if not Self.SetQuantity(Quantity) then
      Exit;
    Item.Quantity := Quantity;
  end;

  buttons := Self.GetItemButtons();
  Result := High(buttons) >= Item.Index;

  if not Result then
    Exit;

  if UseKeyboard then
  begin
    buttons[Item.Index].Bounds.Y2 += 15;

    if buttons[Item.Index].FindText('Space', RS_FONT_PLAIN_11) then
      Keyboard.PressKey(VK_SPACE)
    else
      Keyboard.PressKey(VK_1 + buttons[Item.Index].Index);
  end else
    Mouse.Click(buttons[Item.Index].Bounds, MOUSE_LEFT);
end;

function TRSMake.SelectHelper(Button: TRSButton; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; overload;
begin
  Result := Self.SetQuantity(Quantity);

  if Result then
  begin
    if UseKeyboard then
    begin
      Button.Bounds.Y2 += 15;

      if Button.FindText('Space', RS_FONT_PLAIN_11) then
        Keyboard.PressKey(VK_SPACE)
      else
        Keyboard.PressKey(VK_1 + Button.Index);
    end else
      Mouse.Click(Button.Bounds, MOUSE_LEFT);
  end;
end;


(*
## Make.Select
```pascal
function TRSMake.Select(Index: Int32; Quantity: Int32; UseKeyboard: Boolean = True): Boolean;
function TRSMake.Select(Item: String; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; overload;
```
Select a **Index** of the available buttons or the button with **Item** text on it when hovered.

Example:
```pascal
WriteLn Make.Select('Maple longbow', Make.QUANTITY_ALL, True);
```
*)
function TRSMake.Select(Index: Int32; Quantity: Int32; UseKeyboard: Boolean = True): Boolean;
var
  Buttons: TRSButtonArray;
begin
  Buttons := Self.GetItemButtons();

  if Index <= High(Buttons) then
    Result := Self.SelectHelper(Buttons[Index], Quantity, UseKeyboard);
end;

function TRSMake.Select(Item: String; Quantity: Int32; UseKeyboard: Boolean = True): Boolean; overload;
var
  Buttons: TRSButtonArray;
  TPA: TPointArray;
  I: Int32;
begin
  Buttons := Self.GetItemButtons();

  for I := 0 to High(Self.Items) do
  begin
    if (Self.Items[I].Item = Item) then
    begin
      Result := Self.SelectHelper(Buttons[Items[I].Index], Quantity, UseKeyboard);
      Exit;
    end;
  end;

  for I := 0 to High(Buttons) do
  begin
    Mouse.Move(Buttons[I].Bounds);
    if not WaitUntil((TPA := Self.FindHint()) <> [], SRL.TruncatedGauss(50, 1500), 4000) then
      Continue;

    if SameText(OCR.Recognize(TPA.Bounds(), TOCRColorFilter.Create([0]), RS_FONT_PLAIN_12), Item) then
    begin
      Self.Items += [Item, Buttons[I].Index , 0];

      Exit(Self.SelectHelper(Self.Items[High(Self.Items)], Quantity, UseKeyboard));
    end;

    Wait(0, 1000, wdLeft);
  end;
end;

(*
## Make.Draw
```pascal
procedure TRSMake.Draw(Bitmap: TMufasaBitmap); override; overload;
```
Internal debug method. Used by SRL.Debug().

Example:
```pascal
SRL.Debug();
```
*)
procedure TRSMake.Draw(bitmap: TMufasaBitmap); override;
var
  buttons: TRSButtonArray;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  buttons := Self.GetItemButtons();
  buttons.Draw(bitmap);
  buttons := Self.GetQuantityButtons();
  buttons.Draw(bitmap);
end;


(*
## var Make
Global Make variable.
*)
var
  Make: TRSMake;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;
  Make.SetupAlignment();
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  Make.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Make.Draw(Bitmap);
end;
