(*
(MM2MS)=
# Minimap to Mainscreen
The core for our minimap to mainscreen projection.
Supports rotation, and zoom, and resizable client.

MM2MS extends the Minimap interface as well as the mainscreen interface with
functionality to convert coordinates to & from the minimap to the mainscreen.
*)

{$DEFINE SRL_MM2MS_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}

(*
(MM2MS)=
## type TMM2MS
```pascal
TMM2MS = record(TSRLBaseRecord)
  ZoomLevel: Int32;
  ZoomRectangles: array [0..100] of TRectangle;
  PlayerBoxes: array [0..100] of TBox;
end;
```
The comments explains it. This is the datastructure MM2MS uses.
*)
type
  TMM2MS = record(TSRLBaseRecord)
    ZoomLevel: Int32;
    ZoomRectangles: array [0..100] of TRectangle;
    PlayerBoxes: array [0..100] of TBox;
  end;

function TMM2MS.GetZoomLevel(): Integer;
begin
  if (Self.ZoomLevel = -1) then
  begin
    Self.DebugLn('Unknown zoom level, reading from options...');
    Self.ZoomLevel := Options.GetZoomLevel();
    Self.DebugLn('Current zoom level: ' + ToString(Self.ZoomLevel));
  end;

  Result := Self.ZoomLevel;
end;

function TMM2MS.Run(Arr: Vector3Array; roll: Single = $FFFF): TPointArray;
var
  i: Int32;
  P: TPoint;
  Projector: TMM2MSProjector;
begin
  if (Self.ZoomLevel = -1) then
  begin
    Self.DebugLn('Unknown zoom level, reading from options...');
    Self.ZoomLevel := Options.GetZoomLevel();
    Self.DebugLn('Current zoom level: ' + ToString(Self.ZoomLevel));
  end;

  case RSClient.Mode of
    ERSClientMode.FIXED:
      Projector := MM2MS_PROJECTOR_FIXED;

    ERSClientMode.RESIZABLE_MODERN,
    ERSClientMode.RESIZABLE_CLASSIC:
      Projector := MM2MS_PROJECTOR_RESIZABLE;
  end;

  Projector.MainScreen := MainScreen.Bounds;
  Projector.Minimap := Minimap.Bounds;
  Projector.ZoomLevel := Self.ZoomLevel;

  P := Minimap.Center;
  for i := 0 to High(Arr) do
    Arr[i] := [Arr[i].X - P.X, P.Y - Arr[i].Y, Arr[i].Z];

  Result := Projector.Run(Arr, Vec3(0, 0, PI*2 - roll));
end;

procedure TMM2MS.Setup();
begin
  Self.Name := 'MM2MS';
  Self.ZoomLevel := -1;
end;

(*
## var MM2MS
```pascal
var MM2MS: TMM2MS;
```
The global variable which you would refer to.
*)
var
  MM2MS: TMM2MS;

procedure TSRL.Setup(); override;
begin
  inherited;

  MM2MS.Setup();
end;

(*
# Minimap Extensions
Extend the minimap-functionality with MM2MS functions
*)


(*
## Minimap.ToMS
```pascal
function TRSMinimap.VectorsToMS(vectors: Vector3Array; roll: Single = $FFFF): TPointArray;
function TRSMinimap.PointsToMS(points: TPointArray; roll: Single = $FFFF): TPointArray;
function TRSMinimap.VectorToMS(vec: Vector3; roll: Single = $FFFF): TPoint;
function TRSMinimap.PointToMS(pt: TPoint; roll: Single = $FFFF): TPoint;
function TRSMinimap.StaticToMS(StaticMMPoint: TPoint; Height:Int32=0): TPoint;
```
Convert minimap coordinates to mainscreen ones.
Methods that use Vector3 are used internally, you probably don't need to use them.

The static method assumes the coordinate is from the compass angle set to 0.
And will be rotated to the current compass angle.

:::{note}
:class: dropdown
roll is the compass angle, by leaving it default it will gather the compass angle itself.
:::
*)
function TRSMinimap.VectorsToMS(vectors: Vector3Array; roll: Single): TPointArray;
var
  i: Int32;
begin
  if (roll = $FFFF) then
    roll := Self.GetCompassAngle(False);

  for i := 0 to High(vectors) do
    vectors[i] := vectors[i].RotateXY(PI*2 - roll, Self.Center.X, Self.Center.Y);

  Result := MM2MS.Run(vectors, roll);
end;

function TRSMinimap.PointsToMS(points: TPointArray; roll: Single = $FFFF): TPointArray;
var
  vectors: Vector3Array;
  i: Int32;
begin
  if (roll = $FFFF) then
    roll := Self.GetCompassAngle(False);

  SetLength(vectors, Length(points));

  for i := 0 to High(points) do
  begin
    vectors[i].x := points[i].x;
    vectors[i].y := points[i].y;
    vectors[i] := vectors[i].RotateXY(PI*2 - roll,  Self.Center.X, Self.Center.Y);
  end;

  Result := MM2MS.Run(vectors, roll);
end;

function TRSMinimap.PointToMS(pt: TPoint; roll: Single = $FFFF): TPoint;
begin
  if (roll = $FFFF) then roll := Self.GetCompassAngle(False);
  pt := pt.Rotate(PI*2 - roll, Self.Center);

  Result := MM2MS.Run([Vec3(pt.x, pt.y)], roll)[0];
end;

function TRSMinimap.ATPAToMS(atpa: T2DPointArray; roll: Single = $FFFF): T2DPointArray; overload;
var
  tpa: TPointArray;
begin
  if roll = $FFFF then
    roll := Self.GetCompassAngle(False);

  for tpa in atpa do
    Result += Self.PointsToMS(tpa, roll);
end;

function TRSMinimap.VectorToMS(vec: Vector3; roll: Single = $FFFF): TPoint;
begin
  if (roll = $FFFF) then roll := Self.GetCompassAngle(False);
  vec := vec.RotateXY(PI*2 - roll, Self.Center.X, Self.Center.Y);

  Result := MM2MS.Run([vec], roll)[0];
end;

function TRSMinimap.StaticToMS(staticMMPoint: TPoint; height:Int32=0): TPoint;
var
  angle: Double;
begin
  angle := Self.GetCompassAngle(False);
  with staticMMPoint.Rotate(angle, Self.Center) do
    Result := Self.VectorToMS(Vec3(X,Y, height), angle);
end;


(*
## Minimap.ToMSRect
```pascal
function TRSMinimap.VectorToMSRect(vector: Vector3; weSize, nsSize: Double = 1; roll: Single = $FFFF): TRectangle;
function TRSMinimap.PointToMSRect(pt: TPoint; weSize, nsSize: Double = 1; roll: Single = $FFFF): TRectangle;
function TRSMinimap.StaticToMsRect(staticMMPoint: TPoint; weSize, nsSize: Double = 1; Height: Double = 0): TRectangle;
```
Converts minimap coordinates to mainscreen rectangles.

The static method assumes a coordinate with compass angle set to 0.
So the coordinate will be rotated to whatever the current angle is.

The rectangle can be expanded with `weSize` and `nsSize` and it's unit is measured in game tiles.
:::{note}
:class: dropdown
weSize is the size of the rectangle we want to get from west-to-east measured in RS tiles.
nsSize is the size of the rectangle we want to get from north-to-south measured in RS tiles.
:::

:::{note}
:class: dropdown
roll is the compass angle, by leaving it default it will gather the compass angle itself.
:::
*)
function TRSMinimap.VectorToMSRect(vector: Vector3; weSize, nsSize: Double = 1; roll: Single = $FFFF): TRectangle;
var
  Arr: TPointArray;
begin
  if weSize <= 0 then weSize := 1;
  if nsSize <= 0 then nsSize := 1;

  //tiles are roughly 4 pixels height and width in the minimap.
  //so for our coordinate we will want to "expand" each tile 2 pixels north, south, east and west.
  weSize := 2 * weSize;
  nsSize := 2 * nsSize;

  if (roll = $FFFF) then roll := Self.GetCompassAngle(False);

  vector := vector.RotateXY(PI*2 - roll, Self.Center.X, Self.Center.Y);
  Arr := MM2MS.Run([Vec3(vector.X-weSize, vector.Y-nsSize, vector.z),
                    Vec3(vector.X+weSize, vector.Y-nsSize, vector.z),
                    Vec3(vector.X+weSize, vector.Y+nsSize, vector.z),
                    Vec3(vector.X-weSize, vector.Y+nsSize, vector.z)], roll);

  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

function TRSMinimap.PointToMSRect(pt: TPoint; weSize, nsSize: Double = 1; roll: Single = $FFFF): TRectangle;
var
  Arr: TPointArray;
begin
  if weSize <= 0 then weSize := 1;
  if nsSize <= 0 then nsSize := 1;

  //tiles are roughly 4 pixels height and width in the minimap.
  //so for our coordinate we will want to "expand" each tile 2 pixels north, south, east and west.
  weSize := 2 * weSize;
  nsSize := 2 * nsSize;

  if (roll = $FFFF) then roll := Self.GetCompassAngle(False);

  pt := pt.Rotate(PI*2 - roll, Self.Center);

  Arr := MM2MS.Run([Vec3(pt.x-weSize, pt.y-nsSize),
                    Vec3(pt.x+weSize, pt.y-nsSize),
                    Vec3(pt.x+weSize, pt.y+nsSize),
                    Vec3(pt.x-weSize, pt.y+nsSize)], roll);
  Result := [Arr[0], Arr[1], Arr[2], Arr[3]];
end;

function TRSMinimap.StaticToMSRect(staticMMPoint: TPoint; weSize, nsSize: Double = 1; height: Double = 0): TRectangle;
var
  angle: Double;
begin
  angle  := Self.GetCompassAngle(False);
  with staticMMPoint.Rotate(angle, Self.Center) do
    Result := Self.VectorToMSRect(Vec3(X, Y, height), weSize, nsSize, angle);
end;


(*
## Minimap.GetTile
```pascal
function TRSMinimap.GetTileMS(loc: TPoint; tile: Vector3 = [1, 1, 0]; offset: Vector2 = [0, 0]; angle: Single = $FFFF): TRectangle;
function TRSMinimap.GetTileMS(loc: TPoint; shape: TRSMainScreenShape; offset: TPoint = [0, 0]; angle: Single = $FFFF): TRectangle; overload;
function TRSMinimap.GetTileArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 0]; offset: TPoint = [0, 0]; angle: Single = $FFFF): TRectArray;
function TRSMinimap.GetTileArrayMS(locArray: TPointArray; shapeArray: TRSMainScreenShapeArray; offset: TPoint = [0, 0]; angle: Single = $FFFF): TRectArray; overload;
```
Converts minimap coordinates to mainscreen tile at a specific height.
There's no accurate way of measuring height so this value has to be eyeballed.
As a guide, a bank chest is around `4` height, a player is around `6` and a oak tree `12/14`.

Methods with TRSMainScreenShape parameters allow you do have "tilted" rectangles.

:::{note}
:class: dropdown
`angle` is the compass angle, by leaving it default it will gather the compass angle itself.
:::
*)
function TRSMinimap.GetTileMS(loc: TPoint; tile: Vector3 = [1, 1, 0]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TRectangle;
begin
  if not loc.InRange(Minimap.Center, 90) then Exit; //avoid getting tiles too far away

  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  Result := Self.VectorToMSRect(
              Vec3(loc.x + offset.X, loc.y + offset.Y, tile.Z + offset.Z),
              tile.X, tile.Y, angle
            );
end;

function TRSMinimap.GetTileMS(vec: Vector3; tile: Vector3 = [1, 1, 0]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TRectangle; overload;
begin
  if not vec.ToPoint().InRange(Minimap.Center, 90) then Exit; //avoid getting tiles too far away

  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  Result := Self.VectorToMSRect(vec + offset + [0, 0, tile.Z], tile.X, tile.Y, angle);
end;

function TRSMinimap.GetTileArrayMS(locArray: TPointArray; tile: Vector3 = [1, 1, 0]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TRectArray;
var
  loc: TPoint;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  for loc in locArray.SortFrom(Self.Center) do
    Result += Self.GetTileMS(loc, tile, offset, angle);
end;


(*
## Minimap.GetCuboidMS
```pascal
function TRSMinimap.GetCuboidMSEx(loc: TPoint; shape: vector3; rotation: Single = 0; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidEx;
function TRSMinimap.GetCuboidMS(loc: TPoint; tile: Vector3 = [1, 1, 4]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidEx;
function TRSMinimap.GetCuboidArrayMSEx(locArray: TPointArray; shape: Vector3; rotations: TSingleArray; startHeights: TDoubleArray; offset: Vector2 = [0, 0]; angle: Single = $FFFF): TCuboidExArray;
function TRSMinimap.GetCuboidArrayMS(locArray: TPointArray; tile: Vector3; offset: Vector2 = [0, 0]; angle: Single = $FFFF): TCuboidExArray; overload;
```
Converts minimap coordinates to mainscreen cuboid(s) at a specific height.
To understand what this better, you should read about `Minimap.GetTileMS` and `TPointArray.ConvexHull` and understand what they do.

To put it simply, this will will first calculate a floor rectangle with **tile.Z**, or **height** if you prefer
of 0 and then calculate the top rectangle of the **tile.Z** you specified.

After this 2 rectangles are calculated, a cuboid is then made out of the two, resulting in a ConvexHull which is returned.

This is perfect to to get an accurate bounding cuboid of objects and NPCs which you can use to accurately color search after.

:::{note}
:class: dropdown
`angle` is the compass angle, by leaving it default it will gather the compass angle itself.
:::

The example below will show you how it could be used to retrieve an accurate player bounding cuboid.

Example:
```pascal
P := Minimap.GetDots(ERSMinimapDot.PLAYER)[0];         //find a player dot and returns it's coodinates.
offset := [2 , 2];                                     //Minimap dots are actually returned with a slight offset of -2, -2 when converting them to the mainscreen.
Debug(Minimap.GetCuboidMS(P, [1, 1, 7], offset));     //This will draw a polygon around the nearest player.
```
*)
function TRSMinimap.GetCuboidMSEx(loc: TPoint; shape: Vector3; rotation: Single = 0; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidEx;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);
  angle += rotation;

  Result.Bottom := Self.GetTileMs(loc, [shape.X, shape.Y, 0], offset, angle);

  if shape.Z <> 0 then
    Result.Top := Self.GetTileMS(loc, shape, offset, angle)
  else
    Result.Top := Result.Bottom;
end;

function TRSMinimap.GetCuboidMS(loc: TPoint; shape: Vector3 = [1, 1, 4]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidEx;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  Result.Bottom := Self.GetTileMs(loc, [shape.X, shape.Y, 0], offset, angle);
  if shape.Z <> 0 then
    Result.Top := Self.GetTileMS(loc, shape, offset, angle)
  else
    Result.Top := Result.Bottom;
end;

function TRSMinimap.GetCuboidMS(vec: Vector3; shape: Vector3 = [1, 1, 4]; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidEx; overload;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  Result.Bottom := Self.GetTileMs(vec, [shape.X, shape.Y, 0], offset, angle);
  if shape.Z <> 0 then
    Result.Top := Self.GetTileMS(vec, shape, offset, angle)
  else
    Result.Top := Result.Bottom;
end;

function TRSMinimap.GetCuboidArrayMSEx(locArray: TPointArray; shape: Vector3; rotations: TSingleArray; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidExArray;
var
  i: Int32;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  if Length(locArray) <> Length(rotations) then
    SetLength(rotations, Length(locArray));

  for i := 0 to High(locArray) do
  begin
    if not Self.Bounds.Expand(10).Contains(locArray[i]) then
      Continue;

    Result += Self.GetCuboidMSEx(locArray[i], shape, rotations[i], offset, angle)
  end;
end;

function TRSMinimap.GetCuboidArrayMS(locArray: TPointArray; shape: Vector3; offset: Vector3 = [0, 0, 0]; angle: Single = $FFFF): TCuboidExArray; overload;
var
  i: Int32;
begin
  if (angle = $FFFF) then
    angle := Self.GetCompassAngle(False);

  for i := 0 to High(locArray) do
  begin
    if not Self.Bounds.Expand(10).Contains(locArray[i]) then
      Continue;

    Result += Self.GetCuboidMS(locArray[i], shape, offset, angle);
  end;
end;


(*
## Minimap.GetZoomRectangle
```pascal
function TRSMinimap.GetZoomRectangle(): TRectangle;
```
This function returns an accurate rectangle of what's visible on the MainScreen on the Minimap.
This can be used to know if it's possible to make something visible by adjusting the zoom level or rotating the camera.

Example:
```pascal
Debug(Minimap.GetZoomRectangle());
```
*)
function TRSMinimap.GetZoomRectangle(): TRectangle;
begin
  if MM2MS.ZoomLevel = -1 then
    MM2MS.ZoomLevel := Options.GetZoomLevel();

  if MM2MS.ZoomRectangles[MM2MS.ZoomLevel] <> [] then
    Exit(MM2MS.ZoomRectangles[MM2MS.ZoomLevel]);

  Result := [
    MainScreen.PointToMM([MainScreen.Bounds.X1, MainScreen.Bounds.Y1]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X2, MainScreen.Bounds.Y1]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X2, MainScreen.Bounds.Y2]).ToPoint(),
    MainScreen.PointToMM([MainScreen.Bounds.X1, MainScreen.Bounds.Y2]).ToPoint()
  ];
  MM2MS.ZoomRectangles[MM2MS.ZoomLevel] := Result;
end;

(*
## Minimap.PointInZoomRectangle()
```pascal
function Minimap.PointInZoomRectangle(p: TPoint): Boolean;
```
Check if a given point is within our zoom rectangle, in other words, in visible in the Mainscreen.

Example::
```pascal
p := Minimap.GetDots(ERSMinimapDot.ITEM)[0]; //find an item dot and returns it's coodinates.
WriteLn Minimap.PointInZoomRadius(p);
```
*)
function TRSMinimap.PointOnZoomRectangle(p: TPoint): Boolean;
begin
  Result := Self.GetZoomRectangle().Contains(p);
end;

(*
## Minimap.RandomPointInZoomRectangle()
```pascal
function TRSMinimap.RandomPointInZoomRectangle(p: TPoint; randomness: Int32): TPoint;
```
Creates a random point that based on `randomness` and `p` that is within the zoom rectangle.
Returns `[0, 0]` if the point couldn't be generated, e.g. it's too far away from the zoom rectangle.
*)
function TRSMinimap.RandomPointOnZoomRectangle(p: TPoint; randomness: Int32): TPoint;
var
  rect: TRectangle;
  bmp: TMufasaBitmap;
begin
  rect := Self.GetZoomRectangle();
  if not rect.Contains(p) then
  begin
    bmp.FromClient();
    bmp.DrawRect(rect, $FFFFFF);
    bmp.DrawCross(p, 4, $FF);
    bmp.Debug();
    bmp.Free();
    Self.Fatal(p.ToString() + ' is not a valid point to generate a random point on the zoom rectangle: ' + rect.ToString() + '.');
  end;

  while not Result.InRect(rect) do
    Result := p.Random(-randomness, randomness);
end;


(*
## Minimap.PointWithinZoom
```pascal
function TRSMinimap.InZoomRangeEx(p: TPoint; out corner: TPoint): Boolean;
function TRSMinimap.InZoomRange(p: TPoint): Boolean;
function TRSMinimap.AnyInZoomRange(tpa: TPointArray): Boolean; overload;
```
Method used to know if a point is within reach of the Zoom rectangle without adjusting the zoom level.
Check TRSMinimap.GetZoomRectangle for information on the Zoom rectangle.

Example:
```pascal
WriteLn Minimap.PointWithinZoom([620, 100]);
```
*)
function TRSMinimap.InZoomRangeEx(p: TPoint; out corner: TPoint): Boolean;
var
  tpa: TPointArray;
begin
  if not Self.IsPointOn(p) then Exit;

  tpa := Self.GetZoomRectangle().ToTPA().SortFrom(Self.Center);
  corner := tpa[High(tpa)];

  Result := Self.Center.DistanceTo(P) <= Self.Center.DistanceTo(corner);
end;

function TRSMinimap.InZoomRange(p: TPoint): Boolean;
var
  corner: TPoint;
begin
  Result := Self.InZoomRangeEx(p, corner);
end;

function TRSMinimap.AnyInZoomRange(tpa: TPointArray): Boolean; overload;
var
  rect: TPointArray;
  p, corner: TPoint;
  dist: Double;
begin
  rect := Self.GetZoomRectangle().ToTPA().SortFrom(Self.Center);
  corner := tpa[High(rect)];
  dist := Self.Center.DistanceTo(corner);

  for p in tpa do
    if Self.Center.DistanceTo(p) <= dist then
      Exit(True);
end;


(*
## Minimap.GetZoomToPoint
```pascal
function TRSMinimap.GetZoomToPoint(p: TPoint; randomness: Int32 = 0): Int32;
```
This function gives us a zoom level where **P** would be visible in the MainScreen.

Example:
```pascal
p := Minimap.GetDots(ERSMinimapDot.ITEM)[0]; //find an item dot and returns it's coodinates.
Options.SetZoomLevel(Minimap.ZoomToVisiblePoint(p));
```
*)
function TRSMinimap.GetZoomToPoint(p: TPoint; randomness: Int32 = 0): Int32;
var
  distance: Double;
begin
  distance := p.DistanceTo(Self.Center);

  Result := Round((73 - distance) / 0.8);
  Result := Result + randomness;
end;

(*
## Minimap.SetZoomToPoint
```pascal
function TRSMinimap.SetZoomToPoint(p: TPoint; randomness: Int32 = 0): Boolean;
```
This function adjusts the zoom level so **P** TRSMinimap.PointWithinZoom() is true.
*)
function TRSMinimap.SetZoomToPoint(p: TPoint; randomness: Int32 = 0): Boolean;
var
  level: Int32;
begin
  if Self.InZoomRange(p) then
    Exit(True);

  level := Self.GetZoomToPoint(p, randomness);

  if InRange(level, 0, 100) then
    Result := Options.SetZoomLevel(level);
end;


(*
## Minimap.MakePointVisible
```pascal
function TRSMinimap.MakePointVisible(p: TPoint): Boolean;
function TRSMinimap.MakePointVisible(tpa: TPointArray): Boolean; overload;
```
Uses both Minimap.ZoomToPoint() and Minimap.FacePoint() to make a point visible on the Mainscreen.
*)
function TRSMinimap.MakePointVisible(p: TPoint): Boolean;
begin
  Result := Self.SetZoomToPoint(p, Random(-5, 5)) and Self.FacePoint(p, Random(-3, 3));
end;

function TRSMinimap.MakePointVisible(tpa: TPointArray): Boolean; overload;
begin
  Result := Self.MakePointVisible(tpa.SortFrom(Self.Center));
end;



(*
# Mainscreen Extensions
Extend the mainscreen-functionality with MS2MM function
*)

(*
## MainScreen.PointToMM() override
```pascal
function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3; override;
```
Takes a mainscreen point and converts it to a point on the minimap.

Returns a Vector3 which includes input height. Conversion to a TPoint if that's what you need is simply
done by calling `.ToPoint` on the result.

Example:
```pascal
WriteLn Mainscreen.PointToMM(Point(250,140), 2);           // as a vector (more accurate)
WriteLn Mainscreen.PointToMM(Point(250,140), 2).ToPoint(); // as a TPoint (lost accuracy)
```
*)
function TRSMainScreen.PointToMM(MS: TPoint; Height: Int32=0; Accuracy:Double=0.2): Vector3; override;
var
  a: Double := Minimap.GetCompassAngle(False);

  function FindNearest(Area, Step: Double; FromMM: Vector3; IsFinal: Boolean): Vector3;
  var
    i: Int32;
    TPA: TPointArray;
    arr,raw: Vector3Array;
    best: TPoint;
    x,y: Double;
  begin
    best := Point(-9999, -9999);
    x := FromMM.X-Area;
    while x <= FromMM.X+Area do
    begin
      y := FromMM.Y-Area;
      while y <= FromMM.Y+Area do
      begin
        raw += Vector3([x,y,height]);
        arr += raw[High(raw)].RotateXY(-a, Minimap.Center.X, Minimap.Center.Y);
        y += Step;
      end;
      x += Step;
    end;

    TPA := Minimap.VectorsToMS(Copy(arr), a);
    if not IsFinal then Swap(arr, raw);
    for i:=0 to High(TPA) do
      if Distance(TPA[i], MS) < Distance(best, MS) then
      begin
        best := TPA[i];
        Result := arr[i];
      end;
    Result.z := Height;
  end;

var
  area: Double;
begin
  area := 48;
  Result := FindNearest(area, area, Vec3(Minimap.Center.X, Minimap.Center.Y), False);
  while area > accuracy do
  begin
    Result := FindNearest(area, area, Result, False);
    area /= 2;
  end;
  Result := FindNearest(area, accuracy, Result, True);
end;

(*
## MainScreen.NormalizeDistance() override
```pascal
function TRSMainScreen.NormalizeDistance(Dist: Int32; Accuracy: Single = 1.05): Int32; override;
```
Converts a distance acquired from the **fixed client* and **default zoom** to the
current mainscreen.

Example:
```pascal
// 20 pixels on the fixed client and default zoom(50) is currently x pixels at the current zoom & client size.
WriteLn(MainScreen.TranslateDistance(20));
```
*)
function TRSMainScreen.NormalizeDistance(Dist: Int32; Accuracy: Single = 1.05): Int32; override;
var
  Projector: TMM2MSProjector;
  Base: TPoint;

  function SearchUp(Value: Single; Target: Single; Inc: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) > Target then
        Exit(Value);

      Value *= Inc;
    end;
  end;

  function SearchDown(Value: Single; Target: Single; Dec: Single): Single;
  var
    P: TPoint;
  begin
    while True do
    begin
      P := Projector.Run([Value, 0, 0], [0, 0, 0]);
      if Base.DistanceTo(P) < Target then
        Exit(Value);

      Value /= Dec;
    end;
  end;

var
  lo, hi, mean: Single;
begin
  if (Dist = 0) then
    Exit;

  Projector := MM2MS_PROJECTOR_FIXED;
  Base := Projector.Run([0, 0, 0], [0, 0, 0]);

  hi := SearchUp(0.1, Dist, 1.50);
  lo := SearchDown(hi, Dist, 1.50);

  hi := SearchUp(lo, Dist, Accuracy);
  lo := SearchDown(hi, Dist, Accuracy);

  mean := lo + ((hi - lo) / 2);
  Result := Distance(Minimap.VectorToMS([Minimap.Center.X, Minimap.Center.Y], 0),
                     Minimap.VectorToMS([Minimap.Center.X + mean, Minimap.Center.Y], 0));

  if Result < 1 then
    Result := 1;
end;

(*
## MainScreen.GetPlayerBox() override
```pascal
function TRSMainScreen.GetPlayerBox: TBox;
```
Returns a box surrounding our player. Works at any zoom level.
*)
function TRSMainScreen.GetPlayerBox(): TBox; override;
var
  a: Double;
  tpa: TPointArray;
begin
  if MM2MS.PlayerBoxes[MM2MS.ZoomLevel] <> [] then
    Exit(MM2MS.PlayerBoxes[MM2MS.ZoomLevel]);

  a := Minimap.GetCompassAngle(False);
  tpa := [Minimap.VectorToMS(Vec3(Minimap.Center.X - 2, Minimap.Center.Y, 10), a),
          Minimap.VectorToMS(Vec3(Minimap.Center.X + 2, Minimap.Center.Y, -3), a)];

  Result := tpa.Bounds();
  MM2MS.PlayerBoxes[MM2MS.ZoomLevel] := Result;
end;


(*
## Minimap.FacePoint
```pascal
function TRSMinimap.FacePoint(p: TPoint; randomness: Int32 = 0): Boolean;
```
This method will rotate the camera so that **P** is within the zoom rectangle without adjusting the zoom level.

Example:
```pascal
WriteLn Minimap.FacePoint([620, 100]); //keep in mind this example uses a static point, you will probably never do this.
```
*)
function TRSMinimap.FacePoint(p: TPoint; randomness: Int32 = 0): Boolean;
var
  tpa: TPointArray;
  d1: Double;
  i: Int32;
begin
  if not Self.IsPointOn(p) then Exit;

  tpa := Self.GetZoomRectangle().Totpa();

  if SRL.PointInPoly(p, tpa) then Exit(True);

  tpa := tpa.SortFrom(p);
  d1 := center.DistanceTo(p);

  for i := 0 to High(tpa) do
    if Result := d1 <= Self.Center.DistanceTo(tpa[i]) then
      Break;

  if not Result then Exit;

  Self.SetCompassAngle(
    Self.Center.AngleBetween(tpa[i]) - Self.Center.AngleBetween(p) + randomness
  );
end;

(*
## MainScreen.FacePoint
```pascal
function TRSMainScreen.FacePoint(p: TPoint; randomness: Int32 = 0): Boolean; override;
```
Rotates the camera to face point `p`.
*)
function TRSMainScreen.FacePoint(p: TPoint; randomness: Int32 = 0): Boolean; override;
begin
  Result := Minimap.FacePoint(Self.PointToMM(p).ToPoint(), randomness);
end;

(*
## Options.SetZoomLevel() override
```pascal
function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
```
Override to automatically update MM2MS.ZoomLevel.
*)
function TRSOptions.SetZoomLevel(Level: Int32): Boolean; override;
begin
  Result := inherited();
  if Result then
    MM2MS.ZoomLevel := Level;
end;


procedure TRSMinimap.DebugTiles(dots: ERSMinimapDots = [ERSMinimapDot.PLAYER, ERSMinimapDot.NPC, ERSMinimapDot.ITEM]);
const DOT_COLORS: TIntegerArray = [$FFFFFF, $00FFFF, $0000FF];
var
  bmp: TMufasaBitmap;
  p: TPoint;
  vector: Vector3;
  rect: TRectangle;
  dot: ERSMinimapDot;
  angle: Single;
  tpa: TPointArray;
begin
  angle := Self.GetCompassAngle(False);

  bmp.Init();
  bmp.FromClient();

  for p.X := Self.Center.X - 25 * 4 to Self.Center.X + 25 * 4 with 4 do
    for p.Y := Self.Center.Y - 25 * 4 to Self.Center.Y + 25 * 4 with 4 do
    begin
      vector := Vec3(p.X, p.Y).RotateXY(angle, Self.Center.X, Self.Center.Y);
      if not Self.PointOnZoomRectangle(vector.ToPoint()) then Continue;
      rect := Self.VectorToMSRect(vector, 1, 1, angle);
      tpa := rect.ToTPA().Connect();
      bmp.DrawTPA(tpa.FilterBox(MainScreen.Bounds), $00FF00);
    end;

  for dot in dots do
  begin
    for p in Self.GetDots(dot) do
    begin
      vector := Vec3(p.X, p.Y, 0);
      if not Self.PointOnZoomRectangle(vector.ToPoint()) then Continue;
      rect := Self.VectorToMSRect(vector, 1, 1, angle);
      tpa := rect.ToTPA().Connect().Grow(1);
      bmp.DrawTPA(tpa.FilterBox(MainScreen.Bounds), DOT_COLORS[dot]);
    end;
  end;

  vector := Vec3(Self.Center.X, Self.Center.Y);
  rect := Self.VectorToMSRect(vector, 1, 1, angle);
  tpa := rect.ToTPA().Connect().Grow(1);
  bmp.DrawTPA(tpa, $FF0000);

  bmp.Debug();
  bmp.Free();
end;
