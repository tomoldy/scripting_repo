{$DEFINE SRL_DEPRECATED_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}
//deprecated SRL-T methods, variables and constants. AVOID USING THEM!

const
  BANK_DEPOSIT_ALL          = -1;
  BANK_WITHDRAW_ALL         = -1;
  BANK_WITHDRAW_ALL_BUT_ONE = -2;
  MAKE_QUANTITY_ALL = -1;

function TRSStats.GetCurrentLevel(skill: ERSSkill): Int32; deprecated 'Use Stats.GetLevel() instead.'
begin
  Result := Self.GetLevel(skill, False);
end;

function TRSEquipment.FindItem(Item: TRSItem): Boolean; overload; deprecated 'Use TRSEquipment.ContainsItem()';
var
  B: TBox;
begin
  Result := Self.FindItem(Item, B);
end;


function TRSMinimap.ArrToMS(points: TPointArray; roll: Single = $FFFF): TPointArray; deprecated 'Use Minimap.PointsToMS() instead.';
begin
  Result := Self.PointsToMS(points, roll);
end;

function TRSMinimap.VecToMSRect(vector: Vector3; weSize, nsSize: Double = 1; roll: Single = $FFFF): TRectangle; deprecated ' Use Minimap.VectorToMSRect() instead.';
begin
  Result := Self.VectorToMSRect(vector, weSize, nsSize, roll);
end;



procedure TRSWalker.Setup(map: String; aRegions: TBoxArray; scaling: Int32 = 8); overload; deprecated 'Use TRSWalker.SetupRegions() instead.';
begin
  Self.Scaling := scaling;
  Self.Map.Load(map, aRegions, scaling);
  Self.Regions := aRegions;
  Self.InternalSetup();
end;

procedure TRSWalker.Setup(aRegions: TBoxArray; scaling: Int32 = 8); overload; deprecated 'Use TRSWalker.SetupRegions() instead.';
begin
  Self.SetupRegions(WALKER_MAP, aRegions, scaling);
end;


function TRSMainScreen.IsClassicOpen(): Boolean; deprecated 'Use RSInterface.IsOpen(ERSInterfaceType.CLASSIC) instead.';
begin
  Result := RSInterface.IsOpen(ERSInterfaceType.CLASSIC);
end;

function TRSMainScreen.HasInterface(): Boolean; deprecated 'Use RSInterface.IsOpen() instead.';
begin
  Result := RSInterface.IsOpen();
end;

function TRSMainScreen.CloseInterface(pressEscape: Boolean = True): Boolean; deprecated 'Use RSInterface.Close() instead.';
begin
  Result := RSInterface.Close(pressEscape);
end;


